{"ast":null,"code":"'use strict';\n\nvar path = require('path');\nvar camelCase = require('camelcase');\nvar cosmiconfig = require('cosmiconfig');\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) {\n    if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  }\n  return a;\n};\nconst VALID_CHAR_REGEX = /[^a-zA-Z0-9 _-]/g;\nconst getComponentName = filePath => {\n  if (!filePath) return \"SvgComponent\";\n  const pascalCaseFileName = camelCase(path.parse(filePath).name.replace(VALID_CHAR_REGEX, \"\"), {\n    pascalCase: true\n  });\n  return `Svg${pascalCaseFileName}`;\n};\nconst expandState = state => {\n  return __spreadValues$1({\n    componentName: state.componentName || getComponentName(state.filePath)\n  }, state);\n};\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst DEFAULT_CONFIG = {\n  dimensions: true,\n  expandProps: \"end\",\n  icon: false,\n  native: false,\n  typescript: false,\n  prettier: true,\n  prettierConfig: void 0,\n  memo: false,\n  ref: false,\n  replaceAttrValues: void 0,\n  svgProps: void 0,\n  svgo: true,\n  svgoConfig: void 0,\n  template: void 0,\n  index: false,\n  titleProp: false,\n  descProp: false,\n  runtimeConfig: true,\n  namedExport: \"ReactComponent\",\n  exportType: \"default\"\n};\nconst explorer = cosmiconfig.cosmiconfig(\"svgr\");\nconst explorerSync = cosmiconfig.cosmiconfigSync(\"svgr\");\nconst resolveConfig = async (searchFrom, configFile) => {\n  if (configFile == null) {\n    const result2 = await explorer.search(searchFrom);\n    return result2 ? result2.config : null;\n  }\n  const result = await explorer.load(configFile);\n  return result ? result.config : null;\n};\nresolveConfig.sync = (searchFrom, configFile) => {\n  if (configFile == null) {\n    const result2 = explorerSync.search(searchFrom);\n    return result2 ? result2.config : null;\n  }\n  const result = explorerSync.load(configFile);\n  return result ? result.config : null;\n};\nconst resolveConfigFile = async filePath => {\n  const result = await explorer.search(filePath);\n  return result ? result.filepath : null;\n};\nresolveConfigFile.sync = filePath => {\n  const result = explorerSync.search(filePath);\n  return result ? result.filepath : null;\n};\nconst loadConfig = async function (_a) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _b = _a,\n    {\n      configFile\n    } = _b,\n    baseConfig = __objRest(_b, [\"configFile\"]);\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? await resolveConfig(state.filePath, configFile) : {};\n  return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), rcConfig), baseConfig);\n};\nloadConfig.sync = function (_c) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _d = _c,\n    {\n      configFile\n    } = _d,\n    baseConfig = __objRest(_d, [\"configFile\"]);\n  const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? resolveConfig.sync(state.filePath, configFile) : {};\n  return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), rcConfig), baseConfig);\n};\nconst DEFAULT_PLUGINS = [];\nconst getPlugins = (config, state) => {\n  var _a;\n  if (config.plugins) {\n    return config.plugins;\n  }\n  if ((_a = state.caller) == null ? void 0 : _a.defaultPlugins) {\n    return state.caller.defaultPlugins;\n  }\n  return DEFAULT_PLUGINS;\n};\nconst resolvePlugin = plugin => {\n  if (typeof plugin === \"function\") {\n    return plugin;\n  }\n  if (typeof plugin === \"string\") {\n    return loadPlugin(plugin);\n  }\n  throw new Error(`Invalid plugin \"${plugin}\"`);\n};\nconst pluginCache = {};\nconst resolveModule = m => m ? m.default || m : null;\nconst loadPlugin = moduleName => {\n  if (pluginCache[moduleName]) {\n    return pluginCache[moduleName];\n  }\n  try {\n    const plugin = resolveModule(require(moduleName));\n    if (!plugin) {\n      throw new Error(`Invalid plugin \"${moduleName}\"`);\n    }\n    pluginCache[moduleName] = plugin;\n    return pluginCache[moduleName];\n  } catch (error) {\n    console.log(error);\n    throw new Error(`Module \"${moduleName}\" missing. Maybe \\`npm install ${moduleName}\\` could help!`);\n  }\n};\nconst run = (code, config, state) => {\n  const expandedState = expandState(state);\n  const plugins = getPlugins(config, state).map(resolvePlugin);\n  let nextCode = String(code).replace(\"\\0\", \"\");\n  for (const plugin of plugins) {\n    nextCode = plugin(nextCode, config, expandedState);\n  }\n  return nextCode;\n};\nconst transform = async function (code) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  config = await loadConfig(config, state);\n  return run(code, config, state);\n};\ntransform.sync = function (code) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  config = loadConfig.sync(config, state);\n  return run(code, config, state);\n};\nexports.DEFAULT_CONFIG = DEFAULT_CONFIG;\nexports.loadConfig = loadConfig;\nexports.resolveConfig = resolveConfig;\nexports.resolveConfigFile = resolveConfigFile;\nexports.transform = transform;","map":{"version":3,"names":["VALID_CHAR_REGEX","getComponentName","filePath","pascalCaseFileName","camelCase","path","parse","name","replace","pascalCase","expandState","state","__spreadValues$1","componentName","DEFAULT_CONFIG","dimensions","expandProps","icon","native","typescript","prettier","prettierConfig","memo","ref","replaceAttrValues","svgProps","svgo","svgoConfig","template","index","titleProp","descProp","runtimeConfig","namedExport","exportType","explorer","cosmiconfig","explorerSync","cosmiconfigSync","resolveConfig","searchFrom","configFile","result2","search","config","result","load","sync","resolveConfigFile","filepath","loadConfig","_a","arguments","length","undefined","_b","baseConfig","__objRest","rcConfig","__spreadValues","_c","_d","DEFAULT_PLUGINS","getPlugins","plugins","caller","defaultPlugins","resolvePlugin","plugin","loadPlugin","Error","pluginCache","resolveModule","m","default","moduleName","require","error","console","log","run","code","expandedState","map","nextCode","String","transform"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\core\\src\\state.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\core\\src\\config.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\core\\src\\plugins.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\core\\src\\transform.ts"],"sourcesContent":["import { parse as parsePath } from 'path'\n// @ts-ignore\nimport camelCase from 'camelcase'\nimport type { ConfigPlugin } from './plugins'\n\nexport interface State {\n  filePath?: string\n  componentName: string\n  caller?: {\n    name?: string\n    previousExport?: string | null\n    defaultPlugins?: ConfigPlugin[]\n  }\n}\n\nconst VALID_CHAR_REGEX = /[^a-zA-Z0-9 _-]/g\n\nconst getComponentName = (filePath?: string): string => {\n  if (!filePath) return 'SvgComponent'\n  const pascalCaseFileName = camelCase(\n    parsePath(filePath).name.replace(VALID_CHAR_REGEX, ''),\n    {\n      pascalCase: true,\n    },\n  )\n  return `Svg${pascalCaseFileName}`\n}\n\nexport const expandState = (state: Partial<State>): State => {\n  return {\n    componentName: state.componentName || getComponentName(state.filePath),\n    ...state,\n  }\n}\n","import { cosmiconfig, cosmiconfigSync } from 'cosmiconfig'\nimport type { Options as PrettierOptions } from 'prettier'\nimport type { Config as SvgoConfig } from 'svgo'\nimport type { Options as TransformOptions } from '@svgr/babel-preset'\nimport type { TransformOptions as BabelTransformOptions } from '@babel/core'\nimport type { ConfigPlugin } from './plugins'\nimport type { State } from './state'\n\nexport interface Config {\n  ref?: boolean\n  titleProp?: boolean\n  descProp?: boolean\n  expandProps?: boolean | 'start' | 'end'\n  dimensions?: boolean\n  icon?: boolean | string | number\n  native?: boolean\n  svgProps?: {\n    [key: string]: string\n  }\n  replaceAttrValues?: {\n    [key: string]: string\n  }\n  runtimeConfig?: boolean\n  typescript?: boolean\n  prettier?: boolean\n  prettierConfig?: PrettierOptions\n  svgo?: boolean\n  svgoConfig?: SvgoConfig\n  configFile?: string\n  template?: TransformOptions['template']\n  memo?: boolean\n  exportType?: 'named' | 'default'\n  namedExport?: string\n  jsxRuntime?: 'classic' | 'classic-preact' | 'automatic'\n  jsxRuntimeImport?: {\n    source: string\n    namespace?: string\n    specifiers?: string[]\n    defaultSpecifier?: string\n  }\n\n  // CLI only\n  index?: boolean\n  plugins?: ConfigPlugin[]\n\n  // JSX\n  jsx?: {\n    babelConfig?: BabelTransformOptions\n  }\n}\n\nexport const DEFAULT_CONFIG: Config = {\n  dimensions: true,\n  expandProps: 'end',\n  icon: false,\n  native: false,\n  typescript: false,\n  prettier: true,\n  prettierConfig: undefined,\n  memo: false,\n  ref: false,\n  replaceAttrValues: undefined,\n  svgProps: undefined,\n  svgo: true,\n  svgoConfig: undefined,\n  template: undefined,\n  index: false,\n  titleProp: false,\n  descProp: false,\n  runtimeConfig: true,\n  namedExport: 'ReactComponent',\n  exportType: 'default',\n}\n\nconst explorer = cosmiconfig('svgr')\nconst explorerSync = cosmiconfigSync('svgr')\n\nexport const resolveConfig = async (\n  searchFrom?: string,\n  configFile?: string,\n): Promise<Config | null> => {\n  if (configFile == null) {\n    const result = await explorer.search(searchFrom)\n    return result ? result.config : null\n  }\n  const result = await explorer.load(configFile)\n  return result ? result.config : null\n}\n\nresolveConfig.sync = (\n  searchFrom?: string,\n  configFile?: string,\n): Config | null => {\n  if (configFile == null) {\n    const result = explorerSync.search(searchFrom)\n    return result ? result.config : null\n  }\n  const result = explorerSync.load(configFile)\n  return result ? result.config : null\n}\n\nexport const resolveConfigFile = async (\n  filePath: string,\n): Promise<string | null> => {\n  const result = await explorer.search(filePath)\n  return result ? result.filepath : null\n}\n\nresolveConfigFile.sync = (filePath: string): string | null => {\n  const result = explorerSync.search(filePath)\n  return result ? result.filepath : null\n}\n\nexport const loadConfig = async (\n  { configFile, ...baseConfig }: Config,\n  state: Pick<State, 'filePath'> = {},\n): Promise<Config> => {\n  const rcConfig =\n    state.filePath && baseConfig.runtimeConfig !== false\n      ? await resolveConfig(state.filePath, configFile)\n      : {}\n  return { ...DEFAULT_CONFIG, ...rcConfig, ...baseConfig }\n}\n\nloadConfig.sync = (\n  { configFile, ...baseConfig }: Config,\n  state: Pick<State, 'filePath'> = {},\n): Config => {\n  const rcConfig =\n    state.filePath && baseConfig.runtimeConfig !== false\n      ? resolveConfig.sync(state.filePath, configFile)\n      : {}\n  return { ...DEFAULT_CONFIG, ...rcConfig, ...baseConfig }\n}\n","import { Config } from './config'\nimport type { State } from './state'\n\nexport interface Plugin {\n  (code: string, config: Config, state: State): string\n}\n\nexport type ConfigPlugin = string | Plugin\n\nconst DEFAULT_PLUGINS: Plugin[] = []\n\nexport const getPlugins = (\n  config: Config,\n  state: Partial<State>,\n): ConfigPlugin[] => {\n  if (config.plugins) {\n    return config.plugins\n  }\n\n  if (state.caller?.defaultPlugins) {\n    return state.caller.defaultPlugins\n  }\n\n  return DEFAULT_PLUGINS\n}\n\nexport const resolvePlugin = (plugin: ConfigPlugin): Plugin => {\n  if (typeof plugin === 'function') {\n    return plugin\n  }\n\n  if (typeof plugin === 'string') {\n    return loadPlugin(plugin)\n  }\n\n  throw new Error(`Invalid plugin \"${plugin}\"`)\n}\n\nconst pluginCache: Record<string, Plugin> = {}\n\nconst resolveModule = (m: any) => (m ? m.default || m : null)\n\nexport const loadPlugin = (moduleName: string): Plugin => {\n  if (pluginCache[moduleName]) {\n    return pluginCache[moduleName]\n  }\n\n  try {\n    // eslint-disable-next-line\n    const plugin = resolveModule(require(moduleName))\n    if (!plugin) {\n      throw new Error(`Invalid plugin \"${moduleName}\"`)\n    }\n    pluginCache[moduleName] = plugin\n    return pluginCache[moduleName]\n  } catch (error) {\n    console.log(error)\n    throw new Error(\n      `Module \"${moduleName}\" missing. Maybe \\`npm install ${moduleName}\\` could help!`,\n    )\n  }\n}\n","import { expandState } from './state'\nimport { loadConfig } from './config'\nimport { resolvePlugin, getPlugins } from './plugins'\nimport type { Config } from './config'\nimport type { State } from './state'\n\nconst run = (code: string, config: Config, state: Partial<State>): string => {\n  const expandedState = expandState(state)\n  const plugins = getPlugins(config, state).map(resolvePlugin)\n  let nextCode = String(code).replace('\\0', '')\n  // eslint-disable-next-line no-restricted-syntax\n  for (const plugin of plugins) {\n    nextCode = plugin(nextCode, config, expandedState)\n  }\n  return nextCode\n}\n\nexport const transform = async (\n  code: string,\n  config: Config = {},\n  state: Partial<State> = {},\n): Promise<string> => {\n  config = await loadConfig(config, state)\n  return run(code, config, state)\n}\n\ntransform.sync = (\n  code: string,\n  config: Config = {},\n  state: Partial<State> = {},\n): string => {\n  config = loadConfig.sync(config, state)\n  return run(code, config, state)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}