{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').XastRoot} XastRoot\n * @typedef {import('./types').XastElement} XastElement\n * @typedef {import('./types').XastInstruction} XastInstruction\n * @typedef {import('./types').XastDoctype} XastDoctype\n * @typedef {import('./types').XastText} XastText\n * @typedef {import('./types').XastCdata} XastCdata\n * @typedef {import('./types').XastComment} XastComment\n * @typedef {import('./types').StringifyOptions} StringifyOptions\n */\nconst {\n  textElems\n} = require('../plugins/_collections.js');\n\n/**\n * @typedef {{\n *   indent: string,\n *   textContext: null | XastElement,\n *   indentLevel: number,\n * }} State\n */\n\n/**\n * @typedef {Required<StringifyOptions>} Options\n */\n\n/**\n * @type {(char: string) => string}\n */\nconst encodeEntity = char => {\n  return entities[char];\n};\n\n/**\n * @type {Options}\n */\nconst defaults = {\n  doctypeStart: '<!DOCTYPE',\n  doctypeEnd: '>',\n  procInstStart: '<?',\n  procInstEnd: '?>',\n  tagOpenStart: '<',\n  tagOpenEnd: '>',\n  tagCloseStart: '</',\n  tagCloseEnd: '>',\n  tagShortStart: '<',\n  tagShortEnd: '/>',\n  attrStart: '=\"',\n  attrEnd: '\"',\n  commentStart: '<!--',\n  commentEnd: '-->',\n  cdataStart: '<![CDATA[',\n  cdataEnd: ']]>',\n  textStart: '',\n  textEnd: '',\n  indent: 4,\n  regEntities: /[&'\"<>]/g,\n  regValEntities: /[&\"<>]/g,\n  encodeEntity: encodeEntity,\n  pretty: false,\n  useShortTags: true,\n  eol: 'lf',\n  finalNewline: false\n};\n\n/**\n * @type {Record<string, string>}\n */\nconst entities = {\n  '&': '&amp;',\n  \"'\": '&apos;',\n  '\"': '&quot;',\n  '>': '&gt;',\n  '<': '&lt;'\n};\n\n/**\n * convert XAST to SVG string\n *\n * @type {(data: XastRoot, config: StringifyOptions) => string}\n */\nconst stringifySvg = function (data) {\n  let userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  /**\n   * @type {Options}\n   */\n  const config = {\n    ...defaults,\n    ...userOptions\n  };\n  const indent = config.indent;\n  let newIndent = '    ';\n  if (typeof indent === 'number' && Number.isNaN(indent) === false) {\n    newIndent = indent < 0 ? '\\t' : ' '.repeat(indent);\n  } else if (typeof indent === 'string') {\n    newIndent = indent;\n  }\n  /**\n   * @type {State}\n   */\n  const state = {\n    indent: newIndent,\n    textContext: null,\n    indentLevel: 0\n  };\n  const eol = config.eol === 'crlf' ? '\\r\\n' : '\\n';\n  if (config.pretty) {\n    config.doctypeEnd += eol;\n    config.procInstEnd += eol;\n    config.commentEnd += eol;\n    config.cdataEnd += eol;\n    config.tagShortEnd += eol;\n    config.tagOpenEnd += eol;\n    config.tagCloseEnd += eol;\n    config.textEnd += eol;\n  }\n  let svg = stringifyNode(data, config, state);\n  if (config.finalNewline && svg.length > 0 && svg[svg.length - 1] !== '\\n') {\n    svg += eol;\n  }\n  return svg;\n};\nexports.stringifySvg = stringifySvg;\n\n/**\n * @type {(node: XastParent, config: Options, state: State) => string}\n */\nconst stringifyNode = (data, config, state) => {\n  let svg = '';\n  state.indentLevel += 1;\n  for (const item of data.children) {\n    if (item.type === 'element') {\n      svg += stringifyElement(item, config, state);\n    }\n    if (item.type === 'text') {\n      svg += stringifyText(item, config, state);\n    }\n    if (item.type === 'doctype') {\n      svg += stringifyDoctype(item, config);\n    }\n    if (item.type === 'instruction') {\n      svg += stringifyInstruction(item, config);\n    }\n    if (item.type === 'comment') {\n      svg += stringifyComment(item, config);\n    }\n    if (item.type === 'cdata') {\n      svg += stringifyCdata(item, config, state);\n    }\n  }\n  state.indentLevel -= 1;\n  return svg;\n};\n\n/**\n * create indent string in accordance with the current node level.\n *\n * @type {(config: Options, state: State) => string}\n */\nconst createIndent = (config, state) => {\n  let indent = '';\n  if (config.pretty && state.textContext == null) {\n    indent = state.indent.repeat(state.indentLevel - 1);\n  }\n  return indent;\n};\n\n/**\n * @type {(node: XastDoctype, config: Options) => string}\n */\nconst stringifyDoctype = (node, config) => {\n  return config.doctypeStart + node.data.doctype + config.doctypeEnd;\n};\n\n/**\n * @type {(node: XastInstruction, config: Options) => string}\n */\nconst stringifyInstruction = (node, config) => {\n  return config.procInstStart + node.name + ' ' + node.value + config.procInstEnd;\n};\n\n/**\n * @type {(node: XastComment, config: Options) => string}\n */\nconst stringifyComment = (node, config) => {\n  return config.commentStart + node.value + config.commentEnd;\n};\n\n/**\n * @type {(node: XastCdata, config: Options, state: State) => string}\n */\nconst stringifyCdata = (node, config, state) => {\n  return createIndent(config, state) + config.cdataStart + node.value + config.cdataEnd;\n};\n\n/**\n * @type {(node: XastElement, config: Options, state: State) => string}\n */\nconst stringifyElement = (node, config, state) => {\n  // empty element and short tag\n  if (node.children.length === 0) {\n    if (config.useShortTags) {\n      return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagShortEnd;\n    } else {\n      return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagOpenEnd + config.tagCloseStart + node.name + config.tagCloseEnd;\n    }\n    // non-empty element\n  } else {\n    let tagOpenStart = config.tagOpenStart;\n    let tagOpenEnd = config.tagOpenEnd;\n    let tagCloseStart = config.tagCloseStart;\n    let tagCloseEnd = config.tagCloseEnd;\n    let openIndent = createIndent(config, state);\n    let closeIndent = createIndent(config, state);\n    if (state.textContext) {\n      tagOpenStart = defaults.tagOpenStart;\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      tagCloseEnd = defaults.tagCloseEnd;\n      openIndent = '';\n    } else if (textElems.includes(node.name)) {\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      closeIndent = '';\n      state.textContext = node;\n    }\n    const children = stringifyNode(node, config, state);\n    if (state.textContext === node) {\n      state.textContext = null;\n    }\n    return openIndent + tagOpenStart + node.name + stringifyAttributes(node, config) + tagOpenEnd + children + closeIndent + tagCloseStart + node.name + tagCloseEnd;\n  }\n};\n\n/**\n * @type {(node: XastElement, config: Options) => string}\n */\nconst stringifyAttributes = (node, config) => {\n  let attrs = '';\n  for (const [name, value] of Object.entries(node.attributes)) {\n    // TODO remove attributes without values support in v3\n    if (value !== undefined) {\n      const encodedValue = value.toString().replace(config.regValEntities, config.encodeEntity);\n      attrs += ' ' + name + config.attrStart + encodedValue + config.attrEnd;\n    } else {\n      attrs += ' ' + name;\n    }\n  }\n  return attrs;\n};\n\n/**\n * @type {(node: XastText, config: Options, state: State) => string}\n */\nconst stringifyText = (node, config, state) => {\n  return createIndent(config, state) + config.textStart + node.value.replace(config.regEntities, config.encodeEntity) + (state.textContext ? '' : config.textEnd);\n};","map":{"version":3,"names":["textElems","require","encodeEntity","char","entities","defaults","doctypeStart","doctypeEnd","procInstStart","procInstEnd","tagOpenStart","tagOpenEnd","tagCloseStart","tagCloseEnd","tagShortStart","tagShortEnd","attrStart","attrEnd","commentStart","commentEnd","cdataStart","cdataEnd","textStart","textEnd","indent","regEntities","regValEntities","pretty","useShortTags","eol","finalNewline","stringifySvg","data","userOptions","arguments","length","undefined","config","newIndent","Number","isNaN","repeat","state","textContext","indentLevel","svg","stringifyNode","exports","item","children","type","stringifyElement","stringifyText","stringifyDoctype","stringifyInstruction","stringifyComment","stringifyCdata","createIndent","node","doctype","name","value","stringifyAttributes","openIndent","closeIndent","includes","attrs","Object","entries","attributes","encodedValue","toString","replace"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/stringifier.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').XastRoot} XastRoot\n * @typedef {import('./types').XastElement} XastElement\n * @typedef {import('./types').XastInstruction} XastInstruction\n * @typedef {import('./types').XastDoctype} XastDoctype\n * @typedef {import('./types').XastText} XastText\n * @typedef {import('./types').XastCdata} XastCdata\n * @typedef {import('./types').XastComment} XastComment\n * @typedef {import('./types').StringifyOptions} StringifyOptions\n */\n\nconst { textElems } = require('../plugins/_collections.js');\n\n/**\n * @typedef {{\n *   indent: string,\n *   textContext: null | XastElement,\n *   indentLevel: number,\n * }} State\n */\n\n/**\n * @typedef {Required<StringifyOptions>} Options\n */\n\n/**\n * @type {(char: string) => string}\n */\nconst encodeEntity = (char) => {\n  return entities[char];\n};\n\n/**\n * @type {Options}\n */\nconst defaults = {\n  doctypeStart: '<!DOCTYPE',\n  doctypeEnd: '>',\n  procInstStart: '<?',\n  procInstEnd: '?>',\n  tagOpenStart: '<',\n  tagOpenEnd: '>',\n  tagCloseStart: '</',\n  tagCloseEnd: '>',\n  tagShortStart: '<',\n  tagShortEnd: '/>',\n  attrStart: '=\"',\n  attrEnd: '\"',\n  commentStart: '<!--',\n  commentEnd: '-->',\n  cdataStart: '<![CDATA[',\n  cdataEnd: ']]>',\n  textStart: '',\n  textEnd: '',\n  indent: 4,\n  regEntities: /[&'\"<>]/g,\n  regValEntities: /[&\"<>]/g,\n  encodeEntity: encodeEntity,\n  pretty: false,\n  useShortTags: true,\n  eol: 'lf',\n  finalNewline: false,\n};\n\n/**\n * @type {Record<string, string>}\n */\nconst entities = {\n  '&': '&amp;',\n  \"'\": '&apos;',\n  '\"': '&quot;',\n  '>': '&gt;',\n  '<': '&lt;',\n};\n\n/**\n * convert XAST to SVG string\n *\n * @type {(data: XastRoot, config: StringifyOptions) => string}\n */\nconst stringifySvg = (data, userOptions = {}) => {\n  /**\n   * @type {Options}\n   */\n  const config = { ...defaults, ...userOptions };\n  const indent = config.indent;\n  let newIndent = '    ';\n  if (typeof indent === 'number' && Number.isNaN(indent) === false) {\n    newIndent = indent < 0 ? '\\t' : ' '.repeat(indent);\n  } else if (typeof indent === 'string') {\n    newIndent = indent;\n  }\n  /**\n   * @type {State}\n   */\n  const state = {\n    indent: newIndent,\n    textContext: null,\n    indentLevel: 0,\n  };\n  const eol = config.eol === 'crlf' ? '\\r\\n' : '\\n';\n  if (config.pretty) {\n    config.doctypeEnd += eol;\n    config.procInstEnd += eol;\n    config.commentEnd += eol;\n    config.cdataEnd += eol;\n    config.tagShortEnd += eol;\n    config.tagOpenEnd += eol;\n    config.tagCloseEnd += eol;\n    config.textEnd += eol;\n  }\n  let svg = stringifyNode(data, config, state);\n  if (config.finalNewline && svg.length > 0 && svg[svg.length - 1] !== '\\n') {\n    svg += eol;\n  }\n  return svg;\n};\nexports.stringifySvg = stringifySvg;\n\n/**\n * @type {(node: XastParent, config: Options, state: State) => string}\n */\nconst stringifyNode = (data, config, state) => {\n  let svg = '';\n  state.indentLevel += 1;\n  for (const item of data.children) {\n    if (item.type === 'element') {\n      svg += stringifyElement(item, config, state);\n    }\n    if (item.type === 'text') {\n      svg += stringifyText(item, config, state);\n    }\n    if (item.type === 'doctype') {\n      svg += stringifyDoctype(item, config);\n    }\n    if (item.type === 'instruction') {\n      svg += stringifyInstruction(item, config);\n    }\n    if (item.type === 'comment') {\n      svg += stringifyComment(item, config);\n    }\n    if (item.type === 'cdata') {\n      svg += stringifyCdata(item, config, state);\n    }\n  }\n  state.indentLevel -= 1;\n  return svg;\n};\n\n/**\n * create indent string in accordance with the current node level.\n *\n * @type {(config: Options, state: State) => string}\n */\nconst createIndent = (config, state) => {\n  let indent = '';\n  if (config.pretty && state.textContext == null) {\n    indent = state.indent.repeat(state.indentLevel - 1);\n  }\n  return indent;\n};\n\n/**\n * @type {(node: XastDoctype, config: Options) => string}\n */\nconst stringifyDoctype = (node, config) => {\n  return config.doctypeStart + node.data.doctype + config.doctypeEnd;\n};\n\n/**\n * @type {(node: XastInstruction, config: Options) => string}\n */\nconst stringifyInstruction = (node, config) => {\n  return (\n    config.procInstStart + node.name + ' ' + node.value + config.procInstEnd\n  );\n};\n\n/**\n * @type {(node: XastComment, config: Options) => string}\n */\nconst stringifyComment = (node, config) => {\n  return config.commentStart + node.value + config.commentEnd;\n};\n\n/**\n * @type {(node: XastCdata, config: Options, state: State) => string}\n */\nconst stringifyCdata = (node, config, state) => {\n  return (\n    createIndent(config, state) +\n    config.cdataStart +\n    node.value +\n    config.cdataEnd\n  );\n};\n\n/**\n * @type {(node: XastElement, config: Options, state: State) => string}\n */\nconst stringifyElement = (node, config, state) => {\n  // empty element and short tag\n  if (node.children.length === 0) {\n    if (config.useShortTags) {\n      return (\n        createIndent(config, state) +\n        config.tagShortStart +\n        node.name +\n        stringifyAttributes(node, config) +\n        config.tagShortEnd\n      );\n    } else {\n      return (\n        createIndent(config, state) +\n        config.tagShortStart +\n        node.name +\n        stringifyAttributes(node, config) +\n        config.tagOpenEnd +\n        config.tagCloseStart +\n        node.name +\n        config.tagCloseEnd\n      );\n    }\n    // non-empty element\n  } else {\n    let tagOpenStart = config.tagOpenStart;\n    let tagOpenEnd = config.tagOpenEnd;\n    let tagCloseStart = config.tagCloseStart;\n    let tagCloseEnd = config.tagCloseEnd;\n    let openIndent = createIndent(config, state);\n    let closeIndent = createIndent(config, state);\n\n    if (state.textContext) {\n      tagOpenStart = defaults.tagOpenStart;\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      tagCloseEnd = defaults.tagCloseEnd;\n      openIndent = '';\n    } else if (textElems.includes(node.name)) {\n      tagOpenEnd = defaults.tagOpenEnd;\n      tagCloseStart = defaults.tagCloseStart;\n      closeIndent = '';\n      state.textContext = node;\n    }\n\n    const children = stringifyNode(node, config, state);\n\n    if (state.textContext === node) {\n      state.textContext = null;\n    }\n\n    return (\n      openIndent +\n      tagOpenStart +\n      node.name +\n      stringifyAttributes(node, config) +\n      tagOpenEnd +\n      children +\n      closeIndent +\n      tagCloseStart +\n      node.name +\n      tagCloseEnd\n    );\n  }\n};\n\n/**\n * @type {(node: XastElement, config: Options) => string}\n */\nconst stringifyAttributes = (node, config) => {\n  let attrs = '';\n  for (const [name, value] of Object.entries(node.attributes)) {\n    // TODO remove attributes without values support in v3\n    if (value !== undefined) {\n      const encodedValue = value\n        .toString()\n        .replace(config.regValEntities, config.encodeEntity);\n      attrs += ' ' + name + config.attrStart + encodedValue + config.attrEnd;\n    } else {\n      attrs += ' ' + name;\n    }\n  }\n  return attrs;\n};\n\n/**\n * @type {(node: XastText, config: Options, state: State) => string}\n */\nconst stringifyText = (node, config, state) => {\n  return (\n    createIndent(config, state) +\n    config.textStart +\n    node.value.replace(config.regEntities, config.encodeEntity) +\n    (state.textContext ? '' : config.textEnd)\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}