{"ast":null,"code":"'use strict';\n\nexports.name = 'addClassesToSVGElement';\nexports.description = 'adds classnames to an outer <svg> element';\nvar ENOCLS = `Error in plugin \"addClassesToSVGElement\": absent parameters.\nIt should have a list of classes in \"classNames\" or one \"className\".\nConfig example:\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      className: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      classNames: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n`;\n\n/**\n * Add classnames to an outer <svg> element. Example config:\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       className: \"mySvg\"\n *     }\n *   }\n * ]\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       classNames: [\"mySvg\", \"size-big\"]\n *     }\n *   }\n * ]\n *\n * @author April Arcus\n *\n * @type {import('./plugins-types').Plugin<'addClassesToSVGElement'>}\n */\nexports.fn = (root, params) => {\n  if (!(Array.isArray(params.classNames) && params.classNames.some(String)) && !params.className) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const classNames = params.classNames || [params.className];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          const classList = new Set(node.attributes.class == null ? null : node.attributes.class.split(' '));\n          for (const className of classNames) {\n            if (className != null) {\n              classList.add(className);\n            }\n          }\n          node.attributes.class = Array.from(classList).join(' ');\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","description","ENOCLS","fn","root","params","Array","isArray","classNames","some","String","className","console","error","element","enter","node","parentNode","type","classList","Set","attributes","class","split","add","from","join"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/addClassesToSVGElement.js"],"sourcesContent":["'use strict';\n\nexports.name = 'addClassesToSVGElement';\nexports.description = 'adds classnames to an outer <svg> element';\n\nvar ENOCLS = `Error in plugin \"addClassesToSVGElement\": absent parameters.\nIt should have a list of classes in \"classNames\" or one \"className\".\nConfig example:\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      className: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      classNames: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n`;\n\n/**\n * Add classnames to an outer <svg> element. Example config:\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       className: \"mySvg\"\n *     }\n *   }\n * ]\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       classNames: [\"mySvg\", \"size-big\"]\n *     }\n *   }\n * ]\n *\n * @author April Arcus\n *\n * @type {import('./plugins-types').Plugin<'addClassesToSVGElement'>}\n */\nexports.fn = (root, params) => {\n  if (\n    !(Array.isArray(params.classNames) && params.classNames.some(String)) &&\n    !params.className\n  ) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const classNames = params.classNames || [params.className];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          const classList = new Set(\n            node.attributes.class == null\n              ? null\n              : node.attributes.class.split(' ')\n          );\n          for (const className of classNames) {\n            if (className != null) {\n              classList.add(className);\n            }\n          }\n          node.attributes.class = Array.from(classList).join(' ');\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,wBAAwB;AACvCD,OAAO,CAACE,WAAW,GAAG,2CAA2C;AAEjE,IAAIC,MAAM,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACI,EAAE,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC7B,IACE,EAAEC,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,UAAU,CAAC,IAAIH,MAAM,CAACG,UAAU,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,IACrE,CAACL,MAAM,CAACM,SAAS,EACjB;IACAC,OAAO,CAACC,KAAK,CAACX,MAAM,CAAC;IACrB,OAAO,IAAI;EACb;EACA,MAAMM,UAAU,GAAGH,MAAM,CAACG,UAAU,IAAI,CAACH,MAAM,CAACM,SAAS,CAAC;EAC1D,OAAO;IACLG,OAAO,EAAE;MACPC,KAAK,EAAEA,CAACC,IAAI,EAAEC,UAAU,KAAK;QAC3B,IAAID,IAAI,CAAChB,IAAI,KAAK,KAAK,IAAIiB,UAAU,CAACC,IAAI,KAAK,MAAM,EAAE;UACrD,MAAMC,SAAS,GAAG,IAAIC,GAAG,CACvBJ,IAAI,CAACK,UAAU,CAACC,KAAK,IAAI,IAAI,GACzB,IAAI,GACJN,IAAI,CAACK,UAAU,CAACC,KAAK,CAACC,KAAK,CAAC,GAAG,CACrC,CAAC;UACD,KAAK,MAAMZ,SAAS,IAAIH,UAAU,EAAE;YAClC,IAAIG,SAAS,IAAI,IAAI,EAAE;cACrBQ,SAAS,CAACK,GAAG,CAACb,SAAS,CAAC;YAC1B;UACF;UACAK,IAAI,CAACK,UAAU,CAACC,KAAK,GAAGhB,KAAK,CAACmB,IAAI,CAACN,SAAS,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;QACzD;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}