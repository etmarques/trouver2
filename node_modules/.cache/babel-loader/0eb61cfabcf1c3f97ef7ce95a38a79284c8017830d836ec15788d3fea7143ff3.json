{"ast":null,"code":"'use strict';\n\nvar core = require('@babel/core');\nconst elementToComponent = {\n  svg: \"Svg\",\n  circle: \"Circle\",\n  clipPath: \"ClipPath\",\n  ellipse: \"Ellipse\",\n  g: \"G\",\n  linearGradient: \"LinearGradient\",\n  radialGradient: \"RadialGradient\",\n  line: \"Line\",\n  path: \"Path\",\n  pattern: \"Pattern\",\n  polygon: \"Polygon\",\n  polyline: \"Polyline\",\n  rect: \"Rect\",\n  symbol: \"Symbol\",\n  text: \"Text\",\n  textPath: \"TextPath\",\n  tspan: \"TSpan\",\n  use: \"Use\",\n  defs: \"Defs\",\n  stop: \"Stop\",\n  mask: \"Mask\",\n  image: \"Image\",\n  foreignObject: \"ForeignObject\"\n};\nconst plugin = () => {\n  function replaceElement(path, state) {\n    const namePath = path.get(\"openingElement\").get(\"name\");\n    if (!namePath.isJSXIdentifier()) return;\n    const {\n      name\n    } = namePath.node;\n    const component = elementToComponent[name];\n    if (component) {\n      namePath.replaceWith(core.types.jsxIdentifier(component));\n      if (path.has(\"closingElement\")) {\n        const closingNamePath = path.get(\"closingElement\").get(\"name\");\n        closingNamePath.replaceWith(core.types.jsxIdentifier(component));\n      }\n      state.replacedComponents.add(component);\n      return;\n    }\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get(\"openingElement\").get(\"name\").isJSXIdentifier({\n        name: \"svg\"\n      })) {\n        return;\n      }\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get(\"source\").isStringLiteral({\n        value: \"react-native-svg\"\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get(\"specifiers\").some(specifier => specifier.get(\"local\").isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n          path.pushContainer(\"specifiers\", core.types.importSpecifier(core.types.identifier(component), core.types.identifier(component)));\n        });\n      } else if (path.get(\"source\").isStringLiteral({\n        value: \"expo\"\n      })) {\n        path.pushContainer(\"specifiers\", core.types.importSpecifier(core.types.identifier(\"Svg\"), core.types.identifier(\"Svg\")));\n      } else {\n        return;\n      }\n      if (state.unsupportedComponents.size && !path.has(\"trailingComments\")) {\n        const componentList = [...state.unsupportedComponents].join(\", \");\n        path.addComment(\"trailing\", ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);\n      }\n    }\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = /* @__PURE__ */new Set();\n        state.unsupportedComponents = /* @__PURE__ */new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n    }\n  };\n};\nmodule.exports = plugin;","map":{"version":3,"names":["elementToComponent","svg","circle","clipPath","ellipse","g","linearGradient","radialGradient","line","path","pattern","polygon","polyline","rect","symbol","text","textPath","tspan","use","defs","stop","mask","image","foreignObject","plugin","replaceElement","state","namePath","get","isJSXIdentifier","name","node","component","replaceWith","core","types","jsxIdentifier","has","closingNamePath","replacedComponents","add","unsupportedComponents","remove","svgElementVisitor","JSXElement","traverse","jsxElementVisitor","importDeclarationVisitor","ImportDeclaration","isStringLiteral","value","forEach","some","specifier","isIdentifier","pushContainer","importSpecifier","identifier","size","componentList","join","addComment","visitor","Program","Set"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-transform-react-native-svg\\src\\index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { NodePath, types as t } from '@babel/core'\n\ninterface State {\n  replacedComponents: Set<string>\n  unsupportedComponents: Set<string>\n}\n\nconst elementToComponent: { [key: string]: string } = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject',\n}\n\nconst plugin = () => {\n  function replaceElement(path: NodePath<t.JSXElement>, state: State) {\n    const namePath = path.get('openingElement').get('name')\n    if (!namePath.isJSXIdentifier()) return\n    const { name } = namePath.node\n\n    // Replace element by react-native-svg components\n    const component = elementToComponent[name]\n\n    if (component) {\n      namePath.replaceWith(t.jsxIdentifier(component))\n      if (path.has('closingElement')) {\n        const closingNamePath = path\n          .get('closingElement')\n          .get('name') as NodePath<t.JSXIdentifier>\n        closingNamePath.replaceWith(t.jsxIdentifier(component))\n      }\n      state.replacedComponents.add(component)\n      return\n    }\n\n    // Remove element if not supported\n    state.unsupportedComponents.add(name)\n    path.remove()\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path: NodePath<t.JSXElement>, state: State) {\n      if (\n        !path.get('openingElement').get('name').isJSXIdentifier({ name: 'svg' })\n      ) {\n        return\n      }\n\n      replaceElement(path, state)\n      path.traverse(jsxElementVisitor, state)\n    },\n  }\n\n  const jsxElementVisitor = {\n    JSXElement(path: NodePath<t.JSXElement>, state: State) {\n      replaceElement(path, state)\n    },\n  }\n\n  const importDeclarationVisitor = {\n    ImportDeclaration(path: NodePath<t.ImportDeclaration>, state: State) {\n      if (path.get('source').isStringLiteral({ value: 'react-native-svg' })) {\n        state.replacedComponents.forEach((component) => {\n          if (\n            path\n              .get('specifiers')\n              .some((specifier) =>\n                specifier.get('local').isIdentifier({ name: component }),\n              )\n          ) {\n            return\n          }\n\n          path.pushContainer(\n            'specifiers',\n            t.importSpecifier(t.identifier(component), t.identifier(component)),\n          )\n        })\n      } else if (path.get('source').isStringLiteral({ value: 'expo' })) {\n        path.pushContainer(\n          'specifiers',\n          t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')),\n        )\n      } else {\n        return\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ')\n        path.addComment(\n          'trailing',\n          ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `,\n        )\n      }\n    },\n  }\n\n  return {\n    visitor: {\n      Program(path: NodePath<t.Program>, state: Partial<State>) {\n        state.replacedComponents = new Set()\n        state.unsupportedComponents = new Set()\n\n        path.traverse(svgElementVisitor, state as State)\n        path.traverse(importDeclarationVisitor, state as State)\n      },\n    },\n  }\n}\n\nexport default plugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}