{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _cacheWrapper = require(\"./cacheWrapper\");\nvar _ExplorerBase = require(\"./ExplorerBase\");\nvar _getDirectory = require(\"./getDirectory\");\nvar _readFile = require(\"./readFile\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass Explorer extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n  async search() {\n    let searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n    if (this.config.metaConfigFilePath) {\n      const config = await this._loadFile(this.config.metaConfigFilePath, true);\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    return await this.searchFromDirectory(await (0, _getDirectory.getDirectory)(searchFrom));\n  }\n  async searchFromDirectory(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n    const run = async () => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n      return await this.config.transform(result);\n    };\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n  async searchDirectory(dir) {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n      if (this.shouldSearchStopWithResult(placeResult)) {\n        return placeResult;\n      }\n    } // config not found\n\n    return null;\n  }\n  async loadSearchPlace(dir, place) {\n    const filepath = _path.default.join(dir, place);\n    const fileContents = await (0, _readFile.readFile)(filepath);\n    return await this.createCosmiconfigResult(filepath, fileContents, false);\n  }\n  async loadFileContent(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    try {\n      return await loader(filepath, content);\n    } catch (e) {\n      e.filepath = filepath;\n      throw e;\n    }\n  }\n  async createCosmiconfigResult(filepath, content, forceProp) {\n    const fileContent = await this.loadFileContent(filepath, content);\n    return this.loadedContentToCosmiconfigResult(filepath, fileContent, forceProp);\n  }\n  async load(filepath) {\n    return this._loadFile(filepath, false);\n  }\n  async _loadFile(filepath, forceProp) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n    const runLoad = async () => {\n      const fileContents = await (0, _readFile.readFile)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const result = await this.createCosmiconfigResult(absoluteFilePath, fileContents, forceProp);\n      return await this.config.transform(result);\n    };\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad);\n    }\n    return runLoad();\n  }\n}\nexports.Explorer = Explorer;","map":{"version":3,"names":["_path","_interopRequireDefault","require","_cacheWrapper","_ExplorerBase","_getDirectory","_readFile","Explorer","ExplorerBase","constructor","options","search","searchFrom","arguments","length","undefined","process","cwd","config","metaConfigFilePath","_loadFile","isEmpty","searchFromDirectory","getDirectory","dir","absoluteDir","default","resolve","run","result","searchDirectory","nextDir","nextDirectoryToSearch","transform","searchCache","cacheWrapper","place","searchPlaces","placeResult","loadSearchPlace","shouldSearchStopWithResult","filepath","join","fileContents","readFile","createCosmiconfigResult","loadFileContent","content","trim","loader","getLoaderEntryForFile","e","forceProp","fileContent","loadedContentToCosmiconfigResult","load","validateFilePath","absoluteFilePath","runLoad","throwNotFound","loadCache"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\plugin-svgo\\node_modules\\cosmiconfig\\src\\Explorer.ts"],"sourcesContent":["import path from 'path';\nimport { cacheWrapper } from './cacheWrapper';\nimport { ExplorerBase } from './ExplorerBase';\nimport { getDirectory } from './getDirectory';\nimport { readFile } from './readFile';\nimport { CosmiconfigResult, ExplorerOptions, LoadedFileContent } from './types';\n\nclass Explorer extends ExplorerBase<ExplorerOptions> {\n  public constructor(options: ExplorerOptions) {\n    super(options);\n  }\n\n  public async search(\n    searchFrom: string = process.cwd(),\n  ): Promise<CosmiconfigResult> {\n    if (this.config.metaConfigFilePath) {\n      const config = await this._loadFile(this.config.metaConfigFilePath, true);\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    return await this.searchFromDirectory(await getDirectory(searchFrom));\n  }\n\n  private async searchFromDirectory(dir: string): Promise<CosmiconfigResult> {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = async (): Promise<CosmiconfigResult> => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      return await this.config.transform(result);\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private async searchDirectory(dir: string): Promise<CosmiconfigResult> {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult)) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private async loadSearchPlace(\n    dir: string,\n    place: string,\n  ): Promise<CosmiconfigResult> {\n    const filepath = path.join(dir, place);\n    const fileContents = await readFile(filepath);\n\n    return await this.createCosmiconfigResult(filepath, fileContents, false);\n  }\n\n  private async loadFileContent(\n    filepath: string,\n    content: string | null,\n  ): Promise<LoadedFileContent> {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    try {\n      return await loader(filepath, content);\n    } catch (e: any) {\n      e.filepath = filepath;\n      throw e;\n    }\n  }\n\n  private async createCosmiconfigResult(\n    filepath: string,\n    content: string | null,\n    forceProp: boolean,\n  ): Promise<CosmiconfigResult> {\n    const fileContent = await this.loadFileContent(filepath, content);\n\n    return this.loadedContentToCosmiconfigResult(\n      filepath,\n      fileContent,\n      forceProp,\n    );\n  }\n\n  public async load(filepath: string): Promise<CosmiconfigResult> {\n    return this._loadFile(filepath, false);\n  }\n\n  private async _loadFile(\n    filepath: string,\n    forceProp: boolean,\n  ): Promise<CosmiconfigResult> {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoad = async (): Promise<CosmiconfigResult> => {\n      const fileContents = await readFile(absoluteFilePath, {\n        throwNotFound: true,\n      });\n\n      const result = await this.createCosmiconfigResult(\n        absoluteFilePath,\n        fileContents,\n        forceProp,\n      );\n\n      return await this.config.transform(result);\n    };\n\n    if (this.loadCache) {\n      return cacheWrapper(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n}\n\nexport { Explorer };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}