{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../types').PathDataCommand} PathDataCommand\n * @typedef {import('../types').DataUri} DataUri\n */\n\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @type {(str: string, type?: DataUri) => string}\n */\nexports.encodeSVGDatauri = (str, type) => {\n  var prefix = 'data:image/svg+xml';\n  if (!type || type === 'base64') {\n    // base64\n    prefix += ';base64,';\n    str = prefix + Buffer.from(str).toString('base64');\n  } else if (type === 'enc') {\n    // URI encoded\n    str = prefix + ',' + encodeURIComponent(str);\n  } else if (type === 'unenc') {\n    // unencoded\n    str = prefix + ',' + str;\n  }\n  return str;\n};\n\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @type {(str: string) => string}\n */\nexports.decodeSVGDatauri = str => {\n  var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n  var match = regexp.exec(str);\n\n  // plain string\n  if (!match) return str;\n  var data = match[3];\n  if (match[2]) {\n    // base64\n    str = Buffer.from(data, 'base64').toString('utf8');\n  } else if (data.charAt(0) === '%') {\n    // URI encoded\n    str = decodeURIComponent(data);\n  } else if (data.charAt(0) === '<') {\n    // unencoded\n    str = data;\n  }\n  return str;\n};\n\n/**\n * @typedef {{\n *   noSpaceAfterFlags?: boolean,\n *   leadingZero?: boolean,\n *   negativeExtraSpace?: boolean\n * }} CleanupOutDataParams\n */\n\n/**\n * Convert a row of numbers to an optimized string view.\n *\n * @example\n * [0, -1, .5, .5] → \"0-1 .5.5\"\n *\n * @type {(data: Array<number>, params: CleanupOutDataParams, command?: PathDataCommand) => string}\n */\nexports.cleanupOutData = (data, params, command) => {\n  let str = '';\n  let delimiter;\n  /**\n   * @type {number}\n   */\n  let prev;\n  data.forEach((item, i) => {\n    // space delimiter by default\n    delimiter = ' ';\n\n    // no extra space in front of first number\n    if (i == 0) delimiter = '';\n\n    // no extra space after 'arcto' command flags(large-arc and sweep flags)\n    // a20 60 45 0 1 30 20 → a20 60 45 0130 20\n    if (params.noSpaceAfterFlags && (command == 'A' || command == 'a')) {\n      var pos = i % 7;\n      if (pos == 4 || pos == 5) delimiter = '';\n    }\n\n    // remove floating-point numbers leading zeros\n    // 0.5 → .5\n    // -0.5 → -.5\n    const itemStr = params.leadingZero ? removeLeadingZero(item) : item.toString();\n\n    // no extra space in front of negative number or\n    // in front of a floating number if a previous number is floating too\n    if (params.negativeExtraSpace && delimiter != '' && (item < 0 || itemStr.charAt(0) === '.' && prev % 1 !== 0)) {\n      delimiter = '';\n    }\n    // save prev item value\n    prev = item;\n    str += delimiter + itemStr;\n  });\n  return str;\n};\n\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @type {(num: number) => string}\n */\nconst removeLeadingZero = num => {\n  var strNum = num.toString();\n  if (0 < num && num < 1 && strNum.charAt(0) === '0') {\n    strNum = strNum.slice(1);\n  } else if (-1 < num && num < 0 && strNum.charAt(1) === '0') {\n    strNum = strNum.charAt(0) + strNum.slice(2);\n  }\n  return strNum;\n};\nexports.removeLeadingZero = removeLeadingZero;","map":{"version":3,"names":["exports","encodeSVGDatauri","str","type","prefix","Buffer","from","toString","encodeURIComponent","decodeSVGDatauri","regexp","match","exec","data","charAt","decodeURIComponent","cleanupOutData","params","command","delimiter","prev","forEach","item","i","noSpaceAfterFlags","pos","itemStr","leadingZero","removeLeadingZero","negativeExtraSpace","num","strNum","slice"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/svgo/tools.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../types').PathDataCommand} PathDataCommand\n * @typedef {import('../types').DataUri} DataUri\n */\n\n/**\n * Encode plain SVG data string into Data URI string.\n *\n * @type {(str: string, type?: DataUri) => string}\n */\nexports.encodeSVGDatauri = (str, type) => {\n  var prefix = 'data:image/svg+xml';\n  if (!type || type === 'base64') {\n    // base64\n    prefix += ';base64,';\n    str = prefix + Buffer.from(str).toString('base64');\n  } else if (type === 'enc') {\n    // URI encoded\n    str = prefix + ',' + encodeURIComponent(str);\n  } else if (type === 'unenc') {\n    // unencoded\n    str = prefix + ',' + str;\n  }\n  return str;\n};\n\n/**\n * Decode SVG Data URI string into plain SVG string.\n *\n * @type {(str: string) => string}\n */\nexports.decodeSVGDatauri = (str) => {\n  var regexp = /data:image\\/svg\\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;\n  var match = regexp.exec(str);\n\n  // plain string\n  if (!match) return str;\n\n  var data = match[3];\n\n  if (match[2]) {\n    // base64\n    str = Buffer.from(data, 'base64').toString('utf8');\n  } else if (data.charAt(0) === '%') {\n    // URI encoded\n    str = decodeURIComponent(data);\n  } else if (data.charAt(0) === '<') {\n    // unencoded\n    str = data;\n  }\n  return str;\n};\n\n/**\n * @typedef {{\n *   noSpaceAfterFlags?: boolean,\n *   leadingZero?: boolean,\n *   negativeExtraSpace?: boolean\n * }} CleanupOutDataParams\n */\n\n/**\n * Convert a row of numbers to an optimized string view.\n *\n * @example\n * [0, -1, .5, .5] → \"0-1 .5.5\"\n *\n * @type {(data: Array<number>, params: CleanupOutDataParams, command?: PathDataCommand) => string}\n */\nexports.cleanupOutData = (data, params, command) => {\n  let str = '';\n  let delimiter;\n  /**\n   * @type {number}\n   */\n  let prev;\n\n  data.forEach((item, i) => {\n    // space delimiter by default\n    delimiter = ' ';\n\n    // no extra space in front of first number\n    if (i == 0) delimiter = '';\n\n    // no extra space after 'arcto' command flags(large-arc and sweep flags)\n    // a20 60 45 0 1 30 20 → a20 60 45 0130 20\n    if (params.noSpaceAfterFlags && (command == 'A' || command == 'a')) {\n      var pos = i % 7;\n      if (pos == 4 || pos == 5) delimiter = '';\n    }\n\n    // remove floating-point numbers leading zeros\n    // 0.5 → .5\n    // -0.5 → -.5\n    const itemStr = params.leadingZero\n      ? removeLeadingZero(item)\n      : item.toString();\n\n    // no extra space in front of negative number or\n    // in front of a floating number if a previous number is floating too\n    if (\n      params.negativeExtraSpace &&\n      delimiter != '' &&\n      (item < 0 || (itemStr.charAt(0) === '.' && prev % 1 !== 0))\n    ) {\n      delimiter = '';\n    }\n    // save prev item value\n    prev = item;\n    str += delimiter + itemStr;\n  });\n  return str;\n};\n\n/**\n * Remove floating-point numbers leading zero.\n *\n * @example\n * 0.5 → .5\n *\n * @example\n * -0.5 → -.5\n *\n * @type {(num: number) => string}\n */\nconst removeLeadingZero = (num) => {\n  var strNum = num.toString();\n\n  if (0 < num && num < 1 && strNum.charAt(0) === '0') {\n    strNum = strNum.slice(1);\n  } else if (-1 < num && num < 0 && strNum.charAt(1) === '0') {\n    strNum = strNum.charAt(0) + strNum.slice(2);\n  }\n  return strNum;\n};\nexports.removeLeadingZero = removeLeadingZero;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}