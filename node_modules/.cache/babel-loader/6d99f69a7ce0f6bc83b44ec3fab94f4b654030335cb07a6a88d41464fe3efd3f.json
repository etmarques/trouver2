{"ast":null,"code":"'use strict';\n\nconst {\n  visit\n} = require('../lib/xast.js');\nconst {\n  inheritableAttrs,\n  pathElems\n} = require('./_collections.js');\nexports.name = 'moveElemsAttrsToGroup';\nexports.description = 'Move common attributes of group children to the group';\n\n/**\n * Move common attributes of group children to the group\n *\n * @example\n * <g attr1=\"val1\">\n *     <g attr2=\"val2\">\n *         text\n *     </g>\n *     <circle attr2=\"val2\" attr3=\"val3\"/>\n * </g>\n *              ⬇\n * <g attr1=\"val1\" attr2=\"val2\">\n *     <g>\n *         text\n *     </g>\n *    <circle attr3=\"val3\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveElemsAttrsToGroup'>}\n */\nexports.fn = root => {\n  // find if any style element is present\n  let deoptimizedWithStyles = false;\n  visit(root, {\n    element: {\n      enter: node => {\n        if (node.name === 'style') {\n          deoptimizedWithStyles = true;\n        }\n      }\n    }\n  });\n  return {\n    element: {\n      exit: node => {\n        // process only groups with more than 1 children\n        if (node.name !== 'g' || node.children.length <= 1) {\n          return;\n        }\n\n        // deoptimize the plugin when style elements are present\n        // selectors may rely on id, classes or tag names\n        if (deoptimizedWithStyles) {\n          return;\n        }\n\n        /**\n         * find common attributes in group children\n         * @type {Map<string, string>}\n         */\n        const commonAttributes = new Map();\n        let initial = true;\n        let everyChildIsPath = true;\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            if (pathElems.includes(child.name) === false) {\n              everyChildIsPath = false;\n            }\n            if (initial) {\n              initial = false;\n              // collect all inheritable attributes from first child element\n              for (const [name, value] of Object.entries(child.attributes)) {\n                // consider only inheritable attributes\n                if (inheritableAttrs.includes(name)) {\n                  commonAttributes.set(name, value);\n                }\n              }\n            } else {\n              // exclude uncommon attributes from initial list\n              for (const [name, value] of commonAttributes) {\n                if (child.attributes[name] !== value) {\n                  commonAttributes.delete(name);\n                }\n              }\n            }\n          }\n        }\n\n        // preserve transform on children when group has clip-path or mask\n        if (node.attributes['clip-path'] != null || node.attributes.mask != null) {\n          commonAttributes.delete('transform');\n        }\n\n        // preserve transform when all children are paths\n        // so the transform could be applied to path data by other plugins\n        if (everyChildIsPath) {\n          commonAttributes.delete('transform');\n        }\n\n        // add common children attributes to group\n        for (const [name, value] of commonAttributes) {\n          if (name === 'transform') {\n            if (node.attributes.transform != null) {\n              node.attributes.transform = `${node.attributes.transform} ${value}`;\n            } else {\n              node.attributes.transform = value;\n            }\n          } else {\n            node.attributes[name] = value;\n          }\n        }\n\n        // delete common attributes from children\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            for (const [name] of commonAttributes) {\n              delete child.attributes[name];\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["visit","require","inheritableAttrs","pathElems","exports","name","description","fn","root","deoptimizedWithStyles","element","enter","node","exit","children","length","commonAttributes","Map","initial","everyChildIsPath","child","type","includes","value","Object","entries","attributes","set","delete","mask","transform"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/moveElemsAttrsToGroup.js"],"sourcesContent":["'use strict';\n\nconst { visit } = require('../lib/xast.js');\nconst { inheritableAttrs, pathElems } = require('./_collections.js');\n\nexports.name = 'moveElemsAttrsToGroup';\nexports.description = 'Move common attributes of group children to the group';\n\n/**\n * Move common attributes of group children to the group\n *\n * @example\n * <g attr1=\"val1\">\n *     <g attr2=\"val2\">\n *         text\n *     </g>\n *     <circle attr2=\"val2\" attr3=\"val3\"/>\n * </g>\n *              ⬇\n * <g attr1=\"val1\" attr2=\"val2\">\n *     <g>\n *         text\n *     </g>\n *    <circle attr3=\"val3\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveElemsAttrsToGroup'>}\n */\nexports.fn = (root) => {\n  // find if any style element is present\n  let deoptimizedWithStyles = false;\n  visit(root, {\n    element: {\n      enter: (node) => {\n        if (node.name === 'style') {\n          deoptimizedWithStyles = true;\n        }\n      },\n    },\n  });\n\n  return {\n    element: {\n      exit: (node) => {\n        // process only groups with more than 1 children\n        if (node.name !== 'g' || node.children.length <= 1) {\n          return;\n        }\n\n        // deoptimize the plugin when style elements are present\n        // selectors may rely on id, classes or tag names\n        if (deoptimizedWithStyles) {\n          return;\n        }\n\n        /**\n         * find common attributes in group children\n         * @type {Map<string, string>}\n         */\n        const commonAttributes = new Map();\n        let initial = true;\n        let everyChildIsPath = true;\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            if (pathElems.includes(child.name) === false) {\n              everyChildIsPath = false;\n            }\n            if (initial) {\n              initial = false;\n              // collect all inheritable attributes from first child element\n              for (const [name, value] of Object.entries(child.attributes)) {\n                // consider only inheritable attributes\n                if (inheritableAttrs.includes(name)) {\n                  commonAttributes.set(name, value);\n                }\n              }\n            } else {\n              // exclude uncommon attributes from initial list\n              for (const [name, value] of commonAttributes) {\n                if (child.attributes[name] !== value) {\n                  commonAttributes.delete(name);\n                }\n              }\n            }\n          }\n        }\n\n        // preserve transform on children when group has clip-path or mask\n        if (\n          node.attributes['clip-path'] != null ||\n          node.attributes.mask != null\n        ) {\n          commonAttributes.delete('transform');\n        }\n\n        // preserve transform when all children are paths\n        // so the transform could be applied to path data by other plugins\n        if (everyChildIsPath) {\n          commonAttributes.delete('transform');\n        }\n\n        // add common children attributes to group\n        for (const [name, value] of commonAttributes) {\n          if (name === 'transform') {\n            if (node.attributes.transform != null) {\n              node.attributes.transform = `${node.attributes.transform} ${value}`;\n            } else {\n              node.attributes.transform = value;\n            }\n          } else {\n            node.attributes[name] = value;\n          }\n        }\n\n        // delete common attributes from children\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            for (const [name] of commonAttributes) {\n              delete child.attributes[name];\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}