{"ast":null,"code":"'use strict';\n\nvar svgParser = require('svg-parser');\nvar hastToBabelAst = require('@svgr/hast-util-to-babel-ast');\nvar core = require('@babel/core');\nvar svgrBabelPreset = require('@svgr/babel-preset');\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst getJsxRuntimeOptions = config => {\n  if (config.jsxRuntimeImport) {\n    return {\n      importSource: config.jsxRuntimeImport.source,\n      jsxRuntimeImport: config.jsxRuntimeImport\n    };\n  }\n  switch (config.jsxRuntime) {\n    case null:\n    case void 0:\n    case \"classic\":\n      return {\n        jsxRuntime: \"classic\",\n        importSource: \"react\",\n        jsxRuntimeImport: {\n          namespace: \"React\",\n          source: \"react\"\n        }\n      };\n    case \"classic-preact\":\n      return {\n        jsxRuntime: \"classic\",\n        importSource: \"preact/compat\",\n        jsxRuntimeImport: {\n          specifiers: [\"h\"],\n          source: \"preact\"\n        }\n      };\n    case \"automatic\":\n      return {\n        jsxRuntime: \"automatic\"\n      };\n    default:\n      throw new Error(`Unsupported \"jsxRuntime\" \"${config.jsxRuntime}\"`);\n  }\n};\nconst jsxPlugin = (code, config, state) => {\n  const filePath = state.filePath || \"unknown\";\n  const hastTree = svgParser.parse(code);\n  const babelTree = hastToBabelAst(hastTree);\n  const svgPresetOptions = __spreadProps(__spreadValues({\n    ref: config.ref,\n    titleProp: config.titleProp,\n    descProp: config.descProp,\n    expandProps: config.expandProps,\n    dimensions: config.dimensions,\n    icon: config.icon,\n    native: config.native,\n    svgProps: config.svgProps,\n    replaceAttrValues: config.replaceAttrValues,\n    typescript: config.typescript,\n    template: config.template,\n    memo: config.memo,\n    exportType: config.exportType,\n    namedExport: config.namedExport\n  }, getJsxRuntimeOptions(config)), {\n    state\n  });\n  const result = core.transformFromAstSync(babelTree, code, __spreadValues({\n    caller: {\n      name: \"svgr\"\n    },\n    presets: [core.createConfigItem([svgrBabelPreset, svgPresetOptions], {\n      type: \"preset\"\n    })],\n    filename: filePath,\n    babelrc: false,\n    configFile: false,\n    code: true,\n    ast: false,\n    // @ts-ignore\n    inputSourceMap: false\n  }, config.jsx && config.jsx.babelConfig));\n  if (!(result == null ? void 0 : result.code)) {\n    throw new Error(`Unable to generate SVG file`);\n  }\n  return result.code;\n};\nmodule.exports = jsxPlugin;","map":{"version":3,"names":["getJsxRuntimeOptions","config","jsxRuntimeImport","importSource","source","jsxRuntime","namespace","specifiers","Error","jsxPlugin","code","state","filePath","hastTree","svgParser","parse","babelTree","hastToBabelAst","svgPresetOptions","__spreadProps","__spreadValues","ref","titleProp","descProp","expandProps","dimensions","icon","native","svgProps","replaceAttrValues","typescript","template","memo","exportType","namedExport","result","core","transformFromAstSync","caller","name","presets","createConfigItem","svgrBabelPreset","type","filename","babelrc","configFile","ast","inputSourceMap","jsx","babelConfig"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\plugin-jsx\\src\\index.ts"],"sourcesContent":["import { parse } from 'svg-parser'\nimport hastToBabelAst from '@svgr/hast-util-to-babel-ast'\nimport { transformFromAstSync, createConfigItem } from '@babel/core'\nimport svgrBabelPreset, {\n  Options as SvgrPresetOptions,\n} from '@svgr/babel-preset'\nimport type { Plugin, Config } from '@svgr/core'\n\nconst getJsxRuntimeOptions = (config: Config): Partial<SvgrPresetOptions> => {\n  if (config.jsxRuntimeImport) {\n    return {\n      importSource: config.jsxRuntimeImport.source,\n      jsxRuntimeImport: config.jsxRuntimeImport,\n    }\n  }\n  switch (config.jsxRuntime) {\n    case null:\n    case undefined:\n    case 'classic':\n      return {\n        jsxRuntime: 'classic',\n        importSource: 'react',\n        jsxRuntimeImport: { namespace: 'React', source: 'react' },\n      }\n    case 'classic-preact':\n      return {\n        jsxRuntime: 'classic',\n        importSource: 'preact/compat',\n        jsxRuntimeImport: { specifiers: ['h'], source: 'preact' },\n      }\n    case 'automatic':\n      return { jsxRuntime: 'automatic' }\n    default:\n      throw new Error(`Unsupported \"jsxRuntime\" \"${config.jsxRuntime}\"`)\n  }\n}\n\nconst jsxPlugin: Plugin = (code, config, state) => {\n  const filePath = state.filePath || 'unknown'\n  const hastTree = parse(code)\n\n  const babelTree = hastToBabelAst(hastTree)\n\n  const svgPresetOptions: SvgrPresetOptions = {\n    ref: config.ref,\n    titleProp: config.titleProp,\n    descProp: config.descProp,\n    expandProps: config.expandProps,\n    dimensions: config.dimensions,\n    icon: config.icon,\n    native: config.native,\n    svgProps: config.svgProps,\n    replaceAttrValues: config.replaceAttrValues,\n    typescript: config.typescript,\n    template: config.template,\n    memo: config.memo,\n    exportType: config.exportType,\n    namedExport: config.namedExport,\n    ...getJsxRuntimeOptions(config),\n    state,\n  }\n\n  const result = transformFromAstSync(babelTree, code, {\n    caller: {\n      name: 'svgr',\n    },\n    presets: [\n      createConfigItem([svgrBabelPreset, svgPresetOptions], {\n        type: 'preset',\n      }),\n    ],\n    filename: filePath,\n    babelrc: false,\n    configFile: false,\n    code: true,\n    ast: false,\n    // @ts-ignore\n    inputSourceMap: false,\n    ...(config.jsx && config.jsx.babelConfig),\n  })\n\n  if (!result?.code) {\n    throw new Error(`Unable to generate SVG file`)\n  }\n\n  return result.code\n}\n\nexport default jsxPlugin\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAMA,oBAAA,GAAwBC,MAA+C;EAC3E,IAAIA,MAAA,CAAOC,gBAAkB;IACpB;MACLC,YAAA,EAAcF,MAAA,CAAOC,gBAAiB,CAAAE,MAAA;MACtCF,gBAAA,EAAkBD,MAAO,CAAAC;IAAA,CAC3B;EAAA;EAEF,QAAQD,MAAA,CAAOI,UAAY;IACzB,KAAK;IACL,KAAK;IACL,KAAK;MACI;QACLA,UAAY;QACZF,YAAc;QACdD,gBAAkB;UAAEI,SAAW;UAASF,MAAA,EAAQ;QAAQ;MAAA,CAC1D;IACF,KAAK;MACI;QACLC,UAAY;QACZF,YAAc;QACdD,gBAAA,EAAkB;UAAEK,UAAA,EAAY,CAAC,GAAG;UAAGH,MAAA,EAAQ;QAAS;MAAA,CAC1D;IACF,KAAK;MACI;QAAEC,UAAA,EAAY;MAAY;IACnC;MACE,MAAM,IAAIG,KAAA,CAAmC,6BAAAP,MAAA,CAAOI,UAAa;EAAA;AAEvE;AAEA,MAAMI,SAAoB,GAAAA,CAACC,IAAM,EAAAT,MAAA,EAAQU,KAAU;EAC3C,MAAAC,QAAA,GAAWD,KAAA,CAAMC,QAAY;EAC7B,MAAAC,QAAA,GAAWC,SAAA,CAAAC,KAAA,CAAML,IAAI;EAErB,MAAAM,SAAA,GAAYC,cAAA,CAAeJ,QAAQ;EAEzC,MAAMK,gBAAsC,GAAAC,aAAA,CAAAC,cAAA;IAC1CC,GAAA,EAAKpB,MAAO,CAAAoB,GAAA;IACZC,SAAA,EAAWrB,MAAO,CAAAqB,SAAA;IAClBC,QAAA,EAAUtB,MAAO,CAAAsB,QAAA;IACjBC,WAAA,EAAavB,MAAO,CAAAuB,WAAA;IACpBC,UAAA,EAAYxB,MAAO,CAAAwB,UAAA;IACnBC,IAAA,EAAMzB,MAAO,CAAAyB,IAAA;IACbC,MAAA,EAAQ1B,MAAO,CAAA0B,MAAA;IACfC,QAAA,EAAU3B,MAAO,CAAA2B,QAAA;IACjBC,iBAAA,EAAmB5B,MAAO,CAAA4B,iBAAA;IAC1BC,UAAA,EAAY7B,MAAO,CAAA6B,UAAA;IACnBC,QAAA,EAAU9B,MAAO,CAAA8B,QAAA;IACjBC,IAAA,EAAM/B,MAAO,CAAA+B,IAAA;IACbC,UAAA,EAAYhC,MAAO,CAAAgC,UAAA;IACnBC,WAAA,EAAajC,MAAO,CAAAiC;EAAA,CACjB,EAAAlC,oBAAA,CAAqBC,MAAM,CAfY;IAgB1CU;EAAA,CACF;EAEM,MAAAwB,MAAA,GAASC,IAAA,CAAAC,oBAAqB,CAAArB,SAAA,EAAWN,IAAM,EAAAU,cAAA;IACnDkB,MAAQ;MACNC,IAAM;IAAA,CACR;IACAC,OAAS,GACPJ,IAAA,CAAAK,gBAAiB,EAACC,eAAiB,EAAAxB,gBAAgB,CAAG;MACpDyB,IAAM;IAAA,CACP,EACH;IACAC,QAAU,EAAAhC,QAAA;IACViC,OAAS;IACTC,UAAY;IACZpC,IAAM;IACNqC,GAAK;IAAA;IAELC,cAAgB;EAAA,GACZ/C,MAAO,CAAAgD,GAAA,IAAOhD,MAAO,CAAAgD,GAAA,CAAIC,WAC9B;EAEG,MAACf,MAAA,oBAAAA,MAAA,CAAQzB,IAAM;IACX,UAAIF,KAAA,CAAmC;EAAA;EAG/C,OAAO2B,MAAO,CAAAzB,IAAA;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}