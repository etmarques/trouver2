{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPlugin;\nvar _pluginSyntaxJsx = require(\"@babel/plugin-syntax-jsx\");\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\nvar _core = require(\"@babel/core\");\nvar _helperModuleImports = require(\"@babel/helper-module-imports\");\nvar _helperAnnotateAsPure = require(\"@babel/helper-annotate-as-pure\");\nconst DEFAULT = {\n  importSource: \"react\",\n  runtime: \"automatic\",\n  pragma: \"React.createElement\",\n  pragmaFrag: \"React.Fragment\"\n};\nconst JSX_SOURCE_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxImportSource\\s+([^\\s]+)\\s*$/m;\nconst JSX_RUNTIME_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxRuntime\\s+([^\\s]+)\\s*$/m;\nconst JSX_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsx\\s+([^\\s]+)\\s*$/m;\nconst JSX_FRAG_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxFrag\\s+([^\\s]+)\\s*$/m;\nconst get = (pass, name) => pass.get(`@babel/plugin-react-jsx/${name}`);\nconst set = (pass, name, v) => pass.set(`@babel/plugin-react-jsx/${name}`, v);\nfunction hasProto(node) {\n  return node.properties.some(value => _core.types.isObjectProperty(value, {\n    computed: false,\n    shorthand: false\n  }) && (_core.types.isIdentifier(value.key, {\n    name: \"__proto__\"\n  }) || _core.types.isStringLiteral(value.key, {\n    value: \"__proto__\"\n  })));\n}\nfunction createPlugin(_ref) {\n  let {\n    name,\n    development\n  } = _ref;\n  return (0, _helperPluginUtils.declare)((_, options) => {\n    const {\n      pure: PURE_ANNOTATION,\n      throwIfNamespace = true,\n      filter,\n      runtime: RUNTIME_DEFAULT = development ? \"automatic\" : \"classic\",\n      importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource,\n      pragma: PRAGMA_DEFAULT = DEFAULT.pragma,\n      pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag\n    } = options;\n    {\n      var {\n        useSpread = false,\n        useBuiltIns = false\n      } = options;\n      if (RUNTIME_DEFAULT === \"classic\") {\n        if (typeof useSpread !== \"boolean\") {\n          throw new Error(\"transform-react-jsx currently only accepts a boolean option for \" + \"useSpread (defaults to false)\");\n        }\n        if (typeof useBuiltIns !== \"boolean\") {\n          throw new Error(\"transform-react-jsx currently only accepts a boolean option for \" + \"useBuiltIns (defaults to false)\");\n        }\n        if (useSpread && useBuiltIns) {\n          throw new Error(\"transform-react-jsx currently only accepts useBuiltIns or useSpread \" + \"but not both\");\n        }\n      }\n    }\n    const injectMetaPropertiesVisitor = {\n      JSXOpeningElement(path, state) {\n        const attributes = [];\n        if (isThisAllowed(path.scope)) {\n          attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier(\"__self\"), _core.types.jsxExpressionContainer(_core.types.thisExpression())));\n        }\n        attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier(\"__source\"), _core.types.jsxExpressionContainer(makeSource(path, state))));\n        path.pushContainer(\"attributes\", attributes);\n      }\n    };\n    return {\n      name,\n      inherits: _pluginSyntaxJsx.default,\n      visitor: {\n        JSXNamespacedName(path) {\n          if (throwIfNamespace) {\n            throw path.buildCodeFrameError(`Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`);\n          }\n        },\n        JSXSpreadChild(path) {\n          throw path.buildCodeFrameError(\"Spread children are not supported in React.\");\n        },\n        Program: {\n          enter(path, state) {\n            const {\n              file\n            } = state;\n            let runtime = RUNTIME_DEFAULT;\n            let source = IMPORT_SOURCE_DEFAULT;\n            let pragma = PRAGMA_DEFAULT;\n            let pragmaFrag = PRAGMA_FRAG_DEFAULT;\n            let sourceSet = !!options.importSource;\n            let pragmaSet = !!options.pragma;\n            let pragmaFragSet = !!options.pragmaFrag;\n            if (file.ast.comments) {\n              for (const comment of file.ast.comments) {\n                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(comment.value);\n                if (sourceMatches) {\n                  source = sourceMatches[1];\n                  sourceSet = true;\n                }\n                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(comment.value);\n                if (runtimeMatches) {\n                  runtime = runtimeMatches[1];\n                }\n                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n                if (jsxMatches) {\n                  pragma = jsxMatches[1];\n                  pragmaSet = true;\n                }\n                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);\n                if (jsxFragMatches) {\n                  pragmaFrag = jsxFragMatches[1];\n                  pragmaFragSet = true;\n                }\n              }\n            }\n            set(state, \"runtime\", runtime);\n            if (runtime === \"classic\") {\n              if (sourceSet) {\n                throw path.buildCodeFrameError(`importSource cannot be set when runtime is classic.`);\n              }\n              const createElement = toMemberExpression(pragma);\n              const fragment = toMemberExpression(pragmaFrag);\n              set(state, \"id/createElement\", () => _core.types.cloneNode(createElement));\n              set(state, \"id/fragment\", () => _core.types.cloneNode(fragment));\n              set(state, \"defaultPure\", pragma === DEFAULT.pragma);\n            } else if (runtime === \"automatic\") {\n              if (pragmaSet || pragmaFragSet) {\n                throw path.buildCodeFrameError(`pragma and pragmaFrag cannot be set when runtime is automatic.`);\n              }\n              const define = (name, id) => set(state, name, createImportLazily(state, path, id, source));\n              define(\"id/jsx\", development ? \"jsxDEV\" : \"jsx\");\n              define(\"id/jsxs\", development ? \"jsxDEV\" : \"jsxs\");\n              define(\"id/createElement\", \"createElement\");\n              define(\"id/fragment\", \"Fragment\");\n              set(state, \"defaultPure\", source === DEFAULT.importSource);\n            } else {\n              throw path.buildCodeFrameError(`Runtime must be either \"classic\" or \"automatic\".`);\n            }\n            if (development) {\n              path.traverse(injectMetaPropertiesVisitor, state);\n            }\n          }\n        },\n        JSXFragment: {\n          exit(path, file) {\n            let callExpr;\n            if (get(file, \"runtime\") === \"classic\") {\n              callExpr = buildCreateElementFragmentCall(path, file);\n            } else {\n              callExpr = buildJSXFragmentCall(path, file);\n            }\n            path.replaceWith(_core.types.inherits(callExpr, path.node));\n          }\n        },\n        JSXElement: {\n          exit(path, file) {\n            let callExpr;\n            if (get(file, \"runtime\") === \"classic\" || shouldUseCreateElement(path)) {\n              callExpr = buildCreateElementCall(path, file);\n            } else {\n              callExpr = buildJSXElementCall(path, file);\n            }\n            path.replaceWith(_core.types.inherits(callExpr, path.node));\n          }\n        },\n        JSXAttribute(path) {\n          if (_core.types.isJSXElement(path.node.value)) {\n            path.node.value = _core.types.jsxExpressionContainer(path.node.value);\n          }\n        }\n      }\n    };\n    function isDerivedClass(classPath) {\n      return classPath.node.superClass !== null;\n    }\n    function isThisAllowed(scope) {\n      do {\n        const {\n          path\n        } = scope;\n        if (path.isFunctionParent() && !path.isArrowFunctionExpression()) {\n          if (!path.isMethod()) {\n            return true;\n          }\n          if (path.node.kind !== \"constructor\") {\n            return true;\n          }\n          return !isDerivedClass(path.parentPath.parentPath);\n        }\n        if (path.isTSModuleBlock()) {\n          return false;\n        }\n      } while (scope = scope.parent);\n      return true;\n    }\n    function call(pass, name, args) {\n      const node = _core.types.callExpression(get(pass, `id/${name}`)(), args);\n      if (PURE_ANNOTATION != null ? PURE_ANNOTATION : get(pass, \"defaultPure\")) (0, _helperAnnotateAsPure.default)(node);\n      return node;\n    }\n    function shouldUseCreateElement(path) {\n      const openingPath = path.get(\"openingElement\");\n      const attributes = openingPath.node.attributes;\n      let seenPropsSpread = false;\n      for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes[i];\n        if (seenPropsSpread && _core.types.isJSXAttribute(attr) && attr.name.name === \"key\") {\n          return true;\n        } else if (_core.types.isJSXSpreadAttribute(attr)) {\n          seenPropsSpread = true;\n        }\n      }\n      return false;\n    }\n    function convertJSXIdentifier(node, parent) {\n      if (_core.types.isJSXIdentifier(node)) {\n        if (node.name === \"this\" && _core.types.isReferenced(node, parent)) {\n          return _core.types.thisExpression();\n        } else if (_core.types.isValidIdentifier(node.name, false)) {\n          node.type = \"Identifier\";\n          return node;\n        } else {\n          return _core.types.stringLiteral(node.name);\n        }\n      } else if (_core.types.isJSXMemberExpression(node)) {\n        return _core.types.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node));\n      } else if (_core.types.isJSXNamespacedName(node)) {\n        return _core.types.stringLiteral(`${node.namespace.name}:${node.name.name}`);\n      }\n      return node;\n    }\n    function convertAttributeValue(node) {\n      if (_core.types.isJSXExpressionContainer(node)) {\n        return node.expression;\n      } else {\n        return node;\n      }\n    }\n    function accumulateAttribute(array, attribute) {\n      if (_core.types.isJSXSpreadAttribute(attribute.node)) {\n        const arg = attribute.node.argument;\n        if (_core.types.isObjectExpression(arg) && !hasProto(arg)) {\n          array.push(...arg.properties);\n        } else {\n          array.push(_core.types.spreadElement(arg));\n        }\n        return array;\n      }\n      const value = convertAttributeValue(attribute.node.name.name !== \"key\" ? attribute.node.value || _core.types.booleanLiteral(true) : attribute.node.value);\n      if (attribute.node.name.name === \"key\" && value === null) {\n        throw attribute.buildCodeFrameError('Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.');\n      }\n      if (_core.types.isStringLiteral(value) && !_core.types.isJSXExpressionContainer(attribute.node.value)) {\n        var _value$extra;\n        value.value = value.value.replace(/\\n\\s+/g, \" \");\n        (_value$extra = value.extra) == null ? true : delete _value$extra.raw;\n      }\n      if (_core.types.isJSXNamespacedName(attribute.node.name)) {\n        attribute.node.name = _core.types.stringLiteral(attribute.node.name.namespace.name + \":\" + attribute.node.name.name.name);\n      } else if (_core.types.isValidIdentifier(attribute.node.name.name, false)) {\n        attribute.node.name.type = \"Identifier\";\n      } else {\n        attribute.node.name = _core.types.stringLiteral(attribute.node.name.name);\n      }\n      array.push(_core.types.inherits(_core.types.objectProperty(attribute.node.name, value), attribute.node));\n      return array;\n    }\n    function buildChildrenProperty(children) {\n      let childrenNode;\n      if (children.length === 1) {\n        childrenNode = children[0];\n      } else if (children.length > 1) {\n        childrenNode = _core.types.arrayExpression(children);\n      } else {\n        return undefined;\n      }\n      return _core.types.objectProperty(_core.types.identifier(\"children\"), childrenNode);\n    }\n    function buildJSXElementCall(path, file) {\n      const openingPath = path.get(\"openingElement\");\n      const args = [getTag(openingPath)];\n      const attribsArray = [];\n      const extracted = Object.create(null);\n      for (const attr of openingPath.get(\"attributes\")) {\n        if (attr.isJSXAttribute() && _core.types.isJSXIdentifier(attr.node.name)) {\n          const {\n            name\n          } = attr.node.name;\n          switch (name) {\n            case \"__source\":\n            case \"__self\":\n              if (extracted[name]) throw sourceSelfError(path, name);\n            case \"key\":\n              {\n                const keyValue = convertAttributeValue(attr.node.value);\n                if (keyValue === null) {\n                  throw attr.buildCodeFrameError('Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.');\n                }\n                extracted[name] = keyValue;\n                break;\n              }\n            default:\n              attribsArray.push(attr);\n          }\n        } else {\n          attribsArray.push(attr);\n        }\n      }\n      const children = _core.types.react.buildChildren(path.node);\n      let attribs;\n      if (attribsArray.length || children.length) {\n        attribs = buildJSXOpeningElementAttributes(attribsArray, children);\n      } else {\n        attribs = _core.types.objectExpression([]);\n      }\n      args.push(attribs);\n      if (development) {\n        var _extracted$key;\n        args.push((_extracted$key = extracted.key) != null ? _extracted$key : path.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));\n        if (extracted.__source) {\n          args.push(extracted.__source);\n          if (extracted.__self) args.push(extracted.__self);\n        } else if (extracted.__self) {\n          args.push(path.scope.buildUndefinedNode(), extracted.__self);\n        }\n      } else if (extracted.key !== undefined) {\n        args.push(extracted.key);\n      }\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n    function buildJSXOpeningElementAttributes(attribs, children) {\n      const props = attribs.reduce(accumulateAttribute, []);\n      if ((children == null ? void 0 : children.length) > 0) {\n        props.push(buildChildrenProperty(children));\n      }\n      return _core.types.objectExpression(props);\n    }\n    function buildJSXFragmentCall(path, file) {\n      const args = [get(file, \"id/fragment\")()];\n      const children = _core.types.react.buildChildren(path.node);\n      args.push(_core.types.objectExpression(children.length > 0 ? [buildChildrenProperty(children)] : []));\n      if (development) {\n        args.push(path.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));\n      }\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n    function buildCreateElementFragmentCall(path, file) {\n      if (filter && !filter(path.node, file)) return;\n      return call(file, \"createElement\", [get(file, \"id/fragment\")(), _core.types.nullLiteral(), ..._core.types.react.buildChildren(path.node)]);\n    }\n    function buildCreateElementCall(path, file) {\n      const openingPath = path.get(\"openingElement\");\n      return call(file, \"createElement\", [getTag(openingPath), buildCreateElementOpeningElementAttributes(file, path, openingPath.get(\"attributes\")), ..._core.types.react.buildChildren(path.node)]);\n    }\n    function getTag(openingPath) {\n      const tagExpr = convertJSXIdentifier(openingPath.node.name, openingPath.node);\n      let tagName;\n      if (_core.types.isIdentifier(tagExpr)) {\n        tagName = tagExpr.name;\n      } else if (_core.types.isStringLiteral(tagExpr)) {\n        tagName = tagExpr.value;\n      }\n      if (_core.types.react.isCompatTag(tagName)) {\n        return _core.types.stringLiteral(tagName);\n      } else {\n        return tagExpr;\n      }\n    }\n    function buildCreateElementOpeningElementAttributes(file, path, attribs) {\n      const runtime = get(file, \"runtime\");\n      {\n        if (runtime !== \"automatic\") {\n          const objs = [];\n          const props = attribs.reduce(accumulateAttribute, []);\n          if (!useSpread) {\n            let start = 0;\n            props.forEach((prop, i) => {\n              if (_core.types.isSpreadElement(prop)) {\n                if (i > start) {\n                  objs.push(_core.types.objectExpression(props.slice(start, i)));\n                }\n                objs.push(prop.argument);\n                start = i + 1;\n              }\n            });\n            if (props.length > start) {\n              objs.push(_core.types.objectExpression(props.slice(start)));\n            }\n          } else if (props.length) {\n            objs.push(_core.types.objectExpression(props));\n          }\n          if (!objs.length) {\n            return _core.types.nullLiteral();\n          }\n          if (objs.length === 1) {\n            if (!(_core.types.isSpreadElement(props[0]) && _core.types.isObjectExpression(props[0].argument))) {\n              return objs[0];\n            }\n          }\n          if (!_core.types.isObjectExpression(objs[0])) {\n            objs.unshift(_core.types.objectExpression([]));\n          }\n          const helper = useBuiltIns ? _core.types.memberExpression(_core.types.identifier(\"Object\"), _core.types.identifier(\"assign\")) : file.addHelper(\"extends\");\n          return _core.types.callExpression(helper, objs);\n        }\n      }\n      const props = [];\n      const found = Object.create(null);\n      for (const attr of attribs) {\n        const {\n          node\n        } = attr;\n        const name = _core.types.isJSXAttribute(node) && _core.types.isJSXIdentifier(node.name) && node.name.name;\n        if (runtime === \"automatic\" && (name === \"__source\" || name === \"__self\")) {\n          if (found[name]) throw sourceSelfError(path, name);\n          found[name] = true;\n        }\n        accumulateAttribute(props, attr);\n      }\n      return props.length === 1 && _core.types.isSpreadElement(props[0]) && !_core.types.isObjectExpression(props[0].argument) ? props[0].argument : props.length > 0 ? _core.types.objectExpression(props) : _core.types.nullLiteral();\n    }\n  });\n  function getSource(source, importName) {\n    switch (importName) {\n      case \"Fragment\":\n        return `${source}/${development ? \"jsx-dev-runtime\" : \"jsx-runtime\"}`;\n      case \"jsxDEV\":\n        return `${source}/jsx-dev-runtime`;\n      case \"jsx\":\n      case \"jsxs\":\n        return `${source}/jsx-runtime`;\n      case \"createElement\":\n        return source;\n    }\n  }\n  function createImportLazily(pass, path, importName, source) {\n    return () => {\n      const actualSource = getSource(source, importName);\n      if ((0, _helperModuleImports.isModule)(path)) {\n        let reference = get(pass, `imports/${importName}`);\n        if (reference) return _core.types.cloneNode(reference);\n        reference = (0, _helperModuleImports.addNamed)(path, importName, actualSource, {\n          importedInterop: \"uncompiled\",\n          importPosition: \"after\"\n        });\n        set(pass, `imports/${importName}`, reference);\n        return reference;\n      } else {\n        let reference = get(pass, `requires/${actualSource}`);\n        if (reference) {\n          reference = _core.types.cloneNode(reference);\n        } else {\n          reference = (0, _helperModuleImports.addNamespace)(path, actualSource, {\n            importedInterop: \"uncompiled\"\n          });\n          set(pass, `requires/${actualSource}`, reference);\n        }\n        return _core.types.memberExpression(reference, _core.types.identifier(importName));\n      }\n    };\n  }\n}\nfunction toMemberExpression(id) {\n  return id.split(\".\").map(name => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));\n}\nfunction makeSource(path, state) {\n  const location = path.node.loc;\n  if (!location) {\n    return path.scope.buildUndefinedNode();\n  }\n  if (!state.fileNameIdentifier) {\n    const {\n      filename = \"\"\n    } = state;\n    const fileNameIdentifier = path.scope.generateUidIdentifier(\"_jsxFileName\");\n    path.scope.getProgramParent().push({\n      id: fileNameIdentifier,\n      init: _core.types.stringLiteral(filename)\n    });\n    state.fileNameIdentifier = fileNameIdentifier;\n  }\n  return makeTrace(_core.types.cloneNode(state.fileNameIdentifier), location.start.line, location.start.column);\n}\nfunction makeTrace(fileNameIdentifier, lineNumber, column0Based) {\n  const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral();\n  const fileColumnLiteral = column0Based != null ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();\n  return _core.template.expression.ast`{\n    fileName: ${fileNameIdentifier},\n    lineNumber: ${fileLineLiteral},\n    columnNumber: ${fileColumnLiteral},\n  }`;\n}\nfunction sourceSelfError(path, name) {\n  const pluginName = `transform-react-jsx-${name.slice(2)}`;\n  return path.buildCodeFrameError(`Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);\n}","map":{"version":3,"names":["_pluginSyntaxJsx","require","_helperPluginUtils","_core","_helperModuleImports","_helperAnnotateAsPure","DEFAULT","importSource","runtime","pragma","pragmaFrag","JSX_SOURCE_ANNOTATION_REGEX","JSX_RUNTIME_ANNOTATION_REGEX","JSX_ANNOTATION_REGEX","JSX_FRAG_ANNOTATION_REGEX","get","pass","name","set","v","hasProto","node","properties","some","value","types","isObjectProperty","computed","shorthand","isIdentifier","key","isStringLiteral","createPlugin","_ref","development","declare","_","options","pure","PURE_ANNOTATION","throwIfNamespace","filter","RUNTIME_DEFAULT","IMPORT_SOURCE_DEFAULT","PRAGMA_DEFAULT","PRAGMA_FRAG_DEFAULT","useSpread","useBuiltIns","Error","injectMetaPropertiesVisitor","JSXOpeningElement","path","state","attributes","isThisAllowed","scope","push","jsxAttribute","jsxIdentifier","jsxExpressionContainer","thisExpression","makeSource","pushContainer","inherits","default","visitor","JSXNamespacedName","buildCodeFrameError","JSXSpreadChild","Program","enter","file","source","sourceSet","pragmaSet","pragmaFragSet","ast","comments","comment","sourceMatches","exec","runtimeMatches","jsxMatches","jsxFragMatches","createElement","toMemberExpression","fragment","cloneNode","define","id","createImportLazily","traverse","JSXFragment","exit","callExpr","buildCreateElementFragmentCall","buildJSXFragmentCall","replaceWith","JSXElement","shouldUseCreateElement","buildCreateElementCall","buildJSXElementCall","JSXAttribute","isJSXElement","isDerivedClass","classPath","superClass","isFunctionParent","isArrowFunctionExpression","isMethod","kind","parentPath","isTSModuleBlock","parent","call","args","callExpression","openingPath","seenPropsSpread","i","length","attr","isJSXAttribute","isJSXSpreadAttribute","convertJSXIdentifier","isJSXIdentifier","isReferenced","isValidIdentifier","type","stringLiteral","isJSXMemberExpression","memberExpression","object","property","isJSXNamespacedName","namespace","convertAttributeValue","isJSXExpressionContainer","expression","accumulateAttribute","array","attribute","arg","argument","isObjectExpression","spreadElement","booleanLiteral","_value$extra","replace","extra","raw","objectProperty","buildChildrenProperty","children","childrenNode","arrayExpression","undefined","identifier","getTag","attribsArray","extracted","Object","create","sourceSelfError","keyValue","react","buildChildren","attribs","buildJSXOpeningElementAttributes","objectExpression","_extracted$key","buildUndefinedNode","__source","__self","props","reduce","nullLiteral","buildCreateElementOpeningElementAttributes","tagExpr","tagName","isCompatTag","objs","start","forEach","prop","isSpreadElement","slice","unshift","helper","addHelper","found","getSource","importName","actualSource","isModule","reference","addNamed","importedInterop","importPosition","addNamespace","split","map","location","loc","fileNameIdentifier","filename","generateUidIdentifier","getProgramParent","init","makeTrace","line","column","lineNumber","column0Based","fileLineLiteral","numericLiteral","fileColumnLiteral","template","pluginName"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@babel\\plugin-transform-react-jsx\\src\\create-plugin.ts"],"sourcesContent":["import jsx from \"@babel/plugin-syntax-jsx\";\nimport { declare } from \"@babel/helper-plugin-utils\";\nimport { template, types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\nimport { addNamed, addNamespace, isModule } from \"@babel/helper-module-imports\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport type {\n  CallExpression,\n  Class,\n  Expression,\n  Identifier,\n  JSXAttribute,\n  JSXElement,\n  JSXFragment,\n  JSXOpeningElement,\n  JSXSpreadAttribute,\n  MemberExpression,\n  ObjectExpression,\n  Program,\n} from \"@babel/types\";\n\nconst DEFAULT = {\n  importSource: \"react\",\n  runtime: \"automatic\",\n  pragma: \"React.createElement\",\n  pragmaFrag: \"React.Fragment\",\n};\n\nconst JSX_SOURCE_ANNOTATION_REGEX =\n  /^\\s*\\*?\\s*@jsxImportSource\\s+([^\\s]+)\\s*$/m;\nconst JSX_RUNTIME_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxRuntime\\s+([^\\s]+)\\s*$/m;\n\nconst JSX_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsx\\s+([^\\s]+)\\s*$/m;\nconst JSX_FRAG_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxFrag\\s+([^\\s]+)\\s*$/m;\n\nconst get = (pass: PluginPass, name: string) =>\n  pass.get(`@babel/plugin-react-jsx/${name}`);\nconst set = (pass: PluginPass, name: string, v: any) =>\n  pass.set(`@babel/plugin-react-jsx/${name}`, v);\n\nfunction hasProto(node: t.ObjectExpression) {\n  return node.properties.some(\n    value =>\n      t.isObjectProperty(value, { computed: false, shorthand: false }) &&\n      (t.isIdentifier(value.key, { name: \"__proto__\" }) ||\n        t.isStringLiteral(value.key, { value: \"__proto__\" })),\n  );\n}\n\nexport interface Options {\n  filter?: (node: t.Node, pass: PluginPass) => boolean;\n  importSource?: string;\n  pragma?: string;\n  pragmaFrag?: string;\n  pure?: string;\n  runtime?: \"automatic\" | \"classic\";\n  throwIfNamespace?: boolean;\n  useBuiltIns: boolean;\n  useSpread?: boolean;\n}\nexport default function createPlugin({\n  name,\n  development,\n}: {\n  name: string;\n  development: boolean;\n}) {\n  return declare((_, options: Options) => {\n    const {\n      pure: PURE_ANNOTATION,\n\n      throwIfNamespace = true,\n\n      filter,\n\n      runtime: RUNTIME_DEFAULT = process.env.BABEL_8_BREAKING\n        ? \"automatic\"\n        : development\n        ? \"automatic\"\n        : \"classic\",\n\n      importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource,\n      pragma: PRAGMA_DEFAULT = DEFAULT.pragma,\n      pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag,\n    } = options;\n\n    if (process.env.BABEL_8_BREAKING) {\n      if (\"useSpread\" in options) {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: Since Babel 8, an inline object with spread elements is always used, and the \"useSpread\" option is no longer available. Please remove it from your config.',\n        );\n      }\n\n      if (\"useBuiltIns\" in options) {\n        const useBuiltInsFormatted = JSON.stringify(options.useBuiltIns);\n        throw new Error(\n          `@babel/plugin-transform-react-jsx: Since \"useBuiltIns\" is removed in Babel 8, you can remove it from the config.\n- Babel 8 now transforms JSX spread to object spread. If you need to transpile object spread with\n\\`useBuiltIns: ${useBuiltInsFormatted}\\`, you can use the following config\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-react-jsx\"\n    [\"@babel/plugin-transform-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": ${useBuiltInsFormatted} }]\n  ]\n}`,\n        );\n      }\n\n      if (filter != null && RUNTIME_DEFAULT === \"automatic\") {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: \"filter\" option can not be used with automatic runtime. If you are upgrading from Babel 7, please specify `runtime: \"classic\"`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-var\n      var { useSpread = false, useBuiltIns = false } = options;\n\n      if (RUNTIME_DEFAULT === \"classic\") {\n        if (typeof useSpread !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useSpread (defaults to false)\",\n          );\n        }\n\n        if (typeof useBuiltIns !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useBuiltIns (defaults to false)\",\n          );\n        }\n\n        if (useSpread && useBuiltIns) {\n          throw new Error(\n            \"transform-react-jsx currently only accepts useBuiltIns or useSpread \" +\n              \"but not both\",\n          );\n        }\n      }\n    }\n\n    const injectMetaPropertiesVisitor: Visitor<PluginPass> = {\n      JSXOpeningElement(path, state) {\n        const attributes = [];\n        if (isThisAllowed(path.scope)) {\n          attributes.push(\n            t.jsxAttribute(\n              t.jsxIdentifier(\"__self\"),\n              t.jsxExpressionContainer(t.thisExpression()),\n            ),\n          );\n        }\n        attributes.push(\n          t.jsxAttribute(\n            t.jsxIdentifier(\"__source\"),\n            t.jsxExpressionContainer(makeSource(path, state)),\n          ),\n        );\n        path.pushContainer(\"attributes\", attributes);\n      },\n    };\n\n    return {\n      name,\n      inherits: jsx,\n      visitor: {\n        JSXNamespacedName(path) {\n          if (throwIfNamespace) {\n            throw path.buildCodeFrameError(\n              `Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`,\n            );\n          }\n        },\n\n        JSXSpreadChild(path) {\n          throw path.buildCodeFrameError(\n            \"Spread children are not supported in React.\",\n          );\n        },\n\n        Program: {\n          enter(path, state) {\n            const { file } = state;\n            let runtime: string = RUNTIME_DEFAULT;\n\n            let source: string = IMPORT_SOURCE_DEFAULT;\n            let pragma: string = PRAGMA_DEFAULT;\n            let pragmaFrag: string = PRAGMA_FRAG_DEFAULT;\n\n            let sourceSet = !!options.importSource;\n            let pragmaSet = !!options.pragma;\n            let pragmaFragSet = !!options.pragmaFrag;\n\n            if (file.ast.comments) {\n              for (const comment of file.ast.comments) {\n                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (sourceMatches) {\n                  source = sourceMatches[1];\n                  sourceSet = true;\n                }\n\n                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (runtimeMatches) {\n                  runtime = runtimeMatches[1];\n                }\n\n                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n                if (jsxMatches) {\n                  pragma = jsxMatches[1];\n                  pragmaSet = true;\n                }\n                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (jsxFragMatches) {\n                  pragmaFrag = jsxFragMatches[1];\n                  pragmaFragSet = true;\n                }\n              }\n            }\n\n            set(state, \"runtime\", runtime);\n            if (runtime === \"classic\") {\n              if (sourceSet) {\n                throw path.buildCodeFrameError(\n                  `importSource cannot be set when runtime is classic.`,\n                );\n              }\n\n              const createElement = toMemberExpression(pragma);\n              const fragment = toMemberExpression(pragmaFrag);\n\n              set(state, \"id/createElement\", () => t.cloneNode(createElement));\n              set(state, \"id/fragment\", () => t.cloneNode(fragment));\n\n              set(state, \"defaultPure\", pragma === DEFAULT.pragma);\n            } else if (runtime === \"automatic\") {\n              if (pragmaSet || pragmaFragSet) {\n                throw path.buildCodeFrameError(\n                  `pragma and pragmaFrag cannot be set when runtime is automatic.`,\n                );\n              }\n\n              const define = (name: string, id: string) =>\n                set(state, name, createImportLazily(state, path, id, source));\n\n              define(\"id/jsx\", development ? \"jsxDEV\" : \"jsx\");\n              define(\"id/jsxs\", development ? \"jsxDEV\" : \"jsxs\");\n              define(\"id/createElement\", \"createElement\");\n              define(\"id/fragment\", \"Fragment\");\n\n              set(state, \"defaultPure\", source === DEFAULT.importSource);\n            } else {\n              throw path.buildCodeFrameError(\n                `Runtime must be either \"classic\" or \"automatic\".`,\n              );\n            }\n\n            if (development) {\n              path.traverse(injectMetaPropertiesVisitor, state);\n            }\n          },\n\n          // TODO(Babel 8): Decide if this should be removed or brought back.\n          // see: https://github.com/babel/babel/pull/12253#discussion_r513086528\n          //\n          // exit(path, state) {\n          //   if (\n          //     get(state, \"runtime\") === \"classic\" &&\n          //     get(state, \"pragmaSet\") &&\n          //     get(state, \"usedFragment\") &&\n          //     !get(state, \"pragmaFragSet\")\n          //   ) {\n          //     throw new Error(\n          //       \"transform-react-jsx: pragma has been set but \" +\n          //         \"pragmaFrag has not been set\",\n          //     );\n          //   }\n          // },\n        },\n\n        JSXFragment: {\n          exit(path, file) {\n            let callExpr;\n            if (get(file, \"runtime\") === \"classic\") {\n              callExpr = buildCreateElementFragmentCall(path, file);\n            } else {\n              callExpr = buildJSXFragmentCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXElement: {\n          exit(path, file) {\n            let callExpr;\n            if (\n              get(file, \"runtime\") === \"classic\" ||\n              shouldUseCreateElement(path)\n            ) {\n              callExpr = buildCreateElementCall(path, file);\n            } else {\n              callExpr = buildJSXElementCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXAttribute(path) {\n          if (t.isJSXElement(path.node.value)) {\n            path.node.value = t.jsxExpressionContainer(path.node.value);\n          }\n        },\n      },\n    };\n\n    // Returns whether the class has specified a superclass.\n    function isDerivedClass(classPath: NodePath<Class>) {\n      return classPath.node.superClass !== null;\n    }\n\n    // Returns whether `this` is allowed at given scope.\n    function isThisAllowed(scope: Scope) {\n      // This specifically skips arrow functions as they do not rewrite `this`.\n      do {\n        const { path } = scope;\n        if (path.isFunctionParent() && !path.isArrowFunctionExpression()) {\n          if (!path.isMethod()) {\n            // If the closest parent is a regular function, `this` will be rebound, therefore it is fine to use `this`.\n            return true;\n          }\n          // Current node is within a method, so we need to check if the method is a constructor.\n          if (path.node.kind !== \"constructor\") {\n            // We are not in a constructor, therefore it is always fine to use `this`.\n            return true;\n          }\n          // Now we are in a constructor. If it is a derived class, we do not reference `this`.\n          return !isDerivedClass(path.parentPath.parentPath as NodePath<Class>);\n        }\n        if (path.isTSModuleBlock()) {\n          // If the closest parent is a TS Module block, `this` will not be allowed.\n          return false;\n        }\n      } while ((scope = scope.parent));\n      // We are not in a method or function. It is fine to use `this`.\n      return true;\n    }\n\n    function call(\n      pass: PluginPass,\n      name: string,\n      args: CallExpression[\"arguments\"],\n    ) {\n      const node = t.callExpression(get(pass, `id/${name}`)(), args);\n      if (PURE_ANNOTATION ?? get(pass, \"defaultPure\")) annotateAsPure(node);\n      return node;\n    }\n\n    // We want to use React.createElement, even in the case of\n    // jsx, for <div {...props} key={key} /> to distinguish it\n    // from <div key={key} {...props} />. This is an intermediary\n    // step while we deprecate key spread from props. Afterwards,\n    // we will stop using createElement in the transform.\n    function shouldUseCreateElement(path: NodePath<JSXElement>) {\n      const openingPath = path.get(\"openingElement\");\n      const attributes = openingPath.node.attributes;\n\n      let seenPropsSpread = false;\n      for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes[i];\n        if (\n          seenPropsSpread &&\n          t.isJSXAttribute(attr) &&\n          attr.name.name === \"key\"\n        ) {\n          return true;\n        } else if (t.isJSXSpreadAttribute(attr)) {\n          seenPropsSpread = true;\n        }\n      }\n      return false;\n    }\n\n    function convertJSXIdentifier(\n      node: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n      parent: t.JSXOpeningElement | t.JSXMemberExpression,\n    ): t.ThisExpression | t.StringLiteral | t.MemberExpression | t.Identifier {\n      if (t.isJSXIdentifier(node)) {\n        if (node.name === \"this\" && t.isReferenced(node, parent)) {\n          return t.thisExpression();\n        } else if (t.isValidIdentifier(node.name, false)) {\n          // @ts-expect-error cast AST type to Identifier\n          node.type = \"Identifier\";\n          return node as unknown as t.Identifier;\n        } else {\n          return t.stringLiteral(node.name);\n        }\n      } else if (t.isJSXMemberExpression(node)) {\n        return t.memberExpression(\n          convertJSXIdentifier(node.object, node),\n          convertJSXIdentifier(node.property, node),\n        );\n      } else if (t.isJSXNamespacedName(node)) {\n        /**\n         * If the flag \"throwIfNamespace\" is false\n         * print XMLNamespace like string literal\n         */\n        return t.stringLiteral(`${node.namespace.name}:${node.name.name}`);\n      }\n\n      // todo: this branch should be unreachable\n      return node;\n    }\n\n    function convertAttributeValue(\n      node: t.JSXAttribute[\"value\"] | t.BooleanLiteral,\n    ) {\n      if (t.isJSXExpressionContainer(node)) {\n        return node.expression;\n      } else {\n        return node;\n      }\n    }\n\n    function accumulateAttribute(\n      array: ObjectExpression[\"properties\"],\n      attribute: NodePath<JSXAttribute | JSXSpreadAttribute>,\n    ) {\n      if (t.isJSXSpreadAttribute(attribute.node)) {\n        const arg = attribute.node.argument;\n        // Collect properties into props array if spreading object expression\n        if (t.isObjectExpression(arg) && !hasProto(arg)) {\n          array.push(...arg.properties);\n        } else {\n          array.push(t.spreadElement(arg));\n        }\n        return array;\n      }\n\n      const value = convertAttributeValue(\n        attribute.node.name.name !== \"key\"\n          ? attribute.node.value || t.booleanLiteral(true)\n          : attribute.node.value,\n      );\n\n      if (attribute.node.name.name === \"key\" && value === null) {\n        throw attribute.buildCodeFrameError(\n          'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n        );\n      }\n\n      if (\n        t.isStringLiteral(value) &&\n        !t.isJSXExpressionContainer(attribute.node.value)\n      ) {\n        value.value = value.value.replace(/\\n\\s+/g, \" \");\n\n        // \"raw\" JSXText should not be used from a StringLiteral because it needs to be escaped.\n        delete value.extra?.raw;\n      }\n\n      if (t.isJSXNamespacedName(attribute.node.name)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(\n          attribute.node.name.namespace.name +\n            \":\" +\n            attribute.node.name.name.name,\n        );\n      } else if (t.isValidIdentifier(attribute.node.name.name, false)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name.type = \"Identifier\";\n      } else {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(attribute.node.name.name);\n      }\n\n      array.push(\n        t.inherits(\n          t.objectProperty(\n            // @ts-expect-error The attribute.node.name is an Identifier now\n            attribute.node.name,\n            value,\n          ),\n          attribute.node,\n        ),\n      );\n      return array;\n    }\n\n    function buildChildrenProperty(children: Expression[]) {\n      let childrenNode;\n      if (children.length === 1) {\n        childrenNode = children[0];\n      } else if (children.length > 1) {\n        childrenNode = t.arrayExpression(children);\n      } else {\n        return undefined;\n      }\n\n      return t.objectProperty(t.identifier(\"children\"), childrenNode);\n    }\n\n    // Builds JSX into:\n    // Production: React.jsx(type, arguments, key)\n    // Development: React.jsxDEV(type, arguments, key, isStaticChildren, source, self)\n    function buildJSXElementCall(path: NodePath<JSXElement>, file: PluginPass) {\n      const openingPath = path.get(\"openingElement\");\n      const args: t.Expression[] = [getTag(openingPath)];\n\n      const attribsArray = [];\n      const extracted = Object.create(null);\n\n      // for React.jsx, key, __source (dev), and __self (dev) is passed in as\n      // a separate argument rather than in the args object. We go through the\n      // props and filter out these three keywords so we can pass them in\n      // as separate arguments later\n      for (const attr of openingPath.get(\"attributes\")) {\n        if (attr.isJSXAttribute() && t.isJSXIdentifier(attr.node.name)) {\n          const { name } = attr.node.name;\n          switch (name) {\n            case \"__source\":\n            case \"__self\":\n              if (extracted[name]) throw sourceSelfError(path, name);\n            /* falls through */\n            case \"key\": {\n              const keyValue = convertAttributeValue(attr.node.value);\n              if (keyValue === null) {\n                throw attr.buildCodeFrameError(\n                  'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n                );\n              }\n\n              extracted[name] = keyValue;\n              break;\n            }\n            default:\n              attribsArray.push(attr);\n          }\n        } else {\n          attribsArray.push(attr);\n        }\n      }\n\n      const children = t.react.buildChildren(path.node);\n\n      let attribs: t.ObjectExpression;\n\n      if (attribsArray.length || children.length) {\n        attribs = buildJSXOpeningElementAttributes(\n          attribsArray,\n          //@ts-expect-error The children here contains JSXSpreadChild,\n          // which will be thrown later\n          children,\n        );\n      } else {\n        // attributes should never be null\n        attribs = t.objectExpression([]);\n      }\n\n      args.push(attribs);\n\n      if (development) {\n        // isStaticChildren, __source, and __self are only used in development\n        // automatically include __source and __self in this plugin\n        // so we can eliminate the need for separate Babel plugins in Babel 8\n        args.push(\n          extracted.key ?? path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n        if (extracted.__source) {\n          args.push(extracted.__source);\n          if (extracted.__self) args.push(extracted.__self);\n        } else if (extracted.__self) {\n          args.push(path.scope.buildUndefinedNode(), extracted.__self);\n        }\n      } else if (extracted.key !== undefined) {\n        args.push(extracted.key);\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds props for React.jsx. This function adds children into the props\n    // and ensures that props is always an object\n    function buildJSXOpeningElementAttributes(\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n      children: Expression[],\n    ) {\n      const props = attribs.reduce(accumulateAttribute, []);\n\n      // In React.jsx, children is no longer a separate argument, but passed in\n      // through the argument object\n      if (children?.length > 0) {\n        props.push(buildChildrenProperty(children));\n      }\n\n      return t.objectExpression(props);\n    }\n\n    // Builds JSX Fragment <></> into\n    // Production: React.jsx(type, arguments)\n    // Development: React.jsxDEV(type, { children })\n    function buildJSXFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      const args = [get(file, \"id/fragment\")()];\n\n      const children = t.react.buildChildren(path.node);\n\n      args.push(\n        t.objectExpression(\n          children.length > 0\n            ? [\n                buildChildrenProperty(\n                  //@ts-expect-error The children here contains JSXSpreadChild,\n                  // which will be thrown later\n                  children,\n                ),\n              ]\n            : [],\n        ),\n      );\n\n      if (development) {\n        args.push(\n          path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds JSX Fragment <></> into\n    // React.createElement(React.Fragment, null, ...children)\n    function buildCreateElementFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      if (filter && !filter(path.node, file)) return;\n\n      return call(file, \"createElement\", [\n        get(file, \"id/fragment\")(),\n        t.nullLiteral(),\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    // Builds JSX into:\n    // Production: React.createElement(type, arguments, children)\n    // Development: React.createElement(type, arguments, children, source, self)\n    function buildCreateElementCall(\n      path: NodePath<JSXElement>,\n      file: PluginPass,\n    ) {\n      const openingPath = path.get(\"openingElement\");\n\n      return call(file, \"createElement\", [\n        getTag(openingPath),\n        buildCreateElementOpeningElementAttributes(\n          file,\n          path,\n          openingPath.get(\"attributes\"),\n        ),\n        // @ts-expect-error JSXSpreadChild has been transformed in convertAttributeValue\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    function getTag(openingPath: NodePath<JSXOpeningElement>) {\n      const tagExpr = convertJSXIdentifier(\n        openingPath.node.name,\n        openingPath.node,\n      );\n\n      let tagName: string;\n      if (t.isIdentifier(tagExpr)) {\n        tagName = tagExpr.name;\n      } else if (t.isStringLiteral(tagExpr)) {\n        tagName = tagExpr.value;\n      }\n\n      if (t.react.isCompatTag(tagName)) {\n        return t.stringLiteral(tagName);\n      } else {\n        return tagExpr;\n      }\n    }\n\n    /**\n     * The logic for this is quite terse. It's because we need to\n     * support spread elements. We loop over all attributes,\n     * breaking on spreads, we then push a new object containing\n     * all prior attributes to an array for later processing.\n     */\n    function buildCreateElementOpeningElementAttributes(\n      file: PluginPass,\n      path: NodePath<JSXElement>,\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n    ) {\n      const runtime = get(file, \"runtime\");\n      if (!process.env.BABEL_8_BREAKING) {\n        if (runtime !== \"automatic\") {\n          const objs = [];\n          const props = attribs.reduce(accumulateAttribute, []);\n\n          if (!useSpread) {\n            // Convert syntax to use multiple objects instead of spread\n            let start = 0;\n            props.forEach((prop, i) => {\n              if (t.isSpreadElement(prop)) {\n                if (i > start) {\n                  objs.push(t.objectExpression(props.slice(start, i)));\n                }\n                objs.push(prop.argument);\n                start = i + 1;\n              }\n            });\n            if (props.length > start) {\n              objs.push(t.objectExpression(props.slice(start)));\n            }\n          } else if (props.length) {\n            objs.push(t.objectExpression(props));\n          }\n\n          if (!objs.length) {\n            return t.nullLiteral();\n          }\n\n          if (objs.length === 1) {\n            if (\n              !(\n                t.isSpreadElement(props[0]) &&\n                // If an object expression is spread element's argument\n                // it is very likely to contain __proto__ and we should stop\n                // optimizing spread element\n                t.isObjectExpression(props[0].argument)\n              )\n            ) {\n              return objs[0];\n            }\n          }\n\n          // looks like we have multiple objects\n          if (!t.isObjectExpression(objs[0])) {\n            objs.unshift(t.objectExpression([]));\n          }\n\n          const helper = useBuiltIns\n            ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n            : file.addHelper(\"extends\");\n\n          // spread it\n          return t.callExpression(helper, objs);\n        }\n      }\n\n      const props: ObjectExpression[\"properties\"] = [];\n      const found = Object.create(null);\n\n      for (const attr of attribs) {\n        const { node } = attr;\n        const name =\n          t.isJSXAttribute(node) &&\n          t.isJSXIdentifier(node.name) &&\n          node.name.name;\n\n        if (\n          runtime === \"automatic\" &&\n          (name === \"__source\" || name === \"__self\")\n        ) {\n          if (found[name]) throw sourceSelfError(path, name);\n          found[name] = true;\n        }\n\n        accumulateAttribute(props, attr);\n      }\n\n      return props.length === 1 &&\n        t.isSpreadElement(props[0]) &&\n        // If an object expression is spread element's argument\n        // it is very likely to contain __proto__ and we should stop\n        // optimizing spread element\n        !t.isObjectExpression(props[0].argument)\n        ? props[0].argument\n        : props.length > 0\n        ? t.objectExpression(props)\n        : t.nullLiteral();\n    }\n  });\n\n  function getSource(source: string, importName: string) {\n    switch (importName) {\n      case \"Fragment\":\n        return `${source}/${development ? \"jsx-dev-runtime\" : \"jsx-runtime\"}`;\n      case \"jsxDEV\":\n        return `${source}/jsx-dev-runtime`;\n      case \"jsx\":\n      case \"jsxs\":\n        return `${source}/jsx-runtime`;\n      case \"createElement\":\n        return source;\n    }\n  }\n\n  function createImportLazily(\n    pass: PluginPass,\n    path: NodePath<Program>,\n    importName: string,\n    source: string,\n  ): () => Identifier | MemberExpression {\n    return () => {\n      const actualSource = getSource(source, importName);\n      if (isModule(path)) {\n        let reference = get(pass, `imports/${importName}`);\n        if (reference) return t.cloneNode(reference);\n\n        reference = addNamed(path, importName, actualSource, {\n          importedInterop: \"uncompiled\",\n          importPosition: \"after\",\n        });\n        set(pass, `imports/${importName}`, reference);\n\n        return reference;\n      } else {\n        let reference = get(pass, `requires/${actualSource}`);\n        if (reference) {\n          reference = t.cloneNode(reference);\n        } else {\n          reference = addNamespace(path, actualSource, {\n            importedInterop: \"uncompiled\",\n          });\n          set(pass, `requires/${actualSource}`, reference);\n        }\n\n        return t.memberExpression(reference, t.identifier(importName));\n      }\n    };\n  }\n}\n\nfunction toMemberExpression(id: string): Identifier | MemberExpression {\n  return (\n    id\n      .split(\".\")\n      .map(name => t.identifier(name))\n      // @ts-expect-error - The Array#reduce does not have a signature\n      // where the type of initial value differs from callback return type\n      .reduce((object, property) => t.memberExpression(object, property))\n  );\n}\n\nfunction makeSource(path: NodePath, state: PluginPass) {\n  const location = path.node.loc;\n  if (!location) {\n    // the element was generated and doesn't have location information\n    return path.scope.buildUndefinedNode();\n  }\n\n  // @ts-expect-error todo: avoid mutating PluginPass\n  if (!state.fileNameIdentifier) {\n    const { filename = \"\" } = state;\n\n    const fileNameIdentifier = path.scope.generateUidIdentifier(\"_jsxFileName\");\n    path.scope.getProgramParent().push({\n      id: fileNameIdentifier,\n      init: t.stringLiteral(filename),\n    });\n    // @ts-expect-error todo: avoid mutating PluginPass\n    state.fileNameIdentifier = fileNameIdentifier;\n  }\n\n  return makeTrace(\n    t.cloneNode(\n      // @ts-expect-error todo: avoid mutating PluginPass\n      state.fileNameIdentifier,\n    ),\n    location.start.line,\n    location.start.column,\n  );\n}\n\nfunction makeTrace(\n  fileNameIdentifier: Identifier,\n  lineNumber?: number,\n  column0Based?: number,\n) {\n  const fileLineLiteral =\n    lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();\n\n  const fileColumnLiteral =\n    column0Based != null ? t.numericLiteral(column0Based + 1) : t.nullLiteral();\n\n  return template.expression.ast`{\n    fileName: ${fileNameIdentifier},\n    lineNumber: ${fileLineLiteral},\n    columnNumber: ${fileColumnLiteral},\n  }`;\n}\n\nfunction sourceSelfError(path: NodePath, name: string) {\n  const pluginName = `transform-react-jsx-${name.slice(2)}`;\n\n  return path.buildCodeFrameError(\n    `Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`,\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}