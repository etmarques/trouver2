{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar transformReactJSX = require('@babel/plugin-transform-react-jsx');\nvar transformReactJSXDevelopment = require('@babel/plugin-transform-react-jsx-development');\nvar transformReactDisplayName = require('@babel/plugin-transform-react-display-name');\nvar transformReactPure = require('@babel/plugin-transform-react-pure-annotations');\nvar helperValidatorOption = require('@babel/helper-validator-option');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar transformReactJSX__default = /*#__PURE__*/_interopDefaultLegacy(transformReactJSX);\nvar transformReactJSXDevelopment__default = /*#__PURE__*/_interopDefaultLegacy(transformReactJSXDevelopment);\nvar transformReactDisplayName__default = /*#__PURE__*/_interopDefaultLegacy(transformReactDisplayName);\nvar transformReactPure__default = /*#__PURE__*/_interopDefaultLegacy(transformReactPure);\nnew helperValidatorOption.OptionValidator(\"@babel/preset-react\");\nfunction normalizeOptions() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  {\n    let {\n      pragma,\n      pragmaFrag\n    } = options;\n    const {\n      pure,\n      throwIfNamespace = true,\n      runtime = \"classic\",\n      importSource,\n      useBuiltIns,\n      useSpread\n    } = options;\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    }\n    const development = !!options.development;\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n      useBuiltIns,\n      useSpread\n    };\n  }\n}\nvar index = helperPluginUtils.declarePreset((api, opts) => {\n  api.assertVersion(7);\n  const {\n    development,\n    importSource,\n    pragma,\n    pragmaFrag,\n    pure,\n    runtime,\n    throwIfNamespace\n  } = normalizeOptions(opts);\n  return {\n    plugins: [[development ? transformReactJSXDevelopment__default[\"default\"] : transformReactJSX__default[\"default\"], {\n      importSource,\n      pragma,\n      pragmaFrag,\n      runtime,\n      throwIfNamespace,\n      pure,\n      useBuiltIns: !!opts.useBuiltIns,\n      useSpread: opts.useSpread\n    }], transformReactDisplayName__default[\"default\"], pure !== false && transformReactPure__default[\"default\"]].filter(Boolean)\n  };\n});\nexports[\"default\"] = index;","map":{"version":3,"names":["helperValidatorOption","OptionValidator","normalizeOptions","options","arguments","length","undefined","pragma","pragmaFrag","pure","throwIfNamespace","runtime","importSource","useBuiltIns","useSpread","development","index","helperPluginUtils","declarePreset","api","opts","assertVersion","plugins","transformReactJSXDevelopment__default","transformReactJSX__default","transformReactDisplayName__default","transformReactPure__default","filter","Boolean"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@babel\\preset-react\\src\\normalize-options.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@babel\\preset-react\\src\\index.ts"],"sourcesContent":["import {\n  OptionValidator,\n  findSuggestion,\n} from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-react\");\n\nexport default function normalizeOptions(options: any = {}) {\n  if (process.env.BABEL_8_BREAKING) {\n    if (\"useSpread\" in options) {\n      throw new Error(\n        '@babel/preset-react: Since Babel 8, an inline object with spread elements is always used, and the \"useSpread\" option is no longer available. Please remove it from your config.',\n      );\n    }\n\n    if (\"useBuiltIns\" in options) {\n      const useBuiltInsFormatted = JSON.stringify(options.useBuiltIns);\n      throw new Error(\n        `@babel/preset-react: Since \"useBuiltIns\" is removed in Babel 8, you can remove it from the config.\n- Babel 8 now transforms JSX spread to object spread. If you need to transpile object spread with\n\\`useBuiltIns: ${useBuiltInsFormatted}\\`, you can use the following config\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": ${useBuiltInsFormatted} }]\n  ],\n  \"presets\": [\"@babel/preset-react\"]\n}`,\n      );\n    }\n\n    const TopLevelOptions = {\n      development: \"development\",\n      importSource: \"importSource\",\n      pragma: \"pragma\",\n      pragmaFrag: \"pragmaFrag\",\n      pure: \"pure\",\n      runtime: \"runtime\",\n      throwIfNamespace: \"throwIfNamespace\",\n    };\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    const development = v.validateBooleanOption(\n      TopLevelOptions.development,\n      options.development,\n      false,\n    );\n    let importSource = v.validateStringOption(\n      TopLevelOptions.importSource,\n      options.importSource,\n    );\n    let pragma = v.validateStringOption(TopLevelOptions.pragma, options.pragma);\n    let pragmaFrag = v.validateStringOption(\n      TopLevelOptions.pragmaFrag,\n      options.pragmaFrag,\n    );\n    const pure = v.validateBooleanOption(TopLevelOptions.pure, options.pure);\n    const runtime = v.validateStringOption(\n      TopLevelOptions.runtime,\n      options.runtime,\n      \"automatic\",\n    );\n    const throwIfNamespace = v.validateBooleanOption(\n      TopLevelOptions.throwIfNamespace,\n      options.throwIfNamespace,\n      true,\n    );\n\n    const validRuntime = [\"classic\", \"automatic\"];\n\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    } else if (runtime === \"automatic\") {\n      importSource = importSource || \"react\";\n    } else {\n      throw new Error(\n        `@babel/preset-react: 'runtime' must be one of ['automatic', 'classic'] but we have '${runtime}'\\n` +\n          `- Did you mean '${findSuggestion(runtime, validRuntime)}'?`,\n      );\n    }\n\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n    };\n  } else {\n    let { pragma, pragmaFrag } = options;\n\n    const {\n      pure,\n      throwIfNamespace = true,\n      runtime = \"classic\",\n      importSource,\n      useBuiltIns,\n      useSpread,\n    } = options;\n\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    }\n\n    const development = !!options.development;\n\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n      useBuiltIns,\n      useSpread,\n    };\n  }\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformReactJSX from \"@babel/plugin-transform-react-jsx\";\nimport transformReactJSXDevelopment from \"@babel/plugin-transform-react-jsx-development\";\nimport transformReactDisplayName from \"@babel/plugin-transform-react-display-name\";\nimport transformReactPure from \"@babel/plugin-transform-react-pure-annotations\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport interface Options {\n  development?: boolean;\n  importSource?: string;\n  pragma?: string;\n  pragmaFrag?: string;\n  pure?: string;\n  runtime?: \"automatic\" | \"classic\";\n  throwIfNamespace?: boolean;\n  useBuiltIns?: boolean;\n  useSpread?: boolean;\n}\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    development,\n    importSource,\n    pragma,\n    pragmaFrag,\n    pure,\n    runtime,\n    throwIfNamespace,\n  } = normalizeOptions(opts);\n\n  return {\n    plugins: [\n      [\n        development ? transformReactJSXDevelopment : transformReactJSX,\n        process.env.BABEL_8_BREAKING\n          ? {\n              importSource,\n              pragma,\n              pragmaFrag,\n              runtime,\n              throwIfNamespace,\n              pure,\n            }\n          : {\n              importSource,\n              pragma,\n              pragmaFrag,\n              runtime,\n              throwIfNamespace,\n              pure,\n              useBuiltIns: !!opts.useBuiltIns,\n              useSpread: opts.useSpread,\n            },\n      ],\n      transformReactDisplayName,\n      pure !== false && transformReactPure,\n    ].filter(Boolean),\n  };\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIU,IAAIA,qBAAA,CAAAC,eAAe,CAAC,qBAAqB;AAEpC,SAASC,gBAAgBA,CAAA,EAAoB;EAAA,IAAnBC,OAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAkFjD;IACL,IAAI;MAAEG,MAAM;MAAEC;IAAW,CAAC,GAAGL,OAAO;IAEpC,MAAM;MACJM,IAAI;MACJC,gBAAgB,GAAG,IAAI;MACvBC,OAAO,GAAG,SAAS;MACnBC,YAAY;MACZC,WAAW;MACXC;IACF,CAAC,GAAGX,OAAO;IAEX,IAAIQ,OAAO,KAAK,SAAS,EAAE;MACzBJ,MAAM,GAAGA,MAAM,IAAI,qBAAqB;MACxCC,UAAU,GAAGA,UAAU,IAAI,gBAAgB;IAC7C;IAEA,MAAMO,WAAW,GAAG,CAAC,CAACZ,OAAO,CAACY,WAAW;IAEzC,OAAO;MACLA,WAAW;MACXH,YAAY;MACZL,MAAM;MACNC,UAAU;MACVC,IAAI;MACJE,OAAO;MACPD,gBAAgB;MAChBG,WAAW;MACXC;KACD;EACH;AACF;ACpGA,IAAAE,KAAA,GAAeC,iBAAA,CAAAC,aAAa,CAAC,CAACC,GAAG,EAAEC,IAAa,KAAK;EACnDD,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC;EAEpB,MAAM;IACJN,WAAW;IACXH,YAAY;IACZL,MAAM;IACNC,UAAU;IACVC,IAAI;IACJE,OAAO;IACPD;EACF,CAAC,GAAGR,gBAAgB,CAACkB,IAAI,CAAC;EAE1B,OAAO;IACLE,OAAO,EAAE,CACP,CACEP,WAAW,GAAGQ,qCAAA,WAA4B,GAAGC,0BAAA,WAAiB,EAU1D;MACEZ,YAAY;MACZL,MAAM;MACNC,UAAU;MACVG,OAAO;MACPD,gBAAgB;MAChBD,IAAI;MACJI,WAAW,EAAE,CAAC,CAACO,IAAI,CAACP,WAAW;MAC/BC,SAAS,EAAEM,IAAI,CAACN;IAClB,CAAC,CACN,EACDW,kCAAA,WAAyB,EACzBhB,IAAI,KAAK,KAAK,IAAIiB,2BAAA,WAAkB,CACrC,CAACC,MAAM,CAACC,OAAO;GACjB;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}