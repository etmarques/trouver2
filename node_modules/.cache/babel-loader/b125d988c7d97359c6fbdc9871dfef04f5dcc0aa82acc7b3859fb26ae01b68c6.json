{"ast":null,"code":"'use strict';\n\nconst {\n  pathElems,\n  referencesProps\n} = require('./_collections.js');\nexports.name = 'moveGroupAttrsToElems';\nexports.description = 'moves some group attributes to the content elements';\nconst pathElemsWithGroupsAndText = [...pathElems, 'g', 'text'];\n\n/**\n * Move group attrs to the content elements.\n *\n * @example\n * <g transform=\"scale(2)\">\n *     <path transform=\"rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *                          ⬇\n * <g>\n *     <path transform=\"scale(2) rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"scale(2) translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveGroupAttrsToElems'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: node => {\n        // move group transform attr to content's pathElems\n        if (node.name === 'g' && node.children.length !== 0 && node.attributes.transform != null && Object.entries(node.attributes).some(_ref => {\n          let [name, value] = _ref;\n          return referencesProps.includes(name) && value.includes('url(');\n        }) === false && node.children.every(child => child.type === 'element' && pathElemsWithGroupsAndText.includes(child.name) && child.attributes.id == null)) {\n          for (const child of node.children) {\n            const value = node.attributes.transform;\n            if (child.type === 'element') {\n              if (child.attributes.transform != null) {\n                child.attributes.transform = `${value} ${child.attributes.transform}`;\n              } else {\n                child.attributes.transform = value;\n              }\n            }\n          }\n          delete node.attributes.transform;\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["pathElems","referencesProps","require","exports","name","description","pathElemsWithGroupsAndText","fn","element","enter","node","children","length","attributes","transform","Object","entries","some","_ref","value","includes","every","child","type","id"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/moveGroupAttrsToElems.js"],"sourcesContent":["'use strict';\n\nconst { pathElems, referencesProps } = require('./_collections.js');\n\nexports.name = 'moveGroupAttrsToElems';\nexports.description = 'moves some group attributes to the content elements';\n\nconst pathElemsWithGroupsAndText = [...pathElems, 'g', 'text'];\n\n/**\n * Move group attrs to the content elements.\n *\n * @example\n * <g transform=\"scale(2)\">\n *     <path transform=\"rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *                          ⬇\n * <g>\n *     <path transform=\"scale(2) rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"scale(2) translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveGroupAttrsToElems'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node) => {\n        // move group transform attr to content's pathElems\n        if (\n          node.name === 'g' &&\n          node.children.length !== 0 &&\n          node.attributes.transform != null &&\n          Object.entries(node.attributes).some(\n            ([name, value]) =>\n              referencesProps.includes(name) && value.includes('url(')\n          ) === false &&\n          node.children.every(\n            (child) =>\n              child.type === 'element' &&\n              pathElemsWithGroupsAndText.includes(child.name) &&\n              child.attributes.id == null\n          )\n        ) {\n          for (const child of node.children) {\n            const value = node.attributes.transform;\n            if (child.type === 'element') {\n              if (child.attributes.transform != null) {\n                child.attributes.transform = `${value} ${child.attributes.transform}`;\n              } else {\n                child.attributes.transform = value;\n              }\n            }\n          }\n\n          delete node.attributes.transform;\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,SAAS;EAAEC;AAAgB,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEnEC,OAAO,CAACC,IAAI,GAAG,uBAAuB;AACtCD,OAAO,CAACE,WAAW,GAAG,qDAAqD;AAE3E,MAAMC,0BAA0B,GAAG,CAAC,GAAGN,SAAS,EAAE,GAAG,EAAE,MAAM,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,OAAO,CAACI,EAAE,GAAG,MAAM;EACjB,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAGC,IAAI,IAAK;QACf;QACA,IACEA,IAAI,CAACN,IAAI,KAAK,GAAG,IACjBM,IAAI,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,IAC1BF,IAAI,CAACG,UAAU,CAACC,SAAS,IAAI,IAAI,IACjCC,MAAM,CAACC,OAAO,CAACN,IAAI,CAACG,UAAU,CAAC,CAACI,IAAI,CAClCC,IAAA;UAAA,IAAC,CAACd,IAAI,EAAEe,KAAK,CAAC,GAAAD,IAAA;UAAA,OACZjB,eAAe,CAACmB,QAAQ,CAAChB,IAAI,CAAC,IAAIe,KAAK,CAACC,QAAQ,CAAC,MAAM,CAAC;QAAA,CAC5D,CAAC,KAAK,KAAK,IACXV,IAAI,CAACC,QAAQ,CAACU,KAAK,CAChBC,KAAK,IACJA,KAAK,CAACC,IAAI,KAAK,SAAS,IACxBjB,0BAA0B,CAACc,QAAQ,CAACE,KAAK,CAAClB,IAAI,CAAC,IAC/CkB,KAAK,CAACT,UAAU,CAACW,EAAE,IAAI,IAC3B,CAAC,EACD;UACA,KAAK,MAAMF,KAAK,IAAIZ,IAAI,CAACC,QAAQ,EAAE;YACjC,MAAMQ,KAAK,GAAGT,IAAI,CAACG,UAAU,CAACC,SAAS;YACvC,IAAIQ,KAAK,CAACC,IAAI,KAAK,SAAS,EAAE;cAC5B,IAAID,KAAK,CAACT,UAAU,CAACC,SAAS,IAAI,IAAI,EAAE;gBACtCQ,KAAK,CAACT,UAAU,CAACC,SAAS,GAAI,GAAEK,KAAM,IAAGG,KAAK,CAACT,UAAU,CAACC,SAAU,EAAC;cACvE,CAAC,MAAM;gBACLQ,KAAK,CAACT,UAAU,CAACC,SAAS,GAAGK,KAAK;cACpC;YACF;UACF;UAEA,OAAOT,IAAI,CAACG,UAAU,CAACC,SAAS;QAClC;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}