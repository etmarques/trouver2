{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('./types').XastNode} XastNode\n * @typedef {import('./types').XastChild} XastChild\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').Visitor} Visitor\n */\nconst {\n  selectAll,\n  selectOne,\n  is\n} = require('css-select');\nconst xastAdaptor = require('./svgo/css-select-adapter.js');\nconst cssSelectOptions = {\n  xmlMode: true,\n  adapter: xastAdaptor\n};\n\n/**\n * @type {(node: XastNode, selector: string) => Array<XastChild>}\n */\nconst querySelectorAll = (node, selector) => {\n  return selectAll(selector, node, cssSelectOptions);\n};\nexports.querySelectorAll = querySelectorAll;\n\n/**\n * @type {(node: XastNode, selector: string) => null | XastChild}\n */\nconst querySelector = (node, selector) => {\n  return selectOne(selector, node, cssSelectOptions);\n};\nexports.querySelector = querySelector;\n\n/**\n * @type {(node: XastChild, selector: string) => boolean}\n */\nconst matches = (node, selector) => {\n  return is(node, selector, cssSelectOptions);\n};\nexports.matches = matches;\nconst visitSkip = Symbol();\nexports.visitSkip = visitSkip;\n\n/**\n * @type {(node: XastNode, visitor: Visitor, parentNode?: any) => void}\n */\nconst visit = (node, visitor, parentNode) => {\n  const callbacks = visitor[node.type];\n  if (callbacks && callbacks.enter) {\n    // @ts-ignore hard to infer\n    const symbol = callbacks.enter(node, parentNode);\n    if (symbol === visitSkip) {\n      return;\n    }\n  }\n  // visit root children\n  if (node.type === 'root') {\n    // copy children array to not loose cursor when children is spliced\n    for (const child of node.children) {\n      visit(child, visitor, node);\n    }\n  }\n  // visit element children if still attached to parent\n  if (node.type === 'element') {\n    if (parentNode.children.includes(node)) {\n      for (const child of node.children) {\n        visit(child, visitor, node);\n      }\n    }\n  }\n  if (callbacks && callbacks.exit) {\n    // @ts-ignore hard to infer\n    callbacks.exit(node, parentNode);\n  }\n};\nexports.visit = visit;\n\n/**\n * @type {(node: XastChild, parentNode: XastParent) => void}\n */\nconst detachNodeFromParent = (node, parentNode) => {\n  // avoid splice to not break for loops\n  parentNode.children = parentNode.children.filter(child => child !== node);\n};\nexports.detachNodeFromParent = detachNodeFromParent;","map":{"version":3,"names":["selectAll","selectOne","is","require","xastAdaptor","cssSelectOptions","xmlMode","adapter","querySelectorAll","node","selector","exports","querySelector","matches","visitSkip","Symbol","visit","visitor","parentNode","callbacks","type","enter","symbol","child","children","includes","exit","detachNodeFromParent","filter"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/xast.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('./types').XastNode} XastNode\n * @typedef {import('./types').XastChild} XastChild\n * @typedef {import('./types').XastParent} XastParent\n * @typedef {import('./types').Visitor} Visitor\n */\n\nconst { selectAll, selectOne, is } = require('css-select');\nconst xastAdaptor = require('./svgo/css-select-adapter.js');\n\nconst cssSelectOptions = {\n  xmlMode: true,\n  adapter: xastAdaptor,\n};\n\n/**\n * @type {(node: XastNode, selector: string) => Array<XastChild>}\n */\nconst querySelectorAll = (node, selector) => {\n  return selectAll(selector, node, cssSelectOptions);\n};\nexports.querySelectorAll = querySelectorAll;\n\n/**\n * @type {(node: XastNode, selector: string) => null | XastChild}\n */\nconst querySelector = (node, selector) => {\n  return selectOne(selector, node, cssSelectOptions);\n};\nexports.querySelector = querySelector;\n\n/**\n * @type {(node: XastChild, selector: string) => boolean}\n */\nconst matches = (node, selector) => {\n  return is(node, selector, cssSelectOptions);\n};\nexports.matches = matches;\n\nconst visitSkip = Symbol();\nexports.visitSkip = visitSkip;\n\n/**\n * @type {(node: XastNode, visitor: Visitor, parentNode?: any) => void}\n */\nconst visit = (node, visitor, parentNode) => {\n  const callbacks = visitor[node.type];\n  if (callbacks && callbacks.enter) {\n    // @ts-ignore hard to infer\n    const symbol = callbacks.enter(node, parentNode);\n    if (symbol === visitSkip) {\n      return;\n    }\n  }\n  // visit root children\n  if (node.type === 'root') {\n    // copy children array to not loose cursor when children is spliced\n    for (const child of node.children) {\n      visit(child, visitor, node);\n    }\n  }\n  // visit element children if still attached to parent\n  if (node.type === 'element') {\n    if (parentNode.children.includes(node)) {\n      for (const child of node.children) {\n        visit(child, visitor, node);\n      }\n    }\n  }\n  if (callbacks && callbacks.exit) {\n    // @ts-ignore hard to infer\n    callbacks.exit(node, parentNode);\n  }\n};\nexports.visit = visit;\n\n/**\n * @type {(node: XastChild, parentNode: XastParent) => void}\n */\nconst detachNodeFromParent = (node, parentNode) => {\n  // avoid splice to not break for loops\n  parentNode.children = parentNode.children.filter((child) => child !== node);\n};\nexports.detachNodeFromParent = detachNodeFromParent;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA,SAAS;EAAEC,SAAS;EAAEC;AAAG,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC1D,MAAMC,WAAW,GAAGD,OAAO,CAAC,8BAA8B,CAAC;AAE3D,MAAME,gBAAgB,GAAG;EACvBC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAEH;AACX,CAAC;;AAED;AACA;AACA;AACA,MAAMI,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC3C,OAAOV,SAAS,CAACU,QAAQ,EAAED,IAAI,EAAEJ,gBAAgB,CAAC;AACpD,CAAC;AACDM,OAAO,CAACH,gBAAgB,GAAGA,gBAAgB;;AAE3C;AACA;AACA;AACA,MAAMI,aAAa,GAAGA,CAACH,IAAI,EAAEC,QAAQ,KAAK;EACxC,OAAOT,SAAS,CAACS,QAAQ,EAAED,IAAI,EAAEJ,gBAAgB,CAAC;AACpD,CAAC;AACDM,OAAO,CAACC,aAAa,GAAGA,aAAa;;AAErC;AACA;AACA;AACA,MAAMC,OAAO,GAAGA,CAACJ,IAAI,EAAEC,QAAQ,KAAK;EAClC,OAAOR,EAAE,CAACO,IAAI,EAAEC,QAAQ,EAAEL,gBAAgB,CAAC;AAC7C,CAAC;AACDM,OAAO,CAACE,OAAO,GAAGA,OAAO;AAEzB,MAAMC,SAAS,GAAGC,MAAM,CAAC,CAAC;AAC1BJ,OAAO,CAACG,SAAS,GAAGA,SAAS;;AAE7B;AACA;AACA;AACA,MAAME,KAAK,GAAGA,CAACP,IAAI,EAAEQ,OAAO,EAAEC,UAAU,KAAK;EAC3C,MAAMC,SAAS,GAAGF,OAAO,CAACR,IAAI,CAACW,IAAI,CAAC;EACpC,IAAID,SAAS,IAAIA,SAAS,CAACE,KAAK,EAAE;IAChC;IACA,MAAMC,MAAM,GAAGH,SAAS,CAACE,KAAK,CAACZ,IAAI,EAAES,UAAU,CAAC;IAChD,IAAII,MAAM,KAAKR,SAAS,EAAE;MACxB;IACF;EACF;EACA;EACA,IAAIL,IAAI,CAACW,IAAI,KAAK,MAAM,EAAE;IACxB;IACA,KAAK,MAAMG,KAAK,IAAId,IAAI,CAACe,QAAQ,EAAE;MACjCR,KAAK,CAACO,KAAK,EAAEN,OAAO,EAAER,IAAI,CAAC;IAC7B;EACF;EACA;EACA,IAAIA,IAAI,CAACW,IAAI,KAAK,SAAS,EAAE;IAC3B,IAAIF,UAAU,CAACM,QAAQ,CAACC,QAAQ,CAAChB,IAAI,CAAC,EAAE;MACtC,KAAK,MAAMc,KAAK,IAAId,IAAI,CAACe,QAAQ,EAAE;QACjCR,KAAK,CAACO,KAAK,EAAEN,OAAO,EAAER,IAAI,CAAC;MAC7B;IACF;EACF;EACA,IAAIU,SAAS,IAAIA,SAAS,CAACO,IAAI,EAAE;IAC/B;IACAP,SAAS,CAACO,IAAI,CAACjB,IAAI,EAAES,UAAU,CAAC;EAClC;AACF,CAAC;AACDP,OAAO,CAACK,KAAK,GAAGA,KAAK;;AAErB;AACA;AACA;AACA,MAAMW,oBAAoB,GAAGA,CAAClB,IAAI,EAAES,UAAU,KAAK;EACjD;EACAA,UAAU,CAACM,QAAQ,GAAGN,UAAU,CAACM,QAAQ,CAACI,MAAM,CAAEL,KAAK,IAAKA,KAAK,KAAKd,IAAI,CAAC;AAC7E,CAAC;AACDE,OAAO,CAACgB,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}