{"ast":null,"code":"'use strict';\n\nconst {\n  parseSvg\n} = require('./parser.js');\nconst {\n  stringifySvg\n} = require('./stringifier.js');\nconst {\n  builtin\n} = require('./builtin.js');\nconst {\n  invokePlugins\n} = require('./svgo/plugins.js');\nconst {\n  encodeSVGDatauri\n} = require('./svgo/tools.js');\nconst pluginsMap = {};\nfor (const plugin of builtin) {\n  pluginsMap[plugin.name] = plugin;\n}\nconst resolvePluginConfig = plugin => {\n  if (typeof plugin === 'string') {\n    // resolve builtin plugin specified as string\n    const builtinPlugin = pluginsMap[plugin];\n    if (builtinPlugin == null) {\n      throw Error(`Unknown builtin plugin \"${plugin}\" specified.`);\n    }\n    return {\n      name: plugin,\n      params: {},\n      fn: builtinPlugin.fn\n    };\n  }\n  if (typeof plugin === 'object' && plugin != null) {\n    if (plugin.name == null) {\n      throw Error(`Plugin name should be specified`);\n    }\n    // use custom plugin implementation\n    let fn = plugin.fn;\n    if (fn == null) {\n      // resolve builtin plugin implementation\n      const builtinPlugin = pluginsMap[plugin.name];\n      if (builtinPlugin == null) {\n        throw Error(`Unknown builtin plugin \"${plugin.name}\" specified.`);\n      }\n      fn = builtinPlugin.fn;\n    }\n    return {\n      name: plugin.name,\n      params: plugin.params,\n      fn\n    };\n  }\n  return null;\n};\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let output = '';\n  const info = {};\n  if (config.path != null) {\n    info.path = config.path;\n  }\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i;\n    const ast = parseSvg(input, config.path);\n    const plugins = config.plugins || ['preset-default'];\n    if (Array.isArray(plugins) === false) {\n      throw Error(\"Invalid plugins list. Provided 'plugins' in config should be an array.\");\n    }\n    const resolvedPlugins = plugins.map(resolvePluginConfig);\n    const globalOverrides = {};\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n    invokePlugins(ast, info, resolvedPlugins, null, globalOverrides);\n    output = stringifySvg(ast, config.js2svg);\n    if (output.length < prevResultSize) {\n      input = output;\n      prevResultSize = output.length;\n    } else {\n      break;\n    }\n  }\n  if (config.datauri) {\n    output = encodeSVGDatauri(output, config.datauri);\n  }\n  return {\n    data: output\n  };\n};\nexports.optimize = optimize;","map":{"version":3,"names":["parseSvg","require","stringifySvg","builtin","invokePlugins","encodeSVGDatauri","pluginsMap","plugin","name","resolvePluginConfig","builtinPlugin","Error","params","fn","optimize","input","config","maxPassCount","multipass","prevResultSize","Number","POSITIVE_INFINITY","output","info","path","i","multipassCount","ast","plugins","Array","isArray","resolvedPlugins","map","globalOverrides","floatPrecision","js2svg","length","datauri","data","exports"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/svgo.js"],"sourcesContent":["'use strict';\n\nconst { parseSvg } = require('./parser.js');\nconst { stringifySvg } = require('./stringifier.js');\nconst { builtin } = require('./builtin.js');\nconst { invokePlugins } = require('./svgo/plugins.js');\nconst { encodeSVGDatauri } = require('./svgo/tools.js');\n\nconst pluginsMap = {};\nfor (const plugin of builtin) {\n  pluginsMap[plugin.name] = plugin;\n}\n\nconst resolvePluginConfig = (plugin) => {\n  if (typeof plugin === 'string') {\n    // resolve builtin plugin specified as string\n    const builtinPlugin = pluginsMap[plugin];\n    if (builtinPlugin == null) {\n      throw Error(`Unknown builtin plugin \"${plugin}\" specified.`);\n    }\n    return {\n      name: plugin,\n      params: {},\n      fn: builtinPlugin.fn,\n    };\n  }\n  if (typeof plugin === 'object' && plugin != null) {\n    if (plugin.name == null) {\n      throw Error(`Plugin name should be specified`);\n    }\n    // use custom plugin implementation\n    let fn = plugin.fn;\n    if (fn == null) {\n      // resolve builtin plugin implementation\n      const builtinPlugin = pluginsMap[plugin.name];\n      if (builtinPlugin == null) {\n        throw Error(`Unknown builtin plugin \"${plugin.name}\" specified.`);\n      }\n      fn = builtinPlugin.fn;\n    }\n    return {\n      name: plugin.name,\n      params: plugin.params,\n      fn,\n    };\n  }\n  return null;\n};\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let output = '';\n  const info = {};\n  if (config.path != null) {\n    info.path = config.path;\n  }\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i;\n    const ast = parseSvg(input, config.path);\n    const plugins = config.plugins || ['preset-default'];\n    if (Array.isArray(plugins) === false) {\n      throw Error(\n        \"Invalid plugins list. Provided 'plugins' in config should be an array.\"\n      );\n    }\n    const resolvedPlugins = plugins.map(resolvePluginConfig);\n    const globalOverrides = {};\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n    invokePlugins(ast, info, resolvedPlugins, null, globalOverrides);\n    output = stringifySvg(ast, config.js2svg);\n    if (output.length < prevResultSize) {\n      input = output;\n      prevResultSize = output.length;\n    } else {\n      break;\n    }\n  }\n  if (config.datauri) {\n    output = encodeSVGDatauri(output, config.datauri);\n  }\n  return {\n    data: output,\n  };\n};\nexports.optimize = optimize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}