{"ast":null,"code":"'use strict';\n\nvar core = require('@babel/core');\nconst defaultTemplate = (variables, _ref) => {\n  let {\n    tpl\n  } = _ref;\n  return tpl`\n${variables.imports};\n\n${variables.interfaces};\n\nconst ${variables.componentName} = (${variables.props}) => (\n  ${variables.jsx}\n);\n \n${variables.exports};\n`;\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst tsOptionalPropertySignature = function () {\n  return __spreadProps(__spreadValues({}, core.types.tsPropertySignature(...arguments)), {\n    optional: true\n  });\n};\nconst getOrCreateImport = function (_ref2, sourceValue) {\n  let {\n    imports\n  } = _ref2;\n  let importKind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;\n  const existing = imports.find(imp2 => imp2.source.value === sourceValue && imp2.importKind === importKind && !imp2.specifiers.some(specifier => specifier.type === \"ImportNamespaceSpecifier\"));\n  if (existing) return existing;\n  const imp = core.types.importDeclaration([], core.types.stringLiteral(sourceValue));\n  if (importKind !== void 0) {\n    imp.importKind = importKind;\n  }\n  imports.push(imp);\n  return imp;\n};\nconst tsTypeReferenceSVGProps = ctx => {\n  if (ctx.opts.native) {\n    const identifier2 = core.types.identifier(\"SvgProps\");\n    getOrCreateImport(ctx, \"react-native-svg\", \"type\").specifiers.push(core.types.importSpecifier(identifier2, identifier2));\n    return core.types.tsTypeReference(identifier2);\n  }\n  const identifier = core.types.identifier(\"SVGProps\");\n  getOrCreateImport(ctx, ctx.importSource, \"type\").specifiers.push(core.types.importSpecifier(identifier, identifier));\n  return core.types.tsTypeReference(identifier, core.types.tsTypeParameterInstantiation([core.types.tsTypeReference(core.types.identifier(\"SVGSVGElement\"))]));\n};\nconst tsTypeReferenceSVGRef = ctx => {\n  const identifier = core.types.identifier(\"Ref\");\n  getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(identifier, identifier));\n  return core.types.tsTypeReference(identifier, core.types.tsTypeParameterInstantiation([core.types.tsTypeReference(core.types.identifier(\"SVGSVGElement\"))]));\n};\nconst getJsxRuntimeImport = cfg => {\n  const specifiers = (() => {\n    if (cfg.namespace) return [core.types.importNamespaceSpecifier(core.types.identifier(cfg.namespace))];\n    if (cfg.defaultSpecifier) {\n      const identifier = core.types.identifier(cfg.defaultSpecifier);\n      return [core.types.importDefaultSpecifier(identifier)];\n    }\n    if (cfg.specifiers) return cfg.specifiers.map(specifier => {\n      const identifier = core.types.identifier(specifier);\n      return core.types.importSpecifier(identifier, identifier);\n    });\n    throw new Error(`Specify \"namespace\", \"defaultSpecifier\", or \"specifiers\" in \"jsxRuntimeImport\" option`);\n  })();\n  return core.types.importDeclaration(specifiers, core.types.stringLiteral(cfg.source));\n};\nconst defaultJsxRuntimeImport = {\n  source: \"react\",\n  namespace: \"React\"\n};\nconst defaultImportSource = \"react\";\nconst getVariables = _ref3 => {\n  let {\n    opts,\n    jsx\n  } = _ref3;\n  var _a, _b, _c, _d;\n  const interfaces = [];\n  const props = [];\n  const imports = [];\n  const exports = [];\n  const ctx = {\n    importSource: (_a = opts.importSource) != null ? _a : defaultImportSource,\n    exportIdentifier: core.types.identifier(opts.state.componentName),\n    opts,\n    interfaces,\n    props,\n    imports,\n    exports\n  };\n  if (opts.jsxRuntime !== \"automatic\") {\n    imports.push(getJsxRuntimeImport((_b = opts.jsxRuntimeImport) != null ? _b : defaultJsxRuntimeImport));\n  }\n  if (opts.native) {\n    getOrCreateImport(ctx, \"react-native-svg\").specifiers.push(core.types.importDefaultSpecifier(core.types.identifier(\"Svg\")));\n  }\n  if (opts.titleProp || opts.descProp) {\n    const properties = [];\n    const propertySignatures = [];\n    const createProperty = attr => {\n      return core.types.objectProperty(core.types.identifier(attr), core.types.identifier(attr), false, true);\n    };\n    const createSignature = attr => {\n      return tsOptionalPropertySignature(core.types.identifier(attr), core.types.tsTypeAnnotation(core.types.tsStringKeyword()));\n    };\n    if (opts.titleProp) {\n      properties.push(createProperty(\"title\"), createProperty(\"titleId\"));\n      if (opts.typescript) {\n        propertySignatures.push(createSignature(\"title\"), createSignature(\"titleId\"));\n      }\n    }\n    if (opts.descProp) {\n      properties.push(createProperty(\"desc\"), createProperty(\"descId\"));\n      if (opts.typescript) {\n        propertySignatures.push(createSignature(\"desc\"), createSignature(\"descId\"));\n      }\n    }\n    const prop = core.types.objectPattern(properties);\n    props.push(prop);\n    if (opts.typescript) {\n      interfaces.push(core.types.tsInterfaceDeclaration(core.types.identifier(\"SVGRProps\"), null, null, core.types.tSInterfaceBody(propertySignatures)));\n      prop.typeAnnotation = core.types.tsTypeAnnotation(core.types.tsTypeReference(core.types.identifier(\"SVGRProps\")));\n    }\n  }\n  if (opts.expandProps) {\n    const identifier = core.types.identifier(\"props\");\n    if (core.types.isObjectPattern(props[0])) {\n      props[0].properties.push(core.types.restElement(identifier));\n      if (opts.typescript) {\n        props[0].typeAnnotation = core.types.tsTypeAnnotation(core.types.tsIntersectionType([tsTypeReferenceSVGProps(ctx), props[0].typeAnnotation.typeAnnotation]));\n      }\n    } else {\n      props.push(identifier);\n      if (opts.typescript) {\n        identifier.typeAnnotation = core.types.tsTypeAnnotation(tsTypeReferenceSVGProps(ctx));\n      }\n    }\n  }\n  if (opts.ref) {\n    if (props.length === 0) {\n      props.push(core.types.identifier(\"_\"));\n    }\n    const prop = core.types.identifier(\"ref\");\n    props.push(prop);\n    if (opts.typescript) {\n      prop.typeAnnotation = core.types.tsTypeAnnotation(tsTypeReferenceSVGRef(ctx));\n    }\n    const forwardRef = core.types.identifier(\"forwardRef\");\n    const ForwardRef = core.types.identifier(\"ForwardRef\");\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(forwardRef, forwardRef));\n    exports.push(core.types.variableDeclaration(\"const\", [core.types.variableDeclarator(ForwardRef, core.types.callExpression(forwardRef, [ctx.exportIdentifier]))]));\n    ctx.exportIdentifier = ForwardRef;\n  }\n  if (opts.memo) {\n    const memo = core.types.identifier(\"memo\");\n    const Memo = core.types.identifier(\"Memo\");\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(memo, memo));\n    exports.push(core.types.variableDeclaration(\"const\", [core.types.variableDeclarator(Memo, core.types.callExpression(memo, [ctx.exportIdentifier]))]));\n    ctx.exportIdentifier = Memo;\n  }\n  if (((_c = opts.state.caller) == null ? void 0 : _c.previousExport) || opts.exportType === \"named\") {\n    if (!opts.namedExport) {\n      throw new Error(`\"namedExport\" not specified`);\n    }\n    exports.push(core.types.exportNamedDeclaration(null, [core.types.exportSpecifier(ctx.exportIdentifier, core.types.identifier(opts.namedExport))]));\n    if ((_d = opts.state.caller) == null ? void 0 : _d.previousExport) {\n      const previousExportAst = core.template.ast(opts.state.caller.previousExport);\n      exports.push(...(Array.isArray(previousExportAst) ? previousExportAst : [previousExportAst]));\n    }\n  } else {\n    exports.push(core.types.exportDefaultDeclaration(ctx.exportIdentifier));\n  }\n  return {\n    componentName: opts.state.componentName,\n    props,\n    interfaces,\n    imports,\n    exports,\n    jsx\n  };\n};\nconst plugin = (_, opts) => {\n  const template = opts.template || defaultTemplate;\n  const plugins = opts.typescript ? [\"jsx\", \"typescript\"] : [\"jsx\"];\n  const tpl = core.template.smart({\n    plugins,\n    preserveComments: true\n  }).ast;\n  return {\n    visitor: {\n      Program(path) {\n        const jsx = path.node.body[0].expression;\n        const variables = getVariables({\n          opts,\n          jsx\n        });\n        const body = template(variables, {\n          options: opts,\n          tpl\n        });\n        path.node.body = Array.isArray(body) ? body : [body];\n        path.replaceWith(path.node);\n      }\n    }\n  };\n};\nmodule.exports = plugin;","map":{"version":3,"names":["defaultTemplate","variables","_ref","tpl","imports","interfaces","componentName","props","jsx","exports","tsOptionalPropertySignature","__spreadProps","__spreadValues","core","types","tsPropertySignature","arguments","optional","getOrCreateImport","_ref2","sourceValue","importKind","length","undefined","existing","find","imp2","source","value","specifiers","some","specifier","type","imp","importDeclaration","stringLiteral","push","tsTypeReferenceSVGProps","ctx","opts","native","identifier2","identifier","importSpecifier","tsTypeReference","importSource","tsTypeParameterInstantiation","tsTypeReferenceSVGRef","getJsxRuntimeImport","cfg","namespace","importNamespaceSpecifier","defaultSpecifier","importDefaultSpecifier","map","Error","defaultJsxRuntimeImport","defaultImportSource","getVariables","_ref3","_a","_b","_c","_d","exportIdentifier","state","jsxRuntime","jsxRuntimeImport","titleProp","descProp","properties","propertySignatures","createProperty","attr","objectProperty","createSignature","tsTypeAnnotation","tsStringKeyword","typescript","prop","objectPattern","tsInterfaceDeclaration","tSInterfaceBody","typeAnnotation","expandProps","isObjectPattern","restElement","tsIntersectionType","ref","forwardRef","ForwardRef","variableDeclaration","variableDeclarator","callExpression","memo","Memo","caller","previousExport","exportType","namedExport","exportNamedDeclaration","exportSpecifier","previousExportAst","template","ast","Array","isArray","exportDefaultDeclaration","plugin","_","plugins","smart","preserveComments","visitor","Program","path","node","body","expression","options","replaceWith"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-transform-svg-component\\src\\defaultTemplate.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-transform-svg-component\\src\\variables.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-transform-svg-component\\src\\index.ts"],"sourcesContent":["import type { Template } from './types'\n\nexport const defaultTemplate: Template = (variables, { tpl }) => {\n  return tpl`\n${variables.imports};\n\n${variables.interfaces};\n\nconst ${variables.componentName} = (${variables.props}) => (\n  ${variables.jsx}\n);\n \n${variables.exports};\n`\n}\n","import { types as t, template } from '@babel/core'\nimport type { Options, TemplateVariables, JSXRuntimeImport } from './types'\nimport type { ImportDeclaration } from '@babel/types'\n\nconst tsOptionalPropertySignature = (\n  ...args: Parameters<typeof t.tsPropertySignature>\n) => {\n  return {\n    ...t.tsPropertySignature(...args),\n    optional: true,\n  } as t.TSPropertySignature\n}\n\ninterface Context {\n  opts: Options\n  interfaces: t.TSInterfaceDeclaration[]\n  props: (t.Identifier | t.ObjectPattern)[]\n  imports: t.ImportDeclaration[]\n  importSource: string\n}\n\nconst getOrCreateImport = (\n  { imports }: Context,\n  sourceValue: string,\n  importKind: ImportDeclaration['importKind'] = undefined,\n) => {\n  const existing = imports.find(\n    (imp) =>\n      imp.source.value === sourceValue &&\n      imp.importKind === importKind &&\n      !imp.specifiers.some(\n        (specifier) => specifier.type === 'ImportNamespaceSpecifier',\n      ),\n  )\n  if (existing) return existing\n  const imp = t.importDeclaration([], t.stringLiteral(sourceValue))\n  if (importKind !== undefined) {\n    imp.importKind = importKind\n  }\n  imports.push(imp)\n  return imp\n}\n\nconst tsTypeReferenceSVGProps = (ctx: Context) => {\n  if (ctx.opts.native) {\n    const identifier = t.identifier('SvgProps')\n    getOrCreateImport(ctx, 'react-native-svg', 'type').specifiers.push(\n      t.importSpecifier(identifier, identifier),\n    )\n    return t.tsTypeReference(identifier)\n  }\n  const identifier = t.identifier('SVGProps')\n  getOrCreateImport(ctx, ctx.importSource, 'type').specifiers.push(\n    t.importSpecifier(identifier, identifier),\n  )\n  return t.tsTypeReference(\n    identifier,\n    t.tsTypeParameterInstantiation([\n      t.tsTypeReference(t.identifier('SVGSVGElement')),\n    ]),\n  )\n}\n\nconst tsTypeReferenceSVGRef = (ctx: Context) => {\n  const identifier = t.identifier('Ref')\n  getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n    t.importSpecifier(identifier, identifier),\n  )\n  return t.tsTypeReference(\n    identifier,\n    t.tsTypeParameterInstantiation([\n      t.tsTypeReference(t.identifier('SVGSVGElement')),\n    ]),\n  )\n}\n\nconst getJsxRuntimeImport = (cfg: JSXRuntimeImport) => {\n  const specifiers = (() => {\n    if (cfg.namespace)\n      return [t.importNamespaceSpecifier(t.identifier(cfg.namespace))]\n    if (cfg.defaultSpecifier) {\n      const identifier = t.identifier(cfg.defaultSpecifier)\n      return [t.importDefaultSpecifier(identifier)]\n    }\n    if (cfg.specifiers)\n      return cfg.specifiers.map((specifier) => {\n        const identifier = t.identifier(specifier)\n        return t.importSpecifier(identifier, identifier)\n      })\n    throw new Error(\n      `Specify \"namespace\", \"defaultSpecifier\", or \"specifiers\" in \"jsxRuntimeImport\" option`,\n    )\n  })()\n  return t.importDeclaration(specifiers, t.stringLiteral(cfg.source))\n}\n\nconst defaultJsxRuntimeImport: JSXRuntimeImport = {\n  source: 'react',\n  namespace: 'React',\n}\n\nconst defaultImportSource = 'react'\n\nexport const getVariables = ({\n  opts,\n  jsx,\n}: {\n  opts: Options\n  jsx: t.JSXElement\n}): TemplateVariables => {\n  const interfaces: t.TSInterfaceDeclaration[] = []\n  const props: (t.Identifier | t.ObjectPattern)[] = []\n  const imports: t.ImportDeclaration[] = []\n  const exports: (t.VariableDeclaration | t.ExportDeclaration | t.Statement)[] =\n    []\n  const ctx = {\n    importSource: opts.importSource ?? defaultImportSource,\n    exportIdentifier: t.identifier(opts.state.componentName),\n    opts,\n    interfaces,\n    props,\n    imports,\n    exports,\n  }\n\n  if (opts.jsxRuntime !== 'automatic') {\n    imports.push(\n      getJsxRuntimeImport(opts.jsxRuntimeImport ?? defaultJsxRuntimeImport),\n    )\n  }\n\n  if (opts.native) {\n    getOrCreateImport(ctx, 'react-native-svg').specifiers.push(\n      t.importDefaultSpecifier(t.identifier('Svg')),\n    )\n  }\n\n  if (opts.titleProp || opts.descProp) {\n    const properties = []\n    const propertySignatures = []\n    const createProperty = (attr: string) => {\n      return t.objectProperty(\n        t.identifier(attr),\n        t.identifier(attr),\n        false,\n        true,\n      )\n    }\n    const createSignature = (attr: string) => {\n      return tsOptionalPropertySignature(\n        t.identifier(attr),\n        t.tsTypeAnnotation(t.tsStringKeyword()),\n      )\n    }\n\n    if (opts.titleProp) {\n      properties.push(createProperty('title'), createProperty('titleId'))\n\n      if (opts.typescript) {\n        propertySignatures.push(\n          createSignature('title'),\n          createSignature('titleId'),\n        )\n      }\n    }\n\n    if (opts.descProp) {\n      properties.push(createProperty('desc'), createProperty('descId'))\n\n      if (opts.typescript) {\n        propertySignatures.push(\n          createSignature('desc'),\n          createSignature('descId'),\n        )\n      }\n    }\n\n    const prop = t.objectPattern(properties)\n    props.push(prop)\n    if (opts.typescript) {\n      interfaces.push(\n        t.tsInterfaceDeclaration(\n          t.identifier('SVGRProps'),\n          null,\n          null,\n          t.tSInterfaceBody(propertySignatures),\n        ),\n      )\n      prop.typeAnnotation = t.tsTypeAnnotation(\n        t.tsTypeReference(t.identifier('SVGRProps')),\n      )\n    }\n  }\n\n  if (opts.expandProps) {\n    const identifier = t.identifier('props')\n    if (t.isObjectPattern(props[0])) {\n      props[0].properties.push(t.restElement(identifier))\n      if (opts.typescript) {\n        props[0].typeAnnotation = t.tsTypeAnnotation(\n          t.tsIntersectionType([\n            tsTypeReferenceSVGProps(ctx),\n            (props[0].typeAnnotation as t.TSTypeAnnotation).typeAnnotation,\n          ]),\n        )\n      }\n    } else {\n      props.push(identifier)\n      if (opts.typescript) {\n        identifier.typeAnnotation = t.tsTypeAnnotation(\n          tsTypeReferenceSVGProps(ctx),\n        )\n      }\n    }\n  }\n\n  if (opts.ref) {\n    if (props.length === 0) {\n      props.push(t.identifier('_'))\n    }\n    const prop = t.identifier('ref')\n    props.push(prop)\n    if (opts.typescript) {\n      prop.typeAnnotation = t.tsTypeAnnotation(tsTypeReferenceSVGRef(ctx))\n    }\n    const forwardRef = t.identifier('forwardRef')\n    const ForwardRef = t.identifier('ForwardRef')\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      t.importSpecifier(forwardRef, forwardRef),\n    )\n    exports.push(\n      t.variableDeclaration('const', [\n        t.variableDeclarator(\n          ForwardRef,\n          t.callExpression(forwardRef, [ctx.exportIdentifier]),\n        ),\n      ]),\n    )\n    ctx.exportIdentifier = ForwardRef\n  }\n\n  if (opts.memo) {\n    const memo = t.identifier('memo')\n    const Memo = t.identifier('Memo')\n    getOrCreateImport(ctx, ctx.importSource).specifiers.push(\n      t.importSpecifier(memo, memo),\n    )\n    exports.push(\n      t.variableDeclaration('const', [\n        t.variableDeclarator(\n          Memo,\n          t.callExpression(memo, [ctx.exportIdentifier]),\n        ),\n      ]),\n    )\n    ctx.exportIdentifier = Memo\n  }\n\n  if (opts.state.caller?.previousExport || opts.exportType === 'named') {\n    if (!opts.namedExport) {\n      throw new Error(`\"namedExport\" not specified`)\n    }\n    exports.push(\n      t.exportNamedDeclaration(null, [\n        t.exportSpecifier(ctx.exportIdentifier, t.identifier(opts.namedExport)),\n      ]),\n    )\n    if (opts.state.caller?.previousExport) {\n      const previousExportAst = template.ast(opts.state.caller.previousExport)\n      exports.push(\n        ...(Array.isArray(previousExportAst)\n          ? previousExportAst\n          : [previousExportAst]),\n      )\n    }\n  } else {\n    exports.push(t.exportDefaultDeclaration(ctx.exportIdentifier))\n  }\n  return {\n    componentName: opts.state.componentName,\n    props,\n    interfaces,\n    imports,\n    exports,\n    jsx,\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  ConfigAPI,\n  NodePath,\n  types as t,\n  template as babelTemplate,\n  ParserOptions,\n} from '@babel/core'\nimport type { Options } from './types'\nimport { defaultTemplate } from './defaultTemplate'\nimport { getVariables } from './variables'\n\nexport type { Options, Template } from './types'\n\nconst plugin = (_: ConfigAPI, opts: Options) => {\n  const template = opts.template || defaultTemplate\n  const plugins: ParserOptions['plugins'] = opts.typescript\n    ? ['jsx', 'typescript']\n    : ['jsx']\n  const tpl = babelTemplate.smart({ plugins, preserveComments: true }).ast\n  return {\n    visitor: {\n      Program(path: NodePath<t.Program>) {\n        const jsx = (path.node.body[0] as t.ExpressionStatement)\n          .expression as t.JSXElement\n        const variables = getVariables({\n          opts,\n          jsx,\n        })\n        const body = template(variables, { options: opts, tpl })\n        path.node.body = Array.isArray(body) ? body : [body]\n        path.replaceWith(path.node)\n      },\n    },\n  }\n}\n\nexport default plugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}