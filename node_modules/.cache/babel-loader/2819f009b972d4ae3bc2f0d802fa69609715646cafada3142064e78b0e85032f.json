{"ast":null,"code":"'use strict';\n\nexports.name = 'addAttributesToSVGElement';\nexports.description = 'adds attributes to an outer <svg> element';\nvar ENOCLS = `Error in plugin \"addAttributesToSVGElement\": absent parameters.\nIt should have a list of \"attributes\" or one \"attribute\".\nConfig example:\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attribute: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\n        {\n          focusable: false\n        },\n        {\n          'data-image': icon\n        }\n      ]\n    }\n  }\n]\n`;\n\n/**\n * Add attributes to an outer <svg> element. Example config:\n *\n * @author April Arcus\n *\n * @type {import('./plugins-types').Plugin<'addAttributesToSVGElement'>}\n */\nexports.fn = (root, params) => {\n  if (!Array.isArray(params.attributes) && !params.attribute) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const attributes = params.attributes || [params.attribute];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const attribute of attributes) {\n            if (typeof attribute === 'string') {\n              if (node.attributes[attribute] == null) {\n                // @ts-ignore disallow explicit nullable attribute value\n                node.attributes[attribute] = undefined;\n              }\n            }\n            if (typeof attribute === 'object') {\n              for (const key of Object.keys(attribute)) {\n                if (node.attributes[key] == null) {\n                  // @ts-ignore disallow explicit nullable attribute value\n                  node.attributes[key] = attribute[key];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","description","ENOCLS","fn","root","params","Array","isArray","attributes","attribute","console","error","element","enter","node","parentNode","type","undefined","key","Object","keys"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/addAttributesToSVGElement.js"],"sourcesContent":["'use strict';\n\nexports.name = 'addAttributesToSVGElement';\nexports.description = 'adds attributes to an outer <svg> element';\n\nvar ENOCLS = `Error in plugin \"addAttributesToSVGElement\": absent parameters.\nIt should have a list of \"attributes\" or one \"attribute\".\nConfig example:\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attribute: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\n        {\n          focusable: false\n        },\n        {\n          'data-image': icon\n        }\n      ]\n    }\n  }\n]\n`;\n\n/**\n * Add attributes to an outer <svg> element. Example config:\n *\n * @author April Arcus\n *\n * @type {import('./plugins-types').Plugin<'addAttributesToSVGElement'>}\n */\nexports.fn = (root, params) => {\n  if (!Array.isArray(params.attributes) && !params.attribute) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const attributes = params.attributes || [params.attribute];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const attribute of attributes) {\n            if (typeof attribute === 'string') {\n              if (node.attributes[attribute] == null) {\n                // @ts-ignore disallow explicit nullable attribute value\n                node.attributes[attribute] = undefined;\n              }\n            }\n            if (typeof attribute === 'object') {\n              for (const key of Object.keys(attribute)) {\n                if (node.attributes[key] == null) {\n                  // @ts-ignore disallow explicit nullable attribute value\n                  node.attributes[key] = attribute[key];\n                }\n              }\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,2BAA2B;AAC1CD,OAAO,CAACE,WAAW,GAAG,2CAA2C;AAEjE,IAAIC,MAAM,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACI,EAAE,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC7B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,UAAU,CAAC,IAAI,CAACH,MAAM,CAACI,SAAS,EAAE;IAC1DC,OAAO,CAACC,KAAK,CAACT,MAAM,CAAC;IACrB,OAAO,IAAI;EACb;EACA,MAAMM,UAAU,GAAGH,MAAM,CAACG,UAAU,IAAI,CAACH,MAAM,CAACI,SAAS,CAAC;EAC1D,OAAO;IACLG,OAAO,EAAE;MACPC,KAAK,EAAEA,CAACC,IAAI,EAAEC,UAAU,KAAK;QAC3B,IAAID,IAAI,CAACd,IAAI,KAAK,KAAK,IAAIe,UAAU,CAACC,IAAI,KAAK,MAAM,EAAE;UACrD,KAAK,MAAMP,SAAS,IAAID,UAAU,EAAE;YAClC,IAAI,OAAOC,SAAS,KAAK,QAAQ,EAAE;cACjC,IAAIK,IAAI,CAACN,UAAU,CAACC,SAAS,CAAC,IAAI,IAAI,EAAE;gBACtC;gBACAK,IAAI,CAACN,UAAU,CAACC,SAAS,CAAC,GAAGQ,SAAS;cACxC;YACF;YACA,IAAI,OAAOR,SAAS,KAAK,QAAQ,EAAE;cACjC,KAAK,MAAMS,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACX,SAAS,CAAC,EAAE;gBACxC,IAAIK,IAAI,CAACN,UAAU,CAACU,GAAG,CAAC,IAAI,IAAI,EAAE;kBAChC;kBACAJ,IAAI,CAACN,UAAU,CAACU,GAAG,CAAC,GAAGT,SAAS,CAACS,GAAG,CAAC;gBACvC;cACF;YACF;UACF;QACF;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}