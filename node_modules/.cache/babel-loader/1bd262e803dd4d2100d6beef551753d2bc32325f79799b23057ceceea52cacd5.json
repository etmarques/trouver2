{"ast":null,"code":"'use strict';\n\nconst collections = require('./_collections.js');\nexports.name = 'convertColors';\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\nconst rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)';\nconst rComma = '\\\\s*,\\\\s*';\nconst regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$');\nconst regHEX = /^#(([a-fA-F0-9])\\2){3}$/;\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @author Jed Schmidt\n *\n * @type {(rgb: Array<number>) => string}\n */\nconst convertRgbToHex = _ref => {\n  let [r, g, b] = _ref;\n  // combine the octets into a 32-bit integer as: [1][r][g][b]\n  const hexNumber =\n  // operator precedence is (+) > (<<) > (|)\n  (256 +\n  // [1][0]\n  r <<\n  // [1][r]\n  8 |\n  // [1][r][0]\n  g) <<\n  // [1][r][g]\n  8 |\n  // [1][r][g][0]\n  b;\n  // serialize [1][r][g][b] to a hex string, and\n  // remove the 1 to get the number with 0s intact\n  return '#' + hexNumber.toString(16).slice(1).toUpperCase();\n};\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see https://www.w3.org/TR/SVG11/types.html#DataTypeColor\n * @see https://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'convertColors'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    currentColor = false,\n    names2hex = true,\n    rgb2hex = true,\n    shorthex = true,\n    shortname = true\n  } = params;\n  return {\n    element: {\n      enter: node => {\n        for (const [name, value] of Object.entries(node.attributes)) {\n          if (collections.colorsProps.includes(name)) {\n            let val = value;\n\n            // convert colors to currentColor\n            if (currentColor) {\n              let matched;\n              if (typeof currentColor === 'string') {\n                matched = val === currentColor;\n              } else if (currentColor instanceof RegExp) {\n                matched = currentColor.exec(val) != null;\n              } else {\n                matched = val !== 'none';\n              }\n              if (matched) {\n                val = 'currentColor';\n              }\n            }\n\n            // convert color name keyword to long hex\n            if (names2hex) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsNames[colorName] != null) {\n                val = collections.colorsNames[colorName];\n              }\n            }\n\n            // convert rgb() to long hex\n            if (rgb2hex) {\n              let match = val.match(regRGB);\n              if (match != null) {\n                let nums = match.slice(1, 4).map(m => {\n                  let n;\n                  if (m.indexOf('%') > -1) {\n                    n = Math.round(parseFloat(m) * 2.55);\n                  } else {\n                    n = Number(m);\n                  }\n                  return Math.max(0, Math.min(n, 255));\n                });\n                val = convertRgbToHex(nums);\n              }\n            }\n\n            // convert long hex to short hex\n            if (shorthex) {\n              let match = val.match(regHEX);\n              if (match != null) {\n                val = '#' + match[0][1] + match[0][3] + match[0][5];\n              }\n            }\n\n            // convert hex to short name\n            if (shortname) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsShortNames[colorName] != null) {\n                val = collections.colorsShortNames[colorName];\n              }\n            }\n            node.attributes[name] = val;\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["collections","require","exports","name","description","rNumber","rComma","regRGB","RegExp","regHEX","convertRgbToHex","_ref","r","g","b","hexNumber","toString","slice","toUpperCase","fn","_root","params","currentColor","names2hex","rgb2hex","shorthex","shortname","element","enter","node","value","Object","entries","attributes","colorsProps","includes","val","matched","exec","colorName","toLowerCase","colorsNames","match","nums","map","m","n","indexOf","Math","round","parseFloat","Number","max","min","colorsShortNames"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/convertColors.js"],"sourcesContent":["'use strict';\n\nconst collections = require('./_collections.js');\n\nexports.name = 'convertColors';\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\n\nconst rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)';\nconst rComma = '\\\\s*,\\\\s*';\nconst regRGB = new RegExp(\n  '^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'\n);\nconst regHEX = /^#(([a-fA-F0-9])\\2){3}$/;\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @author Jed Schmidt\n *\n * @type {(rgb: Array<number>) => string}\n */\nconst convertRgbToHex = ([r, g, b]) => {\n  // combine the octets into a 32-bit integer as: [1][r][g][b]\n  const hexNumber =\n    // operator precedence is (+) > (<<) > (|)\n    ((((256 + // [1][0]\n      r) << // [1][r]\n      8) | // [1][r][0]\n      g) << // [1][r][g]\n      8) | // [1][r][g][0]\n    b;\n  // serialize [1][r][g][b] to a hex string, and\n  // remove the 1 to get the number with 0s intact\n  return '#' + hexNumber.toString(16).slice(1).toUpperCase();\n};\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see https://www.w3.org/TR/SVG11/types.html#DataTypeColor\n * @see https://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'convertColors'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    currentColor = false,\n    names2hex = true,\n    rgb2hex = true,\n    shorthex = true,\n    shortname = true,\n  } = params;\n\n  return {\n    element: {\n      enter: (node) => {\n        for (const [name, value] of Object.entries(node.attributes)) {\n          if (collections.colorsProps.includes(name)) {\n            let val = value;\n\n            // convert colors to currentColor\n            if (currentColor) {\n              let matched;\n              if (typeof currentColor === 'string') {\n                matched = val === currentColor;\n              } else if (currentColor instanceof RegExp) {\n                matched = currentColor.exec(val) != null;\n              } else {\n                matched = val !== 'none';\n              }\n              if (matched) {\n                val = 'currentColor';\n              }\n            }\n\n            // convert color name keyword to long hex\n            if (names2hex) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsNames[colorName] != null) {\n                val = collections.colorsNames[colorName];\n              }\n            }\n\n            // convert rgb() to long hex\n            if (rgb2hex) {\n              let match = val.match(regRGB);\n              if (match != null) {\n                let nums = match.slice(1, 4).map((m) => {\n                  let n;\n                  if (m.indexOf('%') > -1) {\n                    n = Math.round(parseFloat(m) * 2.55);\n                  } else {\n                    n = Number(m);\n                  }\n                  return Math.max(0, Math.min(n, 255));\n                });\n                val = convertRgbToHex(nums);\n              }\n            }\n\n            // convert long hex to short hex\n            if (shorthex) {\n              let match = val.match(regHEX);\n              if (match != null) {\n                val = '#' + match[0][1] + match[0][3] + match[0][5];\n              }\n            }\n\n            // convert hex to short name\n            if (shortname) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsShortNames[colorName] != null) {\n                val = collections.colorsShortNames[colorName];\n              }\n            }\n\n            node.attributes[name] = val;\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}