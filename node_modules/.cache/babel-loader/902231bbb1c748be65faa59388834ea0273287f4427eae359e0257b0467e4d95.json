{"ast":null,"code":"'use strict';\n\nconst {\n  visit\n} = require('../xast.js');\n\n/**\n * Plugins engine.\n *\n * @module plugins\n *\n * @param {Object} ast input ast\n * @param {Object} info extra information\n * @param {Array} plugins plugins object from config\n * @return {Object} output ast\n */\nconst invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {\n  for (const plugin of plugins) {\n    const override = overrides == null ? null : overrides[plugin.name];\n    if (override === false) {\n      continue;\n    }\n    const params = {\n      ...plugin.params,\n      ...globalOverrides,\n      ...override\n    };\n    const visitor = plugin.fn(ast, params, info);\n    if (visitor != null) {\n      visit(ast, visitor);\n    }\n  }\n};\nexports.invokePlugins = invokePlugins;\nconst createPreset = _ref => {\n  let {\n    name,\n    plugins\n  } = _ref;\n  return {\n    name,\n    fn: (ast, params, info) => {\n      const {\n        floatPrecision,\n        overrides\n      } = params;\n      const globalOverrides = {};\n      if (floatPrecision != null) {\n        globalOverrides.floatPrecision = floatPrecision;\n      }\n      if (overrides) {\n        const pluginNames = plugins.map(_ref2 => {\n          let {\n            name\n          } = _ref2;\n          return name;\n        });\n        for (const pluginName of Object.keys(overrides)) {\n          if (!pluginNames.includes(pluginName)) {\n            console.warn(`You are trying to configure ${pluginName} which is not part of ${name}.\\n` + `Try to put it before or after, for example\\n\\n` + `plugins: [\\n` + `  {\\n` + `    name: '${name}',\\n` + `  },\\n` + `  '${pluginName}'\\n` + `]\\n`);\n          }\n        }\n      }\n      invokePlugins(ast, info, plugins, overrides, globalOverrides);\n    }\n  };\n};\nexports.createPreset = createPreset;","map":{"version":3,"names":["visit","require","invokePlugins","ast","info","plugins","overrides","globalOverrides","plugin","override","name","params","visitor","fn","exports","createPreset","_ref","floatPrecision","pluginNames","map","_ref2","pluginName","Object","keys","includes","console","warn"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/svgo/plugins.js"],"sourcesContent":["'use strict';\n\nconst { visit } = require('../xast.js');\n\n/**\n * Plugins engine.\n *\n * @module plugins\n *\n * @param {Object} ast input ast\n * @param {Object} info extra information\n * @param {Array} plugins plugins object from config\n * @return {Object} output ast\n */\nconst invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {\n  for (const plugin of plugins) {\n    const override = overrides == null ? null : overrides[plugin.name];\n    if (override === false) {\n      continue;\n    }\n    const params = { ...plugin.params, ...globalOverrides, ...override };\n\n    const visitor = plugin.fn(ast, params, info);\n    if (visitor != null) {\n      visit(ast, visitor);\n    }\n  }\n};\nexports.invokePlugins = invokePlugins;\n\nconst createPreset = ({ name, plugins }) => {\n  return {\n    name,\n    fn: (ast, params, info) => {\n      const { floatPrecision, overrides } = params;\n      const globalOverrides = {};\n      if (floatPrecision != null) {\n        globalOverrides.floatPrecision = floatPrecision;\n      }\n      if (overrides) {\n        const pluginNames = plugins.map(({ name }) => name);\n        for (const pluginName of Object.keys(overrides)) {\n          if (!pluginNames.includes(pluginName)) {\n            console.warn(\n              `You are trying to configure ${pluginName} which is not part of ${name}.\\n` +\n                `Try to put it before or after, for example\\n\\n` +\n                `plugins: [\\n` +\n                `  {\\n` +\n                `    name: '${name}',\\n` +\n                `  },\\n` +\n                `  '${pluginName}'\\n` +\n                `]\\n`\n            );\n          }\n        }\n      }\n      invokePlugins(ast, info, plugins, overrides, globalOverrides);\n    },\n  };\n};\nexports.createPreset = createPreset;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,eAAe,KAAK;EACxE,KAAK,MAAMC,MAAM,IAAIH,OAAO,EAAE;IAC5B,MAAMI,QAAQ,GAAGH,SAAS,IAAI,IAAI,GAAG,IAAI,GAAGA,SAAS,CAACE,MAAM,CAACE,IAAI,CAAC;IAClE,IAAID,QAAQ,KAAK,KAAK,EAAE;MACtB;IACF;IACA,MAAME,MAAM,GAAG;MAAE,GAAGH,MAAM,CAACG,MAAM;MAAE,GAAGJ,eAAe;MAAE,GAAGE;IAAS,CAAC;IAEpE,MAAMG,OAAO,GAAGJ,MAAM,CAACK,EAAE,CAACV,GAAG,EAAEQ,MAAM,EAAEP,IAAI,CAAC;IAC5C,IAAIQ,OAAO,IAAI,IAAI,EAAE;MACnBZ,KAAK,CAACG,GAAG,EAAES,OAAO,CAAC;IACrB;EACF;AACF,CAAC;AACDE,OAAO,CAACZ,aAAa,GAAGA,aAAa;AAErC,MAAMa,YAAY,GAAGC,IAAA,IAAuB;EAAA,IAAtB;IAAEN,IAAI;IAAEL;EAAQ,CAAC,GAAAW,IAAA;EACrC,OAAO;IACLN,IAAI;IACJG,EAAE,EAAEA,CAACV,GAAG,EAAEQ,MAAM,EAAEP,IAAI,KAAK;MACzB,MAAM;QAAEa,cAAc;QAAEX;MAAU,CAAC,GAAGK,MAAM;MAC5C,MAAMJ,eAAe,GAAG,CAAC,CAAC;MAC1B,IAAIU,cAAc,IAAI,IAAI,EAAE;QAC1BV,eAAe,CAACU,cAAc,GAAGA,cAAc;MACjD;MACA,IAAIX,SAAS,EAAE;QACb,MAAMY,WAAW,GAAGb,OAAO,CAACc,GAAG,CAACC,KAAA;UAAA,IAAC;YAAEV;UAAK,CAAC,GAAAU,KAAA;UAAA,OAAKV,IAAI;QAAA,EAAC;QACnD,KAAK,MAAMW,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACjB,SAAS,CAAC,EAAE;UAC/C,IAAI,CAACY,WAAW,CAACM,QAAQ,CAACH,UAAU,CAAC,EAAE;YACrCI,OAAO,CAACC,IAAI,CACT,+BAA8BL,UAAW,yBAAwBX,IAAK,KAAI,GACxE,gDAA+C,GAC/C,cAAa,GACb,OAAM,GACN,cAAaA,IAAK,MAAK,GACvB,QAAO,GACP,MAAKW,UAAW,KAAI,GACpB,KACL,CAAC;UACH;QACF;MACF;MACAnB,aAAa,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,eAAe,CAAC;IAC/D;EACF,CAAC;AACH,CAAC;AACDO,OAAO,CAACC,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}