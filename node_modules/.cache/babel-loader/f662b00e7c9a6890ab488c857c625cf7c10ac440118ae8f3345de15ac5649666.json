{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _babel = _interopRequireWildcard(require(\"@babel/core\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nconst {\n  types: t\n} = _babel.default || _babel;\nclass ImportsCache {\n  constructor(resolver) {\n    this._imports = new WeakMap();\n    this._anonymousImports = new WeakMap();\n    this._lastImports = new WeakMap();\n    this._resolver = resolver;\n  }\n  storeAnonymous(programPath, url,\n  // eslint-disable-next-line no-undef\n  getVal) {\n    const key = this._normalizeKey(programPath, url);\n    const imports = this._ensure(this._anonymousImports, programPath, Set);\n    if (imports.has(key)) return;\n    const node = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)));\n    imports.add(key);\n    this._injectImport(programPath, node);\n  }\n  storeNamed(programPath, url, name, getVal) {\n    const key = this._normalizeKey(programPath, url, name);\n    const imports = this._ensure(this._imports, programPath, Map);\n    if (!imports.has(key)) {\n      const {\n        node,\n        name: id\n      } = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)), t.identifier(name));\n      imports.set(key, id);\n      this._injectImport(programPath, node);\n    }\n    return t.identifier(imports.get(key));\n  }\n  _injectImport(programPath, node) {\n    const lastImport = this._lastImports.get(programPath);\n    let newNodes;\n    if (lastImport && lastImport.node &&\n    // Sometimes the AST is modified and the \"last import\"\n    // we have has been replaced\n    lastImport.parent === programPath.node && lastImport.container === programPath.node.body) {\n      newNodes = lastImport.insertAfter(node);\n    } else {\n      newNodes = programPath.unshiftContainer(\"body\", node);\n    }\n    const newNode = newNodes[newNodes.length - 1];\n    this._lastImports.set(programPath, newNode);\n    /*\n    let lastImport;\n     programPath.get(\"body\").forEach(path => {\n      if (path.isImportDeclaration()) lastImport = path;\n      if (\n        path.isExpressionStatement() &&\n        isRequireCall(path.get(\"expression\"))\n      ) {\n        lastImport = path;\n      }\n      if (\n        path.isVariableDeclaration() &&\n        path.get(\"declarations\").length === 1 &&\n        (isRequireCall(path.get(\"declarations.0.init\")) ||\n          (path.get(\"declarations.0.init\").isMemberExpression() &&\n            isRequireCall(path.get(\"declarations.0.init.object\"))))\n      ) {\n        lastImport = path;\n      }\n    });*/\n  }\n\n  _ensure(map, programPath, Collection) {\n    let collection = map.get(programPath);\n    if (!collection) {\n      collection = new Collection();\n      map.set(programPath, collection);\n    }\n    return collection;\n  }\n  _normalizeKey(programPath, url) {\n    let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    const {\n      sourceType\n    } = programPath.node; // If we rely on the imported binding (the \"name\" parameter), we also need to cache\n    // based on the sourceType. This is because the module transforms change the names\n    // of the import variables.\n\n    return `${name && sourceType}::${url}::${name}`;\n  }\n}\nexports.default = ImportsCache;","map":{"version":3,"names":["exports","__esModule","default","_babel","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","types","t","ImportsCache","constructor","resolver","_imports","_anonymousImports","_lastImports","_resolver","storeAnonymous","programPath","url","getVal","_normalizeKey","imports","_ensure","Set","node","sourceType","stringLiteral","add","_injectImport","storeNamed","name","Map","id","identifier","lastImport","newNodes","parent","container","body","insertAfter","unshiftContainer","newNode","length","map","Collection","collection","arguments","undefined"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/@babel/helper-define-polyfill-provider/lib/imports-cache.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _babel = _interopRequireWildcard(require(\"@babel/core\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst {\n  types: t\n} = _babel.default || _babel;\n\nclass ImportsCache {\n  constructor(resolver) {\n    this._imports = new WeakMap();\n    this._anonymousImports = new WeakMap();\n    this._lastImports = new WeakMap();\n    this._resolver = resolver;\n  }\n\n  storeAnonymous(programPath, url, // eslint-disable-next-line no-undef\n  getVal) {\n    const key = this._normalizeKey(programPath, url);\n\n    const imports = this._ensure(this._anonymousImports, programPath, Set);\n\n    if (imports.has(key)) return;\n    const node = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)));\n    imports.add(key);\n\n    this._injectImport(programPath, node);\n  }\n\n  storeNamed(programPath, url, name, getVal) {\n    const key = this._normalizeKey(programPath, url, name);\n\n    const imports = this._ensure(this._imports, programPath, Map);\n\n    if (!imports.has(key)) {\n      const {\n        node,\n        name: id\n      } = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)), t.identifier(name));\n      imports.set(key, id);\n\n      this._injectImport(programPath, node);\n    }\n\n    return t.identifier(imports.get(key));\n  }\n\n  _injectImport(programPath, node) {\n    const lastImport = this._lastImports.get(programPath);\n\n    let newNodes;\n\n    if (lastImport && lastImport.node && // Sometimes the AST is modified and the \"last import\"\n    // we have has been replaced\n    lastImport.parent === programPath.node && lastImport.container === programPath.node.body) {\n      newNodes = lastImport.insertAfter(node);\n    } else {\n      newNodes = programPath.unshiftContainer(\"body\", node);\n    }\n\n    const newNode = newNodes[newNodes.length - 1];\n\n    this._lastImports.set(programPath, newNode);\n    /*\n    let lastImport;\n     programPath.get(\"body\").forEach(path => {\n      if (path.isImportDeclaration()) lastImport = path;\n      if (\n        path.isExpressionStatement() &&\n        isRequireCall(path.get(\"expression\"))\n      ) {\n        lastImport = path;\n      }\n      if (\n        path.isVariableDeclaration() &&\n        path.get(\"declarations\").length === 1 &&\n        (isRequireCall(path.get(\"declarations.0.init\")) ||\n          (path.get(\"declarations.0.init\").isMemberExpression() &&\n            isRequireCall(path.get(\"declarations.0.init.object\"))))\n      ) {\n        lastImport = path;\n      }\n    });*/\n\n  }\n\n  _ensure(map, programPath, Collection) {\n    let collection = map.get(programPath);\n\n    if (!collection) {\n      collection = new Collection();\n      map.set(programPath, collection);\n    }\n\n    return collection;\n  }\n\n  _normalizeKey(programPath, url, name = \"\") {\n    const {\n      sourceType\n    } = programPath.node; // If we rely on the imported binding (the \"name\" parameter), we also need to cache\n    // based on the sourceType. This is because the module transforms change the names\n    // of the import variables.\n\n    return `${name && sourceType}::${url}::${name}`;\n  }\n\n}\n\nexports.default = ImportsCache;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}