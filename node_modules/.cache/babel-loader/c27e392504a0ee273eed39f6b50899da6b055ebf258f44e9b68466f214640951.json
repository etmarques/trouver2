{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar transformTypeScript = require('@babel/plugin-transform-typescript');\nrequire('@babel/plugin-syntax-jsx');\nvar transformModulesCommonJS = require('@babel/plugin-transform-modules-commonjs');\nvar helperValidatorOption = require('@babel/helper-validator-option');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar transformTypeScript__default = /*#__PURE__*/_interopDefaultLegacy(transformTypeScript);\nvar transformModulesCommonJS__default = /*#__PURE__*/_interopDefaultLegacy(transformModulesCommonJS);\nconst v = new helperValidatorOption.OptionValidator(\"@babel/preset-typescript\");\nfunction normalizeOptions() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    allowNamespaces = true,\n    jsxPragma,\n    onlyRemoveTypeImports\n  } = options;\n  const TopLevelOptions = {\n    ignoreExtensions: \"ignoreExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n    allExtensions: \"allExtensions\",\n    isTSX: \"isTSX\"\n  };\n  const jsxPragmaFrag = v.validateStringOption(TopLevelOptions.jsxPragmaFrag, options.jsxPragmaFrag, \"React.Fragment\");\n  {\n    var allExtensions = v.validateBooleanOption(TopLevelOptions.allExtensions, options.allExtensions, false);\n    var isTSX = v.validateBooleanOption(TopLevelOptions.isTSX, options.isTSX, false);\n    if (isTSX) {\n      v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n    }\n  }\n  const ignoreExtensions = v.validateBooleanOption(TopLevelOptions.ignoreExtensions, options.ignoreExtensions, false);\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);\n  if (disallowAmbiguousJSXLike) {\n    {\n      v.invariant(allExtensions, \"disallowAmbiguousJSXLike:true requires allExtensions:true\");\n    }\n  }\n  const optimizeConstEnums = v.validateBooleanOption(TopLevelOptions.optimizeConstEnums, options.optimizeConstEnums, false);\n  const normalized = {\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  };\n  {\n    normalized.allExtensions = allExtensions;\n    normalized.isTSX = isTSX;\n  }\n  return normalized;\n}\nvar index = helperPluginUtils.declarePreset((api, opts) => {\n  api.assertVersion(7);\n  const {\n    allExtensions,\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  } = normalizeOptions(opts);\n  const pluginOptions = disallowAmbiguousJSXLike => ({\n    allowDeclareFields: opts.allowDeclareFields,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums\n  });\n  const getPlugins = (isTSX, disallowAmbiguousJSXLike) => {\n    {\n      return [[transformTypeScript__default[\"default\"], Object.assign({\n        isTSX\n      }, pluginOptions(disallowAmbiguousJSXLike))]];\n    }\n  };\n  const disableExtensionDetect = allExtensions || ignoreExtensions;\n  return {\n    overrides: disableExtensionDetect ? [{\n      plugins: getPlugins(isTSX, disallowAmbiguousJSXLike)\n    }] : [{\n      test: /\\.ts$/,\n      plugins: getPlugins(false, false)\n    }, {\n      test: /\\.mts$/,\n      sourceType: \"module\",\n      plugins: getPlugins(false, true)\n    }, {\n      test: /\\.cts$/,\n      sourceType: \"unambiguous\",\n      plugins: [[transformModulesCommonJS__default[\"default\"], {\n        allowTopLevelThis: true\n      }], [transformTypeScript__default[\"default\"], pluginOptions(true)]]\n    }, {\n      test: /\\.tsx$/,\n      plugins: getPlugins(true, false)\n    }]\n  };\n});\nexports[\"default\"] = index;","map":{"version":3,"names":["v","helperValidatorOption","OptionValidator","normalizeOptions","options","arguments","length","undefined","allowNamespaces","jsxPragma","onlyRemoveTypeImports","TopLevelOptions","ignoreExtensions","disallowAmbiguousJSXLike","jsxPragmaFrag","optimizeConstEnums","allExtensions","isTSX","validateStringOption","validateBooleanOption","invariant","normalized","index","helperPluginUtils","declarePreset","api","opts","assertVersion","pluginOptions","allowDeclareFields","getPlugins","transformTypeScript__default","Object","assign","disableExtensionDetect","overrides","plugins","test","sourceType","transformModulesCommonJS__default","allowTopLevelThis"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@babel\\preset-typescript\\src\\normalize-options.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@babel\\preset-typescript\\src\\index.ts"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport interface Options {\n  ignoreExtensions?: boolean;\n  allowDeclareFields?: boolean;\n  allowNamespaces?: boolean;\n  disallowAmbiguousJSXLike?: boolean;\n  jsxPragma?: string;\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n\n  // TODO: Remove in Babel 8\n  allExtensions?: boolean;\n  isTSX?: boolean;\n}\n\nexport default function normalizeOptions(options: Options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  const TopLevelOptions = {\n    ignoreExtensions: \"ignoreExtensions\",\n    allowNamespaces: \"allowNamespaces\",\n    disallowAmbiguousJSXLike: \"disallowAmbiguousJSXLike\",\n    jsxPragma: \"jsxPragma\",\n    jsxPragmaFrag: \"jsxPragmaFrag\",\n    onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    optimizeConstEnums: \"optimizeConstEnums\",\n\n    // TODO: Remove in Babel 8\n    allExtensions: \"allExtensions\",\n    isTSX: \"isTSX\",\n  };\n\n  if (process.env.BABEL_8_BREAKING) {\n    v.invariant(\n      !(\"allExtensions\" in options) && !(\"isTSX\" in options),\n      \"The .allExtensions and .isTSX options have been removed.\\n\" +\n        \"If you want to disable JSX detection based on file extensions, \" +\n        \"you can set the .ignoreExtensions option to true.\\n\" +\n        \"If you want to force JSX parsing, you can enable the \" +\n        \"@babel/plugin-syntax-jsx plugin.\",\n    );\n\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    TopLevelOptions.jsxPragmaFrag,\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var allExtensions = v.validateBooleanOption(\n      TopLevelOptions.allExtensions,\n      options.allExtensions,\n      false,\n    );\n\n    // eslint-disable-next-line no-var\n    var isTSX = v.validateBooleanOption(\n      TopLevelOptions.isTSX,\n      options.isTSX,\n      false,\n    );\n    if (isTSX) {\n      v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n    }\n  }\n\n  const ignoreExtensions = v.validateBooleanOption(\n    TopLevelOptions.ignoreExtensions,\n    options.ignoreExtensions,\n    false,\n  );\n\n  const disallowAmbiguousJSXLike = v.validateBooleanOption(\n    TopLevelOptions.disallowAmbiguousJSXLike,\n    options.disallowAmbiguousJSXLike,\n    false,\n  );\n  if (disallowAmbiguousJSXLike) {\n    if (process.env.BABEL_8_BREAKING) {\n      v.invariant(\n        ignoreExtensions,\n        \"disallowAmbiguousJSXLike:true requires ignoreExtensions:true\",\n      );\n    } else {\n      v.invariant(\n        allExtensions,\n        \"disallowAmbiguousJSXLike:true requires allExtensions:true\",\n      );\n    }\n  }\n\n  const optimizeConstEnums = v.validateBooleanOption(\n    TopLevelOptions.optimizeConstEnums,\n    options.optimizeConstEnums,\n    false,\n  );\n\n  const normalized: Options = {\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  };\n  if (!process.env.BABEL_8_BREAKING) {\n    normalized.allExtensions = allExtensions;\n    normalized.isTSX = isTSX;\n  }\n  return normalized;\n}\n","import { declarePreset } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport syntaxJSX from \"@babel/plugin-syntax-jsx\";\nimport transformModulesCommonJS from \"@babel/plugin-transform-modules-commonjs\";\nimport normalizeOptions from \"./normalize-options\";\nimport type { Options } from \"./normalize-options\";\n\nexport default declarePreset((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    ignoreExtensions,\n    allowNamespaces,\n    disallowAmbiguousJSXLike,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n    optimizeConstEnums,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? (disallowAmbiguousJSXLike: boolean) => ({\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      })\n    : (disallowAmbiguousJSXLike: boolean) => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        disallowAmbiguousJSXLike,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n        optimizeConstEnums,\n      });\n\n  const getPlugins = (isTSX: boolean, disallowAmbiguousJSXLike: boolean) => {\n    if (process.env.BABEL_8_BREAKING) {\n      const tsPlugin = [\n        transformTypeScript,\n        pluginOptions(disallowAmbiguousJSXLike),\n      ];\n      return isTSX ? [tsPlugin, syntaxJSX] : [tsPlugin];\n    } else {\n      return [\n        [\n          transformTypeScript,\n          { isTSX, ...pluginOptions(disallowAmbiguousJSXLike) },\n        ],\n      ];\n    }\n  };\n\n  const disableExtensionDetect = allExtensions || ignoreExtensions;\n\n  return {\n    overrides: disableExtensionDetect\n      ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }]\n      : // Only set 'test' if explicitly requested, since it requires that\n        // Babel is being called with a filename.\n        [\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.ts$/\n              : filename => filename == null || filename.endsWith(\".ts\"),\n            plugins: getPlugins(false, false),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.mts$/\n              : filename => filename?.endsWith(\".mts\"),\n            sourceType: \"module\",\n            plugins: getPlugins(false, true),\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.cts$/\n              : filename => filename?.endsWith(\".cts\"),\n            sourceType: \"unambiguous\",\n            plugins: [\n              [transformModulesCommonJS, { allowTopLevelThis: true }],\n              [transformTypeScript, pluginOptions(true)],\n            ],\n          },\n          {\n            test: !process.env.BABEL_8_BREAKING\n              ? /\\.tsx$/\n              : filename => filename?.endsWith(\".tsx\"),\n            // disallowAmbiguousJSXLike is a no-op when parsing TSX, since it's\n            // always disallowed.\n            plugins: getPlugins(true, false),\n          },\n        ],\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}