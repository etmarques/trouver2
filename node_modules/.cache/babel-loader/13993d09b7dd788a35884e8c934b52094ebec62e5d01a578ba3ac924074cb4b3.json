{"ast":null,"code":"'use strict';\n\nconst os = require('os');\nconst fs = require('fs');\nconst {\n  pathToFileURL\n} = require('url');\nconst path = require('path');\nconst {\n  optimize: optimizeAgnostic\n} = require('./svgo.js');\nconst importConfig = async configFile => {\n  let config;\n  // at the moment dynamic import may randomly fail with segfault\n  // to workaround this for some users .cjs extension is loaded\n  // exclusively with require\n  if (configFile.endsWith('.cjs')) {\n    config = require(configFile);\n  } else {\n    // dynamic import expects file url instead of path and may fail\n    // when windows path is provided\n    const {\n      default: imported\n    } = await import(pathToFileURL(configFile));\n    config = imported;\n  }\n  if (config == null || typeof config !== 'object' || Array.isArray(config)) {\n    throw Error(`Invalid config file \"${configFile}\"`);\n  }\n  return config;\n};\nconst isFile = async file => {\n  try {\n    const stats = await fs.promises.stat(file);\n    return stats.isFile();\n  } catch {\n    return false;\n  }\n};\nconst loadConfig = async function (configFile) {\n  let cwd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.cwd();\n  if (configFile != null) {\n    if (path.isAbsolute(configFile)) {\n      return await importConfig(configFile);\n    } else {\n      return await importConfig(path.join(cwd, configFile));\n    }\n  }\n  let dir = cwd;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const js = path.join(dir, 'svgo.config.js');\n    if (await isFile(js)) {\n      return await importConfig(js);\n    }\n    const mjs = path.join(dir, 'svgo.config.mjs');\n    if (await isFile(mjs)) {\n      return await importConfig(mjs);\n    }\n    const cjs = path.join(dir, 'svgo.config.cjs');\n    if (await isFile(cjs)) {\n      return await importConfig(cjs);\n    }\n    const parent = path.dirname(dir);\n    if (dir === parent) {\n      return null;\n    }\n    dir = parent;\n  }\n};\nexports.loadConfig = loadConfig;\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  return optimizeAgnostic(input, {\n    ...config,\n    js2svg: {\n      // platform specific default for end of line\n      eol: os.EOL === '\\r\\n' ? 'crlf' : 'lf',\n      ...config.js2svg\n    }\n  });\n};\nexports.optimize = optimize;","map":{"version":3,"names":["os","require","fs","pathToFileURL","path","optimize","optimizeAgnostic","importConfig","configFile","config","endsWith","default","imported","Array","isArray","Error","isFile","file","stats","promises","stat","loadConfig","cwd","arguments","length","undefined","process","isAbsolute","join","dir","js","mjs","cjs","parent","dirname","exports","input","js2svg","eol","EOL"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/lib/svgo-node.js"],"sourcesContent":["'use strict';\n\nconst os = require('os');\nconst fs = require('fs');\nconst { pathToFileURL } = require('url');\nconst path = require('path');\nconst { optimize: optimizeAgnostic } = require('./svgo.js');\n\nconst importConfig = async (configFile) => {\n  let config;\n  // at the moment dynamic import may randomly fail with segfault\n  // to workaround this for some users .cjs extension is loaded\n  // exclusively with require\n  if (configFile.endsWith('.cjs')) {\n    config = require(configFile);\n  } else {\n    // dynamic import expects file url instead of path and may fail\n    // when windows path is provided\n    const { default: imported } = await import(pathToFileURL(configFile));\n    config = imported;\n  }\n  if (config == null || typeof config !== 'object' || Array.isArray(config)) {\n    throw Error(`Invalid config file \"${configFile}\"`);\n  }\n  return config;\n};\n\nconst isFile = async (file) => {\n  try {\n    const stats = await fs.promises.stat(file);\n    return stats.isFile();\n  } catch {\n    return false;\n  }\n};\n\nconst loadConfig = async (configFile, cwd = process.cwd()) => {\n  if (configFile != null) {\n    if (path.isAbsolute(configFile)) {\n      return await importConfig(configFile);\n    } else {\n      return await importConfig(path.join(cwd, configFile));\n    }\n  }\n  let dir = cwd;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const js = path.join(dir, 'svgo.config.js');\n    if (await isFile(js)) {\n      return await importConfig(js);\n    }\n    const mjs = path.join(dir, 'svgo.config.mjs');\n    if (await isFile(mjs)) {\n      return await importConfig(mjs);\n    }\n    const cjs = path.join(dir, 'svgo.config.cjs');\n    if (await isFile(cjs)) {\n      return await importConfig(cjs);\n    }\n    const parent = path.dirname(dir);\n    if (dir === parent) {\n      return null;\n    }\n    dir = parent;\n  }\n};\nexports.loadConfig = loadConfig;\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  return optimizeAgnostic(input, {\n    ...config,\n    js2svg: {\n      // platform specific default for end of line\n      eol: os.EOL === '\\r\\n' ? 'crlf' : 'lf',\n      ...config.js2svg,\n    },\n  });\n};\nexports.optimize = optimize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}