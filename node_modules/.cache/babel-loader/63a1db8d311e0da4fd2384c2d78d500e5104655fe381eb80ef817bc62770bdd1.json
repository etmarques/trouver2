{"ast":null,"code":"'use strict';\n\nvar addJSXAttribute = require('@svgr/babel-plugin-add-jsx-attribute');\nvar removeJSXAttribute = require('@svgr/babel-plugin-remove-jsx-attribute');\nvar removeJSXEmptyExpression = require('@svgr/babel-plugin-remove-jsx-empty-expression');\nvar replaceJSXAttributeValue = require('@svgr/babel-plugin-replace-jsx-attribute-value');\nvar svgDynamicTitle = require('@svgr/babel-plugin-svg-dynamic-title');\nvar svgEmDimensions = require('@svgr/babel-plugin-svg-em-dimensions');\nvar transformReactNativeSVG = require('@svgr/babel-plugin-transform-react-native-svg');\nvar transformSvgComponent = require('@svgr/babel-plugin-transform-svg-component');\nconst getAttributeValue = value => {\n  const literal = typeof value === \"string\" && value.startsWith(\"{\") && value.endsWith(\"}\");\n  return {\n    value: literal ? value.slice(1, -1) : value,\n    literal\n  };\n};\nconst propsToAttributes = props => {\n  return Object.keys(props).map(name => {\n    const {\n      literal,\n      value\n    } = getAttributeValue(props[name]);\n    return {\n      name,\n      literal,\n      value\n    };\n  });\n};\nfunction replaceMapToValues(replaceMap) {\n  return Object.keys(replaceMap).map(value => {\n    const {\n      literal,\n      value: newValue\n    } = getAttributeValue(replaceMap[value]);\n    return {\n      value,\n      newValue,\n      literal\n    };\n  });\n}\nconst plugin = (_, opts) => {\n  let toRemoveAttributes = [\"version\"];\n  let toAddAttributes = [];\n  if (opts.svgProps) {\n    toAddAttributes = [...toAddAttributes, ...propsToAttributes(opts.svgProps)];\n  }\n  if (opts.ref) {\n    toAddAttributes = [...toAddAttributes, {\n      name: \"ref\",\n      value: \"ref\",\n      literal: true\n    }];\n  }\n  if (opts.titleProp) {\n    toAddAttributes = [...toAddAttributes, {\n      name: \"aria-labelledby\",\n      value: \"titleId\",\n      literal: true\n    }];\n  }\n  if (opts.descProp) {\n    toAddAttributes = [...toAddAttributes, {\n      name: \"aria-describedby\",\n      value: \"descId\",\n      literal: true\n    }];\n  }\n  if (opts.expandProps) {\n    toAddAttributes = [...toAddAttributes, {\n      name: \"props\",\n      spread: true,\n      position: opts.expandProps === \"start\" || opts.expandProps === \"end\" ? opts.expandProps : void 0\n    }];\n  }\n  if (!opts.dimensions) {\n    toRemoveAttributes = [...toRemoveAttributes, \"width\", \"height\"];\n  }\n  const plugins = [[transformSvgComponent, opts], ...(opts.icon !== false && opts.dimensions ? [[svgEmDimensions, opts.icon !== true ? {\n    width: opts.icon,\n    height: opts.icon\n  } : opts.native ? {\n    width: 24,\n    height: 24\n  } : {}]] : []), [removeJSXAttribute, {\n    elements: [\"svg\", \"Svg\"],\n    attributes: toRemoveAttributes\n  }], [addJSXAttribute, {\n    elements: [\"svg\", \"Svg\"],\n    attributes: toAddAttributes\n  }], removeJSXEmptyExpression];\n  if (opts.replaceAttrValues) {\n    plugins.push([replaceJSXAttributeValue, {\n      values: replaceMapToValues(opts.replaceAttrValues)\n    }]);\n  }\n  if (opts.titleProp) {\n    plugins.push(svgDynamicTitle);\n  }\n  if (opts.descProp) {\n    plugins.push([svgDynamicTitle, {\n      tag: \"desc\"\n    }, \"desc\"]);\n  }\n  if (opts.native) {\n    plugins.push(transformReactNativeSVG);\n  }\n  return {\n    plugins\n  };\n};\nmodule.exports = plugin;","map":{"version":3,"names":["getAttributeValue","value","literal","startsWith","endsWith","slice","propsToAttributes","props","Object","keys","map","name","replaceMapToValues","replaceMap","newValue","plugin","_","opts","toRemoveAttributes","toAddAttributes","svgProps","ref","titleProp","descProp","expandProps","spread","position","dimensions","plugins","transformSvgComponent","icon","svgEmDimensions","width","height","native","removeJSXAttribute","elements","attributes","addJSXAttribute","removeJSXEmptyExpression","replaceAttrValues","push","replaceJSXAttributeValue","values","svgDynamicTitle","tag","transformReactNativeSVG"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-preset\\src\\index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ConfigAPI } from '@babel/core'\nimport addJSXAttribute, {\n  Attribute,\n} from '@svgr/babel-plugin-add-jsx-attribute'\nimport removeJSXAttribute from '@svgr/babel-plugin-remove-jsx-attribute'\nimport removeJSXEmptyExpression from '@svgr/babel-plugin-remove-jsx-empty-expression'\nimport replaceJSXAttributeValue, {\n  Value,\n} from '@svgr/babel-plugin-replace-jsx-attribute-value'\nimport svgDynamicTitle from '@svgr/babel-plugin-svg-dynamic-title'\nimport svgEmDimensions from '@svgr/babel-plugin-svg-em-dimensions'\nimport transformReactNativeSVG from '@svgr/babel-plugin-transform-react-native-svg'\nimport transformSvgComponent, {\n  Options as TransformOptions,\n} from '@svgr/babel-plugin-transform-svg-component'\n\nexport interface Options extends TransformOptions {\n  ref?: boolean\n  titleProp?: boolean\n  descProp?: boolean\n  expandProps?: boolean | 'start' | 'end'\n  dimensions?: boolean\n  icon?: boolean | string | number\n  native?: boolean\n  svgProps?: { [key: string]: string }\n  replaceAttrValues?: { [key: string]: string }\n}\n\nconst getAttributeValue = (value: string) => {\n  const literal =\n    typeof value === 'string' && value.startsWith('{') && value.endsWith('}')\n  return { value: literal ? value.slice(1, -1) : value, literal }\n}\n\nconst propsToAttributes = (props: { [key: string]: string }): Attribute[] => {\n  return Object.keys(props).map((name) => {\n    const { literal, value } = getAttributeValue(props[name])\n    return { name, literal, value }\n  })\n}\n\nfunction replaceMapToValues(replaceMap: { [key: string]: string }): Value[] {\n  return Object.keys(replaceMap).map((value) => {\n    const { literal, value: newValue } = getAttributeValue(replaceMap[value])\n    return { value, newValue, literal }\n  })\n}\n\nconst plugin = (_: ConfigAPI, opts: Options) => {\n  let toRemoveAttributes = ['version']\n  let toAddAttributes: Attribute[] = []\n\n  if (opts.svgProps) {\n    toAddAttributes = [...toAddAttributes, ...propsToAttributes(opts.svgProps)]\n  }\n\n  if (opts.ref) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'ref',\n        value: 'ref',\n        literal: true,\n      },\n    ]\n  }\n\n  if (opts.titleProp) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'aria-labelledby',\n        value: 'titleId',\n        literal: true,\n      },\n    ]\n  }\n\n  if (opts.descProp) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'aria-describedby',\n        value: 'descId',\n        literal: true,\n      },\n    ]\n  }\n\n  if (opts.expandProps) {\n    toAddAttributes = [\n      ...toAddAttributes,\n      {\n        name: 'props',\n        spread: true,\n        position:\n          opts.expandProps === 'start' || opts.expandProps === 'end'\n            ? opts.expandProps\n            : undefined,\n      },\n    ]\n  }\n\n  if (!opts.dimensions) {\n    toRemoveAttributes = [...toRemoveAttributes, 'width', 'height']\n  }\n\n  const plugins: any[] = [\n    [transformSvgComponent, opts],\n    ...(opts.icon !== false && opts.dimensions\n      ? [\n          [\n            svgEmDimensions,\n            opts.icon !== true\n              ? { width: opts.icon, height: opts.icon }\n              : opts.native\n              ? { width: 24, height: 24 }\n              : {},\n          ],\n        ]\n      : []),\n    [\n      removeJSXAttribute,\n      { elements: ['svg', 'Svg'], attributes: toRemoveAttributes },\n    ],\n    [\n      addJSXAttribute,\n      { elements: ['svg', 'Svg'], attributes: toAddAttributes },\n    ],\n    removeJSXEmptyExpression,\n  ]\n\n  if (opts.replaceAttrValues) {\n    plugins.push([\n      replaceJSXAttributeValue,\n      { values: replaceMapToValues(opts.replaceAttrValues) },\n    ])\n  }\n\n  if (opts.titleProp) {\n    plugins.push(svgDynamicTitle)\n  }\n\n  if (opts.descProp) {\n    plugins.push([svgDynamicTitle, { tag: 'desc' }, 'desc'])\n  }\n\n  if (opts.native) {\n    plugins.push(transformReactNativeSVG)\n  }\n\n  return { plugins }\n}\n\nexport default plugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}