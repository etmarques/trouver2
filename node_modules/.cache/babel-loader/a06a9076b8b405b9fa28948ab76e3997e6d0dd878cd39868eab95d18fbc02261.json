{"ast":null,"code":"'use strict';\n\nvar core = require('@babel/core');\nconst elements = [\"svg\", \"Svg\"];\nconst getValue = raw => {\n  if (raw === void 0) return core.types.stringLiteral(\"1em\");\n  switch (typeof raw) {\n    case \"number\":\n      return core.types.jsxExpressionContainer(core.types.numericLiteral(raw));\n    case \"string\":\n      return core.types.stringLiteral(raw);\n    default:\n      return core.types.stringLiteral(\"1em\");\n  }\n};\nconst plugin = (_, opts) => ({\n  visitor: {\n    JSXOpeningElement(path) {\n      if (!elements.some(element => path.get(\"name\").isJSXIdentifier({\n        name: element\n      }))) return;\n      const values = {\n        width: getValue(opts.width),\n        height: getValue(opts.height)\n      };\n      const requiredAttributes = Object.keys(values);\n      path.get(\"attributes\").forEach(attributePath => {\n        if (!attributePath.isJSXAttribute()) return;\n        const namePath = attributePath.get(\"name\");\n        if (!namePath.isJSXIdentifier()) return;\n        const index = requiredAttributes.indexOf(namePath.node.name);\n        if (index === -1) return;\n        const valuePath = attributePath.get(\"value\");\n        valuePath.replaceWith(values[namePath.node.name]);\n        requiredAttributes.splice(index, 1);\n      });\n      path.pushContainer(\"attributes\", requiredAttributes.map(attr => core.types.jsxAttribute(core.types.jsxIdentifier(attr), values[attr])));\n    }\n  }\n});\nmodule.exports = plugin;","map":{"version":3,"names":["elements","getValue","raw","core","types","stringLiteral","jsxExpressionContainer","numericLiteral","plugin","_","opts","visitor","JSXOpeningElement","path","some","element","get","isJSXIdentifier","name","values","width","height","requiredAttributes","Object","keys","forEach","attributePath","isJSXAttribute","namePath","index","indexOf","node","valuePath","replaceWith","splice","pushContainer","map","attr","jsxAttribute","jsxIdentifier"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-svg-em-dimensions\\src\\index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { types as t, NodePath, ConfigAPI } from '@babel/core'\n\nconst elements = ['svg', 'Svg']\n\nexport interface Options {\n  width: number | string\n  height: number | string\n}\n\nconst getValue = (raw: undefined | number | string) => {\n  if (raw === undefined) return t.stringLiteral('1em')\n  switch (typeof raw) {\n    case 'number':\n      return t.jsxExpressionContainer(t.numericLiteral(raw))\n    case 'string':\n      return t.stringLiteral(raw)\n    default:\n      return t.stringLiteral('1em')\n  }\n}\n\nconst plugin = (_: ConfigAPI, opts: Options) => ({\n  visitor: {\n    JSXOpeningElement(path: NodePath<t.JSXOpeningElement>) {\n      if (\n        !elements.some((element) =>\n          path.get('name').isJSXIdentifier({ name: element }),\n        )\n      )\n        return\n\n      const values = {\n        width: getValue(opts.width),\n        height: getValue(opts.height),\n      }\n      const requiredAttributes = Object.keys(values)\n\n      path.get('attributes').forEach((attributePath) => {\n        if (!attributePath.isJSXAttribute()) return\n        const namePath = attributePath.get('name')\n        if (!namePath.isJSXIdentifier()) return\n        const index = requiredAttributes.indexOf(namePath.node.name)\n\n        if (index === -1) return\n\n        const valuePath = attributePath.get('value')\n        valuePath.replaceWith(values[namePath.node.name as 'width' | 'height'])\n        requiredAttributes.splice(index, 1)\n      })\n\n      path.pushContainer(\n        'attributes',\n        requiredAttributes.map((attr) =>\n          t.jsxAttribute(\n            t.jsxIdentifier(attr),\n            values[attr as 'width' | 'height'],\n          ),\n        ),\n      )\n    },\n  },\n})\n\nexport default plugin\n"],"mappings":";;;AAGA,MAAMA,QAAA,GAAW,CAAC,OAAO,KAAK;AAO9B,MAAMC,QAAA,GAAYC,GAAqC;EACrD,IAAIA,GAAQ,aAAkB,OAAAC,IAAA,CAAAC,KAAA,CAAEC,aAAA,CAAc,KAAK;EACnD,QAAQ,OAAOH,GAAK;IAClB,KAAK;MACH,OAAOC,IAAA,CAAAC,KAAE,CAAAE,sBAAA,CAAuBH,IAAA,CAAAC,KAAE,CAAAG,cAAA,CAAeL,GAAG,CAAC;IACvD,KAAK;MACI,OAAAC,IAAA,CAAAC,KAAA,CAAEC,aAAA,CAAcH,GAAG;IAC5B;MACS,OAAAC,IAAA,CAAAC,KAAA,CAAEC,aAAA,CAAc,KAAK;EAAA;AAElC;AAEM,MAAAG,MAAA,GAASA,CAACC,CAAA,EAAcC,IAAmB;EAC/CC,OAAS;IACPC,kBAAkBC,IAAqC;MACrD,IACE,CAACb,QAAS,CAAAc,IAAA,CAAMC,OACd,IAAAF,IAAA,CAAKG,GAAI,OAAM,EAAEC,eAAgB;QAAEC,IAAM,EAAAH;MAAA,CAAS,EACpD,EAEA;MAEF,MAAMI,MAAS;QACbC,KAAA,EAAOnB,QAAS,CAAAS,IAAA,CAAKU,KAAK;QAC1BC,MAAA,EAAQpB,QAAS,CAAAS,IAAA,CAAKW,MAAM;MAAA,CAC9B;MACM,MAAAC,kBAAA,GAAqBC,MAAO,CAAAC,IAAA,CAAKL,MAAM;MAE7CN,IAAA,CAAKG,GAAI,aAAY,CAAE,CAAAS,OAAA,CAASC,aAAkB;QAC5C,KAACA,aAAA,CAAcC,cAAe,IAAG;QAC/B,MAAAC,QAAA,GAAWF,aAAc,CAAAV,GAAA,CAAI,MAAM;QACrC,KAACY,QAAA,CAASX,eAAgB,IAAG;QACjC,MAAMY,KAAQ,GAAAP,kBAAA,CAAmBQ,OAAQ,CAAAF,QAAA,CAASG,IAAA,CAAKb,IAAI;QAE3D,IAAIW,KAAU,SAAI;QAEZ,MAAAG,SAAA,GAAYN,aAAc,CAAAV,GAAA,CAAI,OAAO;QAC3CgB,SAAA,CAAUC,WAAY,CAAAd,MAAA,CAAOS,QAAS,CAAAG,IAAA,CAAKb,IAA0B,CAAC;QACnDI,kBAAA,CAAAY,MAAA,CAAOL,KAAA,EAAO,CAAC;MAAA,CACnC;MAEIhB,IAAA,CAAAsB,aAAA,CACH,cACAb,kBAAmB,CAAAc,GAAA,CAAKC,IAAA,IACtBlC,IAAA,CAAAC,KAAE,CAAAkC,YAAA,CACAnC,IAAA,CAAAC,KAAA,CAAEmC,aAAA,CAAcF,IAAI,GACpBlB,MAAA,CAAOkB,IAA0B,EACnC,CACF,CACF;IAAA;EACF;AAEJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}