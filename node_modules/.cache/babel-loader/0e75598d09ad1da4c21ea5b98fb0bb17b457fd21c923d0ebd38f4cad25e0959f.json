{"ast":null,"code":"'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\nconst csso = require('csso');\nexports.name = 'minifyStyles';\nexports.description = 'minifies styles and removes unused styles based on usage data';\n\n/**\n * Minifies styles (<style> element + style attribute) using CSSO\n *\n * @author strarsis <strarsis@gmail.com>\n *\n * @type {import('./plugins-types').Plugin<'minifyStyles'>}\n */\nexports.fn = (_root, _ref) => {\n  let {\n    usage,\n    ...params\n  } = _ref;\n  let enableTagsUsage = true;\n  let enableIdsUsage = true;\n  let enableClassesUsage = true;\n  // force to use usage data even if it unsafe (document contains <script> or on* attributes)\n  let forceUsageDeoptimized = false;\n  if (typeof usage === 'boolean') {\n    enableTagsUsage = usage;\n    enableIdsUsage = usage;\n    enableClassesUsage = usage;\n  } else if (usage) {\n    enableTagsUsage = usage.tags == null ? true : usage.tags;\n    enableIdsUsage = usage.ids == null ? true : usage.ids;\n    enableClassesUsage = usage.classes == null ? true : usage.classes;\n    forceUsageDeoptimized = usage.force == null ? false : usage.force;\n  }\n  /**\n   * @type {Array<XastElement>}\n   */\n  const styleElements = [];\n  /**\n   * @type {Array<XastElement>}\n   */\n  const elementsWithStyleAttributes = [];\n  let deoptimized = false;\n  /**\n   * @type {Set<string>}\n   */\n  const tagsUsage = new Set();\n  /**\n   * @type {Set<string>}\n   */\n  const idsUsage = new Set();\n  /**\n   * @type {Set<string>}\n   */\n  const classesUsage = new Set();\n  return {\n    element: {\n      enter: node => {\n        // detect deoptimisations\n        if (node.name === 'script') {\n          deoptimized = true;\n        }\n        for (const name of Object.keys(node.attributes)) {\n          if (name.startsWith('on')) {\n            deoptimized = true;\n          }\n        }\n        // collect tags, ids and classes usage\n        tagsUsage.add(node.name);\n        if (node.attributes.id != null) {\n          idsUsage.add(node.attributes.id);\n        }\n        if (node.attributes.class != null) {\n          for (const className of node.attributes.class.split(/\\s+/)) {\n            classesUsage.add(className);\n          }\n        }\n        // collect style elements or elements with style attribute\n        if (node.name === 'style' && node.children.length !== 0) {\n          styleElements.push(node);\n        } else if (node.attributes.style != null) {\n          elementsWithStyleAttributes.push(node);\n        }\n      }\n    },\n    root: {\n      exit: () => {\n        /**\n         * @type {csso.Usage}\n         */\n        const cssoUsage = {};\n        if (deoptimized === false || forceUsageDeoptimized === true) {\n          if (enableTagsUsage && tagsUsage.size !== 0) {\n            cssoUsage.tags = Array.from(tagsUsage);\n          }\n          if (enableIdsUsage && idsUsage.size !== 0) {\n            cssoUsage.ids = Array.from(idsUsage);\n          }\n          if (enableClassesUsage && classesUsage.size !== 0) {\n            cssoUsage.classes = Array.from(classesUsage);\n          }\n        }\n        // minify style elements\n        for (const node of styleElements) {\n          if (node.children[0].type === 'text' || node.children[0].type === 'cdata') {\n            const cssText = node.children[0].value;\n            const minified = csso.minify(cssText, {\n              ...params,\n              usage: cssoUsage\n            }).css;\n            // preserve cdata if necessary\n            // TODO split cdata -> text optimisation into separate plugin\n            if (cssText.indexOf('>') >= 0 || cssText.indexOf('<') >= 0) {\n              node.children[0].type = 'cdata';\n              node.children[0].value = minified;\n            } else {\n              node.children[0].type = 'text';\n              node.children[0].value = minified;\n            }\n          }\n        }\n        // minify style attributes\n        for (const node of elementsWithStyleAttributes) {\n          // style attribute\n          const elemStyle = node.attributes.style;\n          node.attributes.style = csso.minifyBlock(elemStyle, {\n            ...params\n          }).css;\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["csso","require","exports","name","description","fn","_root","_ref","usage","params","enableTagsUsage","enableIdsUsage","enableClassesUsage","forceUsageDeoptimized","tags","ids","classes","force","styleElements","elementsWithStyleAttributes","deoptimized","tagsUsage","Set","idsUsage","classesUsage","element","enter","node","Object","keys","attributes","startsWith","add","id","class","className","split","children","length","push","style","root","exit","cssoUsage","size","Array","from","type","cssText","value","minified","minify","css","indexOf","elemStyle","minifyBlock"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/minifyStyles.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\n\nconst csso = require('csso');\n\nexports.name = 'minifyStyles';\nexports.description =\n  'minifies styles and removes unused styles based on usage data';\n\n/**\n * Minifies styles (<style> element + style attribute) using CSSO\n *\n * @author strarsis <strarsis@gmail.com>\n *\n * @type {import('./plugins-types').Plugin<'minifyStyles'>}\n */\nexports.fn = (_root, { usage, ...params }) => {\n  let enableTagsUsage = true;\n  let enableIdsUsage = true;\n  let enableClassesUsage = true;\n  // force to use usage data even if it unsafe (document contains <script> or on* attributes)\n  let forceUsageDeoptimized = false;\n  if (typeof usage === 'boolean') {\n    enableTagsUsage = usage;\n    enableIdsUsage = usage;\n    enableClassesUsage = usage;\n  } else if (usage) {\n    enableTagsUsage = usage.tags == null ? true : usage.tags;\n    enableIdsUsage = usage.ids == null ? true : usage.ids;\n    enableClassesUsage = usage.classes == null ? true : usage.classes;\n    forceUsageDeoptimized = usage.force == null ? false : usage.force;\n  }\n  /**\n   * @type {Array<XastElement>}\n   */\n  const styleElements = [];\n  /**\n   * @type {Array<XastElement>}\n   */\n  const elementsWithStyleAttributes = [];\n  let deoptimized = false;\n  /**\n   * @type {Set<string>}\n   */\n  const tagsUsage = new Set();\n  /**\n   * @type {Set<string>}\n   */\n  const idsUsage = new Set();\n  /**\n   * @type {Set<string>}\n   */\n  const classesUsage = new Set();\n\n  return {\n    element: {\n      enter: (node) => {\n        // detect deoptimisations\n        if (node.name === 'script') {\n          deoptimized = true;\n        }\n        for (const name of Object.keys(node.attributes)) {\n          if (name.startsWith('on')) {\n            deoptimized = true;\n          }\n        }\n        // collect tags, ids and classes usage\n        tagsUsage.add(node.name);\n        if (node.attributes.id != null) {\n          idsUsage.add(node.attributes.id);\n        }\n        if (node.attributes.class != null) {\n          for (const className of node.attributes.class.split(/\\s+/)) {\n            classesUsage.add(className);\n          }\n        }\n        // collect style elements or elements with style attribute\n        if (node.name === 'style' && node.children.length !== 0) {\n          styleElements.push(node);\n        } else if (node.attributes.style != null) {\n          elementsWithStyleAttributes.push(node);\n        }\n      },\n    },\n\n    root: {\n      exit: () => {\n        /**\n         * @type {csso.Usage}\n         */\n        const cssoUsage = {};\n        if (deoptimized === false || forceUsageDeoptimized === true) {\n          if (enableTagsUsage && tagsUsage.size !== 0) {\n            cssoUsage.tags = Array.from(tagsUsage);\n          }\n          if (enableIdsUsage && idsUsage.size !== 0) {\n            cssoUsage.ids = Array.from(idsUsage);\n          }\n          if (enableClassesUsage && classesUsage.size !== 0) {\n            cssoUsage.classes = Array.from(classesUsage);\n          }\n        }\n        // minify style elements\n        for (const node of styleElements) {\n          if (\n            node.children[0].type === 'text' ||\n            node.children[0].type === 'cdata'\n          ) {\n            const cssText = node.children[0].value;\n            const minified = csso.minify(cssText, {\n              ...params,\n              usage: cssoUsage,\n            }).css;\n            // preserve cdata if necessary\n            // TODO split cdata -> text optimisation into separate plugin\n            if (cssText.indexOf('>') >= 0 || cssText.indexOf('<') >= 0) {\n              node.children[0].type = 'cdata';\n              node.children[0].value = minified;\n            } else {\n              node.children[0].type = 'text';\n              node.children[0].value = minified;\n            }\n          }\n        }\n        // minify style attributes\n        for (const node of elementsWithStyleAttributes) {\n          // style attribute\n          const elemStyle = node.attributes.style;\n          node.attributes.style = csso.minifyBlock(elemStyle, {\n            ...params,\n          }).css;\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}