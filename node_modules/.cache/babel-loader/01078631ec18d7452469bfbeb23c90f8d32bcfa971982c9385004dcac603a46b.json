{"ast":null,"code":"'use strict';\n\nconst {\n  detachNodeFromParent\n} = require('../lib/xast.js');\nexports.name = 'removeElementsByAttr';\nexports.description = 'removes arbitrary elements by ID or className (disabled by default)';\n\n/**\n * Remove arbitrary SVG elements by ID or className.\n *\n * @example id\n *     > single: remove element with ID of `elementID`\n *     ---\n *     removeElementsByAttr:\n *       id: 'elementID'\n *\n *     > list: remove multiple elements by ID\n *     ---\n *     removeElementsByAttr:\n *       id:\n *         - 'elementID'\n *         - 'anotherID'\n *\n * @example class\n *     > single: remove all elements with class of `elementClass`\n *     ---\n *     removeElementsByAttr:\n *       class: 'elementClass'\n *\n *     > list: remove all elements with class of `elementClass` or `anotherClass`\n *     ---\n *     removeElementsByAttr:\n *       class:\n *         - 'elementClass'\n *         - 'anotherClass'\n *\n * @author Eli Dupuis (@elidupuis)\n *\n * @type {import('./plugins-types').Plugin<'removeElementsByAttr'>}\n */\nexports.fn = (root, params) => {\n  const ids = params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];\n  const classes = params.class == null ? [] : Array.isArray(params.class) ? params.class : [params.class];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // remove element if it's `id` matches configured `id` params\n        if (node.attributes.id != null && ids.length !== 0) {\n          if (ids.includes(node.attributes.id)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n        // remove element if it's `class` contains any of the configured `class` params\n        if (node.attributes.class && classes.length !== 0) {\n          const classList = node.attributes.class.split(' ');\n          for (const item of classes) {\n            if (classList.includes(item)) {\n              detachNodeFromParent(node, parentNode);\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["detachNodeFromParent","require","exports","name","description","fn","root","params","ids","id","Array","isArray","classes","class","element","enter","node","parentNode","attributes","length","includes","classList","split","item"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/removeElementsByAttr.js"],"sourcesContent":["'use strict';\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\n\nexports.name = 'removeElementsByAttr';\nexports.description =\n  'removes arbitrary elements by ID or className (disabled by default)';\n\n/**\n * Remove arbitrary SVG elements by ID or className.\n *\n * @example id\n *     > single: remove element with ID of `elementID`\n *     ---\n *     removeElementsByAttr:\n *       id: 'elementID'\n *\n *     > list: remove multiple elements by ID\n *     ---\n *     removeElementsByAttr:\n *       id:\n *         - 'elementID'\n *         - 'anotherID'\n *\n * @example class\n *     > single: remove all elements with class of `elementClass`\n *     ---\n *     removeElementsByAttr:\n *       class: 'elementClass'\n *\n *     > list: remove all elements with class of `elementClass` or `anotherClass`\n *     ---\n *     removeElementsByAttr:\n *       class:\n *         - 'elementClass'\n *         - 'anotherClass'\n *\n * @author Eli Dupuis (@elidupuis)\n *\n * @type {import('./plugins-types').Plugin<'removeElementsByAttr'>}\n */\nexports.fn = (root, params) => {\n  const ids =\n    params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];\n  const classes =\n    params.class == null\n      ? []\n      : Array.isArray(params.class)\n      ? params.class\n      : [params.class];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // remove element if it's `id` matches configured `id` params\n        if (node.attributes.id != null && ids.length !== 0) {\n          if (ids.includes(node.attributes.id)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n        // remove element if it's `class` contains any of the configured `class` params\n        if (node.attributes.class && classes.length !== 0) {\n          const classList = node.attributes.class.split(' ');\n          for (const item of classes) {\n            if (classList.includes(item)) {\n              detachNodeFromParent(node, parentNode);\n              break;\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAqB,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE1DC,OAAO,CAACC,IAAI,GAAG,sBAAsB;AACrCD,OAAO,CAACE,WAAW,GACjB,qEAAqE;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,EAAE,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC7B,MAAMC,GAAG,GACPD,MAAM,CAACE,EAAE,IAAI,IAAI,GAAG,EAAE,GAAGC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACE,EAAE,CAAC,GAAGF,MAAM,CAACE,EAAE,GAAG,CAACF,MAAM,CAACE,EAAE,CAAC;EAC7E,MAAMG,OAAO,GACXL,MAAM,CAACM,KAAK,IAAI,IAAI,GAChB,EAAE,GACFH,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACM,KAAK,CAAC,GAC3BN,MAAM,CAACM,KAAK,GACZ,CAACN,MAAM,CAACM,KAAK,CAAC;EACpB,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAEA,CAACC,IAAI,EAAEC,UAAU,KAAK;QAC3B;QACA,IAAID,IAAI,CAACE,UAAU,CAACT,EAAE,IAAI,IAAI,IAAID,GAAG,CAACW,MAAM,KAAK,CAAC,EAAE;UAClD,IAAIX,GAAG,CAACY,QAAQ,CAACJ,IAAI,CAACE,UAAU,CAACT,EAAE,CAAC,EAAE;YACpCT,oBAAoB,CAACgB,IAAI,EAAEC,UAAU,CAAC;UACxC;QACF;QACA;QACA,IAAID,IAAI,CAACE,UAAU,CAACL,KAAK,IAAID,OAAO,CAACO,MAAM,KAAK,CAAC,EAAE;UACjD,MAAME,SAAS,GAAGL,IAAI,CAACE,UAAU,CAACL,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC;UAClD,KAAK,MAAMC,IAAI,IAAIX,OAAO,EAAE;YAC1B,IAAIS,SAAS,CAACD,QAAQ,CAACG,IAAI,CAAC,EAAE;cAC5BvB,oBAAoB,CAACgB,IAAI,EAAEC,UAAU,CAAC;cACtC;YACF;UACF;QACF;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}