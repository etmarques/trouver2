{"ast":null,"code":"'use strict';\n\nvar core = require('@babel/core');\nconst addJSXAttribute = (api, opts) => {\n  const getAttributeValue = (value, literal) => {\n    if (typeof value === \"string\" && literal) {\n      return core.types.jsxExpressionContainer(core.template.ast(value).expression);\n    }\n    if (typeof value === \"string\") {\n      return core.types.stringLiteral(value);\n    }\n    if (typeof value === \"boolean\") {\n      return core.types.jsxExpressionContainer(core.types.booleanLiteral(value));\n    }\n    if (typeof value === \"number\") {\n      return core.types.jsxExpressionContainer(core.types.numericLiteral(value));\n    }\n    return null;\n  };\n  return {\n    visitor: {\n      JSXAttribute(path) {\n        const valuePath = path.get(\"value\");\n        if (!valuePath.isStringLiteral()) return;\n        opts.values.forEach(_ref => {\n          let {\n            value,\n            newValue,\n            literal\n          } = _ref;\n          if (!valuePath.isStringLiteral({\n            value\n          })) return;\n          const attributeValue = getAttributeValue(newValue, literal);\n          if (attributeValue) {\n            valuePath.replaceWith(attributeValue);\n          }\n        });\n      }\n    }\n  };\n};\nmodule.exports = addJSXAttribute;","map":{"version":3,"names":["addJSXAttribute","api","opts","getAttributeValue","value","literal","core","types","jsxExpressionContainer","template","ast","expression","stringLiteral","booleanLiteral","numericLiteral","visitor","JSXAttribute","path","valuePath","get","isStringLiteral","values","forEach","_ref","newValue","attributeValue","replaceWith"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\babel-plugin-replace-jsx-attribute-value\\src\\index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ConfigAPI, types as t, NodePath, template } from '@babel/core'\n\nexport interface Value {\n  value: string\n  newValue: string | boolean | number\n  literal?: boolean\n}\n\nexport interface Options {\n  values: Value[]\n}\n\nconst addJSXAttribute = (api: ConfigAPI, opts: Options) => {\n  const getAttributeValue = (\n    value: string | boolean | number,\n    literal?: boolean,\n  ) => {\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(\n        (template.ast(value) as t.ExpressionStatement).expression,\n      )\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value)\n    }\n\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value))\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value))\n    }\n\n    return null\n  }\n\n  return {\n    visitor: {\n      JSXAttribute(path: NodePath<t.JSXAttribute>) {\n        const valuePath = path.get('value')\n        if (!valuePath.isStringLiteral()) return\n\n        opts.values.forEach(({ value, newValue, literal }) => {\n          if (!valuePath.isStringLiteral({ value })) return\n          const attributeValue = getAttributeValue(newValue, literal)\n          if (attributeValue) {\n            valuePath.replaceWith(attributeValue)\n          }\n        })\n      },\n    },\n  }\n}\n\nexport default addJSXAttribute\n"],"mappings":";;;AAaM,MAAAA,eAAA,GAAkBA,CAACC,GAAA,EAAgBC,IAAkB;EACnD,MAAAC,iBAAA,GAAoBA,CACxBC,KAAA,EACAC,OACG;IACC,WAAOD,KAAU,iBAAYC,OAAS;MACxC,OAAOC,IAAA,CAAAC,KAAE,CAAAC,sBAAA,CACNF,IAAA,CAAAG,QAAA,CAASC,GAAI,CAAAN,KAAK,CAA4B,CAAAO,UAAA,CACjD;IAAA;IAGE,WAAOP,KAAA,KAAU,QAAU;MACtB,OAAAE,IAAA,CAAAC,KAAA,CAAEK,aAAA,CAAcR,KAAK;IAAA;IAG1B,WAAOA,KAAA,KAAU,SAAW;MAC9B,OAAOE,IAAA,CAAAC,KAAE,CAAAC,sBAAA,CAAuBF,IAAA,CAAAC,KAAE,CAAAM,cAAA,CAAeT,KAAK,CAAC;IAAA;IAGrD,WAAOA,KAAA,KAAU,QAAU;MAC7B,OAAOE,IAAA,CAAAC,KAAE,CAAAC,sBAAA,CAAuBF,IAAA,CAAAC,KAAE,CAAAO,cAAA,CAAeV,KAAK,CAAC;IAAA;IAGlD;EAAA,CACT;EAEO;IACLW,OAAS;MACPC,aAAaC,IAAgC;QACrC,MAAAC,SAAA,GAAYD,IAAK,CAAAE,GAAA,CAAI,OAAO;QAC9B,KAACD,SAAA,CAAUE,eAAgB,IAAG;QAElClB,IAAA,CAAKmB,MAAA,CAAOC,OAAQ,CAAAC,IAAA,IAAkC;UAAA,IAAjC;YAAEnB,KAAO;YAAAoB,QAAA;YAAUnB;UAAA,CAAc,GAAAkB,IAAA;UACpD,IAAI,CAACL,SAAA,CAAUE,eAAgB;YAAEhB;UAAA,CAAO,GAAG;UACrC,MAAAqB,cAAA,GAAiBtB,iBAAkB,CAAAqB,QAAA,EAAUnB,OAAO;UAC1D,IAAIoB,cAAgB;YAClBP,SAAA,CAAUQ,WAAA,CAAYD,cAAc;UAAA;QACtC,CACD;MAAA;IACH;EACF,CACF;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}