{"ast":null,"code":"'use strict';\n\nexports.name = 'sortDefsChildren';\nexports.description = 'Sorts children of <defs> to improve compression';\n\n/**\n * Sorts children of defs in order to improve compression.\n * Sorted first by frequency then by element name length then by element name (to ensure grouping).\n *\n * @author David Leston\n *\n * @type {import('./plugins-types').Plugin<'sortDefsChildren'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: node => {\n        if (node.name === 'defs') {\n          /**\n           * @type {Map<string, number>}\n           */\n          const frequencies = new Map();\n          for (const child of node.children) {\n            if (child.type === 'element') {\n              const frequency = frequencies.get(child.name);\n              if (frequency == null) {\n                frequencies.set(child.name, 1);\n              } else {\n                frequencies.set(child.name, frequency + 1);\n              }\n            }\n          }\n          node.children.sort((a, b) => {\n            if (a.type !== 'element' || b.type !== 'element') {\n              return 0;\n            }\n            const aFrequency = frequencies.get(a.name);\n            const bFrequency = frequencies.get(b.name);\n            if (aFrequency != null && bFrequency != null) {\n              const frequencyComparison = bFrequency - aFrequency;\n              if (frequencyComparison !== 0) {\n                return frequencyComparison;\n              }\n            }\n            const lengthComparison = b.name.length - a.name.length;\n            if (lengthComparison !== 0) {\n              return lengthComparison;\n            }\n            if (a.name !== b.name) {\n              return a.name > b.name ? -1 : 1;\n            }\n            return 0;\n          });\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","description","fn","element","enter","node","frequencies","Map","child","children","type","frequency","get","set","sort","a","b","aFrequency","bFrequency","frequencyComparison","lengthComparison","length"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/sortDefsChildren.js"],"sourcesContent":["'use strict';\n\nexports.name = 'sortDefsChildren';\nexports.description = 'Sorts children of <defs> to improve compression';\n\n/**\n * Sorts children of defs in order to improve compression.\n * Sorted first by frequency then by element name length then by element name (to ensure grouping).\n *\n * @author David Leston\n *\n * @type {import('./plugins-types').Plugin<'sortDefsChildren'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node) => {\n        if (node.name === 'defs') {\n          /**\n           * @type {Map<string, number>}\n           */\n          const frequencies = new Map();\n          for (const child of node.children) {\n            if (child.type === 'element') {\n              const frequency = frequencies.get(child.name);\n              if (frequency == null) {\n                frequencies.set(child.name, 1);\n              } else {\n                frequencies.set(child.name, frequency + 1);\n              }\n            }\n          }\n          node.children.sort((a, b) => {\n            if (a.type !== 'element' || b.type !== 'element') {\n              return 0;\n            }\n            const aFrequency = frequencies.get(a.name);\n            const bFrequency = frequencies.get(b.name);\n            if (aFrequency != null && bFrequency != null) {\n              const frequencyComparison = bFrequency - aFrequency;\n              if (frequencyComparison !== 0) {\n                return frequencyComparison;\n              }\n            }\n            const lengthComparison = b.name.length - a.name.length;\n            if (lengthComparison !== 0) {\n              return lengthComparison;\n            }\n            if (a.name !== b.name) {\n              return a.name > b.name ? -1 : 1;\n            }\n            return 0;\n          });\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,kBAAkB;AACjCD,OAAO,CAACE,WAAW,GAAG,iDAAiD;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,EAAE,GAAG,MAAM;EACjB,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAGC,IAAI,IAAK;QACf,IAAIA,IAAI,CAACL,IAAI,KAAK,MAAM,EAAE;UACxB;AACV;AACA;UACU,MAAMM,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;UAC7B,KAAK,MAAMC,KAAK,IAAIH,IAAI,CAACI,QAAQ,EAAE;YACjC,IAAID,KAAK,CAACE,IAAI,KAAK,SAAS,EAAE;cAC5B,MAAMC,SAAS,GAAGL,WAAW,CAACM,GAAG,CAACJ,KAAK,CAACR,IAAI,CAAC;cAC7C,IAAIW,SAAS,IAAI,IAAI,EAAE;gBACrBL,WAAW,CAACO,GAAG,CAACL,KAAK,CAACR,IAAI,EAAE,CAAC,CAAC;cAChC,CAAC,MAAM;gBACLM,WAAW,CAACO,GAAG,CAACL,KAAK,CAACR,IAAI,EAAEW,SAAS,GAAG,CAAC,CAAC;cAC5C;YACF;UACF;UACAN,IAAI,CAACI,QAAQ,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;YAC3B,IAAID,CAAC,CAACL,IAAI,KAAK,SAAS,IAAIM,CAAC,CAACN,IAAI,KAAK,SAAS,EAAE;cAChD,OAAO,CAAC;YACV;YACA,MAAMO,UAAU,GAAGX,WAAW,CAACM,GAAG,CAACG,CAAC,CAACf,IAAI,CAAC;YAC1C,MAAMkB,UAAU,GAAGZ,WAAW,CAACM,GAAG,CAACI,CAAC,CAAChB,IAAI,CAAC;YAC1C,IAAIiB,UAAU,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,EAAE;cAC5C,MAAMC,mBAAmB,GAAGD,UAAU,GAAGD,UAAU;cACnD,IAAIE,mBAAmB,KAAK,CAAC,EAAE;gBAC7B,OAAOA,mBAAmB;cAC5B;YACF;YACA,MAAMC,gBAAgB,GAAGJ,CAAC,CAAChB,IAAI,CAACqB,MAAM,GAAGN,CAAC,CAACf,IAAI,CAACqB,MAAM;YACtD,IAAID,gBAAgB,KAAK,CAAC,EAAE;cAC1B,OAAOA,gBAAgB;YACzB;YACA,IAAIL,CAAC,CAACf,IAAI,KAAKgB,CAAC,CAAChB,IAAI,EAAE;cACrB,OAAOe,CAAC,CAACf,IAAI,GAAGgB,CAAC,CAAChB,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;YACjC;YACA,OAAO,CAAC;UACV,CAAC,CAAC;QACJ;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}