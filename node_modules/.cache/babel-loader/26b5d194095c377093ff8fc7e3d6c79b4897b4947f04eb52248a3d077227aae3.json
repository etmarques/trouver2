{"ast":null,"code":"'use strict';\n\nexports.name = 'cleanupAttrs';\nexports.description = 'cleanups attributes from newlines, trailing and repeating spaces';\nconst regNewlinesNeedSpace = /(\\S)\\r?\\n(\\S)/g;\nconst regNewlines = /\\r?\\n/g;\nconst regSpaces = /\\s{2,}/g;\n\n/**\n * Cleanup attributes values from newlines, trailing and repeating spaces.\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'cleanupAttrs'>}\n */\nexports.fn = (root, params) => {\n  const {\n    newlines = true,\n    trim = true,\n    spaces = true\n  } = params;\n  return {\n    element: {\n      enter: node => {\n        for (const name of Object.keys(node.attributes)) {\n          if (newlines) {\n            // new line which requires a space instead of themselve\n            node.attributes[name] = node.attributes[name].replace(regNewlinesNeedSpace, (match, p1, p2) => p1 + ' ' + p2);\n            // simple new line\n            node.attributes[name] = node.attributes[name].replace(regNewlines, '');\n          }\n          if (trim) {\n            node.attributes[name] = node.attributes[name].trim();\n          }\n          if (spaces) {\n            node.attributes[name] = node.attributes[name].replace(regSpaces, ' ');\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","description","regNewlinesNeedSpace","regNewlines","regSpaces","fn","root","params","newlines","trim","spaces","element","enter","node","Object","keys","attributes","replace","match","p1","p2"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/cleanupAttrs.js"],"sourcesContent":["'use strict';\n\nexports.name = 'cleanupAttrs';\nexports.description =\n  'cleanups attributes from newlines, trailing and repeating spaces';\n\nconst regNewlinesNeedSpace = /(\\S)\\r?\\n(\\S)/g;\nconst regNewlines = /\\r?\\n/g;\nconst regSpaces = /\\s{2,}/g;\n\n/**\n * Cleanup attributes values from newlines, trailing and repeating spaces.\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'cleanupAttrs'>}\n */\nexports.fn = (root, params) => {\n  const { newlines = true, trim = true, spaces = true } = params;\n  return {\n    element: {\n      enter: (node) => {\n        for (const name of Object.keys(node.attributes)) {\n          if (newlines) {\n            // new line which requires a space instead of themselve\n            node.attributes[name] = node.attributes[name].replace(\n              regNewlinesNeedSpace,\n              (match, p1, p2) => p1 + ' ' + p2\n            );\n            // simple new line\n            node.attributes[name] = node.attributes[name].replace(\n              regNewlines,\n              ''\n            );\n          }\n          if (trim) {\n            node.attributes[name] = node.attributes[name].trim();\n          }\n          if (spaces) {\n            node.attributes[name] = node.attributes[name].replace(\n              regSpaces,\n              ' '\n            );\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,cAAc;AAC7BD,OAAO,CAACE,WAAW,GACjB,kEAAkE;AAEpE,MAAMC,oBAAoB,GAAG,gBAAgB;AAC7C,MAAMC,WAAW,GAAG,QAAQ;AAC5B,MAAMC,SAAS,GAAG,SAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACM,EAAE,GAAG,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC7B,MAAM;IAAEC,QAAQ,GAAG,IAAI;IAAEC,IAAI,GAAG,IAAI;IAAEC,MAAM,GAAG;EAAK,CAAC,GAAGH,MAAM;EAC9D,OAAO;IACLI,OAAO,EAAE;MACPC,KAAK,EAAGC,IAAI,IAAK;QACf,KAAK,MAAMb,IAAI,IAAIc,MAAM,CAACC,IAAI,CAACF,IAAI,CAACG,UAAU,CAAC,EAAE;UAC/C,IAAIR,QAAQ,EAAE;YACZ;YACAK,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,GAAGa,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,CAACiB,OAAO,CACnDf,oBAAoB,EACpB,CAACgB,KAAK,EAAEC,EAAE,EAAEC,EAAE,KAAKD,EAAE,GAAG,GAAG,GAAGC,EAChC,CAAC;YACD;YACAP,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,GAAGa,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,CAACiB,OAAO,CACnDd,WAAW,EACX,EACF,CAAC;UACH;UACA,IAAIM,IAAI,EAAE;YACRI,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,GAAGa,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,CAACS,IAAI,CAAC,CAAC;UACtD;UACA,IAAIC,MAAM,EAAE;YACVG,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,GAAGa,IAAI,CAACG,UAAU,CAAChB,IAAI,CAAC,CAACiB,OAAO,CACnDb,SAAS,EACT,GACF,CAAC;UACH;QACF;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}