{"ast":null,"code":"'use strict';\n\nexports.name = 'removeUnusedNS';\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeUnusedNS'>}\n */\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          }\n          // preserve namespace used in nested elements attributes\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["exports","name","description","fn","unusedNamespaces","Set","element","enter","node","parentNode","type","Object","keys","attributes","startsWith","local","slice","length","add","size","includes","ns","split","has","delete","exit"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/removeUnusedNS.js"],"sourcesContent":["'use strict';\n\nexports.name = 'removeUnusedNS';\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeUnusedNS'>}\n */\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          }\n          // preserve namespace used in nested elements attributes\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,IAAI,GAAG,gBAAgB;AAC/BD,OAAO,CAACE,WAAW,GAAG,uCAAuC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,EAAE,GAAG,MAAM;EACjB;AACF;AACA;EACE,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAClC,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAEA,CAACC,IAAI,EAAEC,UAAU,KAAK;QAC3B;QACA;QACA,IAAID,IAAI,CAACP,IAAI,KAAK,KAAK,IAAIQ,UAAU,CAACC,IAAI,KAAK,MAAM,EAAE;UACrD,KAAK,MAAMT,IAAI,IAAIU,MAAM,CAACC,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC,EAAE;YAC/C,IAAIZ,IAAI,CAACa,UAAU,CAAC,QAAQ,CAAC,EAAE;cAC7B,MAAMC,KAAK,GAAGd,IAAI,CAACe,KAAK,CAAC,QAAQ,CAACC,MAAM,CAAC;cACzCb,gBAAgB,CAACc,GAAG,CAACH,KAAK,CAAC;YAC7B;UACF;QACF;QACA,IAAIX,gBAAgB,CAACe,IAAI,KAAK,CAAC,EAAE;UAC/B;UACA,IAAIX,IAAI,CAACP,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC3B,MAAM,CAACC,EAAE,CAAC,GAAGb,IAAI,CAACP,IAAI,CAACqB,KAAK,CAAC,GAAG,CAAC;YACjC,IAAIlB,gBAAgB,CAACmB,GAAG,CAACF,EAAE,CAAC,EAAE;cAC5BjB,gBAAgB,CAACoB,MAAM,CAACH,EAAE,CAAC;YAC7B;UACF;UACA;UACA,KAAK,MAAMpB,IAAI,IAAIU,MAAM,CAACC,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC,EAAE;YAC/C,IAAIZ,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,EAAE;cACtB,MAAM,CAACC,EAAE,CAAC,GAAGpB,IAAI,CAACqB,KAAK,CAAC,GAAG,CAAC;cAC5BlB,gBAAgB,CAACoB,MAAM,CAACH,EAAE,CAAC;YAC7B;UACF;QACF;MACF,CAAC;MACDI,IAAI,EAAEA,CAACjB,IAAI,EAAEC,UAAU,KAAK;QAC1B;QACA,IAAID,IAAI,CAACP,IAAI,KAAK,KAAK,IAAIQ,UAAU,CAACC,IAAI,KAAK,MAAM,EAAE;UACrD,KAAK,MAAMT,IAAI,IAAIG,gBAAgB,EAAE;YACnC,OAAOI,IAAI,CAACK,UAAU,CAAE,SAAQZ,IAAK,EAAC,CAAC;UACzC;QACF;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}