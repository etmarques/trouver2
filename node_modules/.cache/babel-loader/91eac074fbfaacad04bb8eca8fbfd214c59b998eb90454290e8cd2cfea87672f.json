{"ast":null,"code":"'use strict';\n\nvar svgo = require('svgo');\nvar cosmiconfig = require('cosmiconfig');\nconst explorer = cosmiconfig.cosmiconfigSync(\"svgo\", {\n  searchPlaces: [\"package.json\", \".svgorc\", \".svgorc.js\", \".svgorc.json\", \".svgorc.yaml\", \".svgorc.yml\", \"svgo.config.js\", \".svgo.yml\"],\n  transform: result => result && result.config,\n  cache: true\n});\nconst getSvgoConfigFromSvgrConfig = config => {\n  const params = {\n    overrides: {}\n  };\n  if (config.icon || config.dimensions === false) {\n    params.overrides.removeViewBox = false;\n  }\n  if (config.native) {\n    params.overrides.inlineStyles = {\n      onlyMatchedOnce: false\n    };\n  }\n  return {\n    plugins: [{\n      name: \"preset-default\",\n      params\n    }, \"prefixIds\"]\n  };\n};\nconst getSvgoConfig = (config, state) => {\n  const cwd = state.filePath || process.cwd();\n  if (config.svgoConfig) return config.svgoConfig;\n  if (config.runtimeConfig) {\n    const userConfig = explorer.search(cwd);\n    if (userConfig) return userConfig;\n  }\n  return getSvgoConfigFromSvgrConfig(config);\n};\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst svgoPlugin = (code, config, state) => {\n  if (!config.svgo) return code;\n  const svgoConfig = getSvgoConfig(config, state);\n  const result = svgo.optimize(code, __spreadProps(__spreadValues({}, svgoConfig), {\n    path: state.filePath\n  }));\n  if (result.modernError) {\n    throw result.modernError;\n  }\n  return result.data;\n};\nmodule.exports = svgoPlugin;","map":{"version":3,"names":["explorer","cosmiconfig","cosmiconfigSync","searchPlaces","transform","result","config","cache","getSvgoConfigFromSvgrConfig","params","overrides","icon","dimensions","removeViewBox","native","inlineStyles","onlyMatchedOnce","plugins","name","getSvgoConfig","state","cwd","filePath","process","svgoConfig","runtimeConfig","userConfig","search","svgoPlugin","code","svgo","optimize","__spreadProps","__spreadValues","path","modernError","data"],"sources":["C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\plugin-svgo\\src\\config.ts","C:\\Users\\AGU\\Documents\\trouver2\\node_modules\\@svgr\\plugin-svgo\\src\\index.ts"],"sourcesContent":["import { cosmiconfigSync } from 'cosmiconfig'\nimport type { Config, State } from '@svgr/core'\n\nconst explorer = cosmiconfigSync('svgo', {\n  searchPlaces: [\n    'package.json',\n    '.svgorc',\n    '.svgorc.js',\n    '.svgorc.json',\n    '.svgorc.yaml',\n    '.svgorc.yml',\n    'svgo.config.js',\n    '.svgo.yml',\n  ],\n  transform: (result) => result && result.config,\n  cache: true,\n})\n\nconst getSvgoConfigFromSvgrConfig = (config: Config): any => {\n  const params = { overrides: {} as any }\n  if (config.icon || config.dimensions === false) {\n    params.overrides.removeViewBox = false\n  }\n  if (config.native) {\n    params.overrides.inlineStyles = {\n      onlyMatchedOnce: false,\n    }\n  }\n\n  return {\n    plugins: [\n      {\n        name: 'preset-default',\n        params,\n      },\n      'prefixIds',\n    ],\n  }\n}\n\nexport const getSvgoConfig = (config: Config, state: State): any => {\n  const cwd = state.filePath || process.cwd()\n  if (config.svgoConfig) return config.svgoConfig\n  if (config.runtimeConfig) {\n    const userConfig = explorer.search(cwd)\n    if (userConfig) return userConfig\n  }\n  return getSvgoConfigFromSvgrConfig(config)\n}\n","import { optimize } from 'svgo'\nimport { getSvgoConfig } from './config'\nimport type { Plugin } from '@svgr/core'\n\nconst svgoPlugin: Plugin = (code, config, state) => {\n  if (!config.svgo) return code\n  const svgoConfig = getSvgoConfig(config, state)\n  const result = optimize(code, { ...svgoConfig, path: state.filePath })\n\n  // @ts-ignore\n  if (result.modernError) {\n    // @ts-ignore\n    throw result.modernError\n  }\n\n  return result.data\n}\n\nexport default svgoPlugin\n"],"mappings":";;;;AAGA,MAAMA,QAAA,GAAWC,WAAA,CAAAC,eAAA,CAAgB,MAAQ;EACvCC,YAAc,GACZ,gBACA,WACA,cACA,gBACA,gBACA,eACA,kBACA,YACF;EACAC,SAAW,EAACC,MAAW,IAAAA,MAAA,IAAUA,MAAO,CAAAC,MAAA;EACxCC,KAAO;AACT,CAAC;AAED,MAAMC,2BAAA,GAA+BF,MAAwB;EAC3D,MAAMG,MAAS;IAAEC,SAAW;EAAU;EACtC,IAAIJ,MAAO,CAAAK,IAAA,IAAQL,MAAO,CAAAM,UAAA,KAAe,KAAO;IAC9CH,MAAA,CAAOC,SAAA,CAAUG,aAAgB;EAAA;EAEnC,IAAIP,MAAA,CAAOQ,MAAQ;IACjBL,MAAA,CAAOC,SAAA,CAAUK,YAAe;MAC9BC,eAAiB;IAAA,CACnB;EAAA;EAGK;IACLC,OAAS,GACP;MACEC,IAAM;MACNT;IAAA,CACF,EACA;EACF,CACF;AACF;AAEa,MAAAU,aAAA,GAAgBA,CAACb,MAAA,EAAgBc,KAAsB;EAClE,MAAMC,GAAM,GAAAD,KAAA,CAAME,QAAY,IAAAC,OAAA,CAAQF,GAAI;EAC1C,IAAIf,MAAO,CAAAkB,UAAA,EAAY,OAAOlB,MAAO,CAAAkB,UAAA;EACrC,IAAIlB,MAAA,CAAOmB,aAAe;IAClB,MAAAC,UAAA,GAAa1B,QAAS,CAAA2B,MAAA,CAAON,GAAG;IAClC,IAAAK,UAAA,EAAmB,OAAAA,UAAA;EAAA;EAEzB,OAAOlB,2BAAA,CAA4BF,MAAM;AAC3C;;;;;;;;;;;;;;;;;;;;;AC5CA,MAAMsB,UAAqB,GAAAA,CAACC,IAAM,EAAAvB,MAAA,EAAQc,KAAU;EAClD,IAAI,CAACd,MAAO,CAAAwB,IAAA,EAAa,OAAAD,IAAA;EACnB,MAAAL,UAAA,GAAaL,aAAc,CAAAb,MAAA,EAAQc,KAAK;EACxC,MAAAf,MAAA,GAASyB,IAAA,CAAAC,QAAA,CAASF,IAAM,EAAAG,aAAA,CAAAC,cAAA,KAAKT,UAAA,GAAL;IAAiBU,IAAA,EAAMd,KAAM,CAAAE;EAAA,CAAU;EAGrE,IAAIjB,MAAA,CAAO8B,WAAa;IAEtB,MAAM9B,MAAO,CAAA8B,WAAA;EAAA;EAGf,OAAO9B,MAAO,CAAA+B,IAAA;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}