{"ast":null,"code":"'use strict';\n\nconst {\n  removeLeadingZero\n} = require('../lib/svgo/tools');\nexports.name = 'cleanupNumericValues';\nexports.description = 'rounds numeric values to the fixed precision, removes default ‘px’ units';\nconst regNumericValues = /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1\n};\n\n/**\n * Round numeric values to the fixed precision,\n * remove default 'px' units.\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'cleanupNumericValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true\n  } = params;\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.viewBox != null) {\n          const nums = node.attributes.viewBox.split(/\\s,?\\s*|,\\s*/g);\n          node.attributes.viewBox = nums.map(value => {\n            const num = Number(value);\n            return Number.isNaN(num) ? value : Number(num.toFixed(floatPrecision));\n          }).join(' ');\n        }\n        for (const [name, value] of Object.entries(node.attributes)) {\n          // The `version` attribute is a text string and cannot be rounded\n          if (name === 'version') {\n            continue;\n          }\n          const match = value.match(regNumericValues);\n\n          // if attribute value matches regNumericValues\n          if (match) {\n            // round it to the fixed precision\n            let num = Number(Number(match[1]).toFixed(floatPrecision));\n            /**\n             * @type {any}\n             */\n            let matchedUnit = match[3] || '';\n            /**\n             * @type{'' | keyof typeof absoluteLengths}\n             */\n            let units = matchedUnit;\n\n            // convert absolute values to pixels\n            if (convertToPx && units !== '' && units in absoluteLengths) {\n              const pxNum = Number((absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));\n              if (pxNum.toString().length < match[0].length) {\n                num = pxNum;\n                units = 'px';\n              }\n            }\n\n            // and remove leading zero\n            let str;\n            if (leadingZero) {\n              str = removeLeadingZero(num);\n            } else {\n              str = num.toString();\n            }\n\n            // remove default 'px' units\n            if (defaultPx && units === 'px') {\n              units = '';\n            }\n            node.attributes[name] = str + units;\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["removeLeadingZero","require","exports","name","description","regNumericValues","absoluteLengths","cm","mm","in","pt","pc","px","fn","_root","params","floatPrecision","leadingZero","defaultPx","convertToPx","element","enter","node","attributes","viewBox","nums","split","map","value","num","Number","isNaN","toFixed","join","Object","entries","match","matchedUnit","units","pxNum","toString","length","str"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/cleanupNumericValues.js"],"sourcesContent":["'use strict';\n\nconst { removeLeadingZero } = require('../lib/svgo/tools');\n\nexports.name = 'cleanupNumericValues';\nexports.description =\n  'rounds numeric values to the fixed precision, removes default ‘px’ units';\n\nconst regNumericValues =\n  /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\n\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1,\n};\n\n/**\n * Round numeric values to the fixed precision,\n * remove default 'px' units.\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'cleanupNumericValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true,\n  } = params;\n\n  return {\n    element: {\n      enter: (node) => {\n        if (node.attributes.viewBox != null) {\n          const nums = node.attributes.viewBox.split(/\\s,?\\s*|,\\s*/g);\n          node.attributes.viewBox = nums\n            .map((value) => {\n              const num = Number(value);\n              return Number.isNaN(num)\n                ? value\n                : Number(num.toFixed(floatPrecision));\n            })\n            .join(' ');\n        }\n\n        for (const [name, value] of Object.entries(node.attributes)) {\n          // The `version` attribute is a text string and cannot be rounded\n          if (name === 'version') {\n            continue;\n          }\n\n          const match = value.match(regNumericValues);\n\n          // if attribute value matches regNumericValues\n          if (match) {\n            // round it to the fixed precision\n            let num = Number(Number(match[1]).toFixed(floatPrecision));\n            /**\n             * @type {any}\n             */\n            let matchedUnit = match[3] || '';\n            /**\n             * @type{'' | keyof typeof absoluteLengths}\n             */\n            let units = matchedUnit;\n\n            // convert absolute values to pixels\n            if (convertToPx && units !== '' && units in absoluteLengths) {\n              const pxNum = Number(\n                (absoluteLengths[units] * Number(match[1])).toFixed(\n                  floatPrecision\n                )\n              );\n              if (pxNum.toString().length < match[0].length) {\n                num = pxNum;\n                units = 'px';\n              }\n            }\n\n            // and remove leading zero\n            let str;\n            if (leadingZero) {\n              str = removeLeadingZero(num);\n            } else {\n              str = num.toString();\n            }\n\n            // remove default 'px' units\n            if (defaultPx && units === 'px') {\n              units = '';\n            }\n\n            node.attributes[name] = str + units;\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}