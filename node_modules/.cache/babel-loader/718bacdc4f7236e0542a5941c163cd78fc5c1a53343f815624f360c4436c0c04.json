{"ast":null,"code":"'use strict';\n\nconst {\n  removeLeadingZero\n} = require('../lib/svgo/tools.js');\nexports.name = 'cleanupListOfValues';\nexports.description = 'rounds list of values to the fixed precision';\nconst regNumericValues = /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1\n};\n\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('./plugins-types').Plugin<'cleanupListOfValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true\n  } = params;\n\n  /**\n   * @type {(lists: string) => string}\n   */\n  const roundValues = lists => {\n    const roundedList = [];\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n        let units = matchedUnit;\n\n        // convert absolute values to pixels\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number((absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        }\n\n        // and remove leading zero\n        let str;\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        }\n\n        // remove default 'px' units\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n        roundedList.push(str + units);\n      }\n      // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n    return roundedList.join(' ');\n  };\n  return {\n    element: {\n      enter: node => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(node.attributes['enable-background']);\n        }\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(node.attributes['stroke-dasharray']);\n        }\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["removeLeadingZero","require","exports","name","description","regNumericValues","regSeparator","absoluteLengths","cm","mm","in","pt","pc","px","fn","_root","params","floatPrecision","leadingZero","defaultPx","convertToPx","roundValues","lists","roundedList","elem","split","match","matchNew","num","Number","toFixed","matchedUnit","units","pxNum","toString","length","str","push","join","element","enter","node","attributes","points","viewBox","dx","dy","x","y"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/cleanupListOfValues.js"],"sourcesContent":["'use strict';\n\nconst { removeLeadingZero } = require('../lib/svgo/tools.js');\n\nexports.name = 'cleanupListOfValues';\nexports.description = 'rounds list of values to the fixed precision';\n\nconst regNumericValues =\n  /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1,\n};\n\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('./plugins-types').Plugin<'cleanupListOfValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true,\n  } = params;\n\n  /**\n   * @type {(lists: string) => string}\n   */\n  const roundValues = (lists) => {\n    const roundedList = [];\n\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n        let units = matchedUnit;\n\n        // convert absolute values to pixels\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number(\n            (absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision)\n          );\n\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        }\n\n        // and remove leading zero\n        let str;\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        }\n\n        // remove default 'px' units\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n\n        roundedList.push(str + units);\n      }\n      // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n\n    return roundedList.join(' ');\n  };\n\n  return {\n    element: {\n      enter: (node) => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(\n            node.attributes['enable-background']\n          );\n        }\n\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(\n            node.attributes['stroke-dasharray']\n          );\n        }\n\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAkB,CAAC,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE7DC,OAAO,CAACC,IAAI,GAAG,qBAAqB;AACpCD,OAAO,CAACE,WAAW,GAAG,8CAA8C;AAEpE,MAAMC,gBAAgB,GACpB,oEAAoE;AACtE,MAAMC,YAAY,GAAG,eAAe;AACpC,MAAMC,eAAe,GAAG;EACtB;EACAC,EAAE,EAAE,EAAE,GAAG,IAAI;EACbC,EAAE,EAAE,EAAE,GAAG,IAAI;EACbC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE,CAAC,GAAG,CAAC;EACTC,EAAE,EAAE,EAAE;EACNC,EAAE,EAAE;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,OAAO,CAACY,EAAE,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC9B,MAAM;IACJC,cAAc,GAAG,CAAC;IAClBC,WAAW,GAAG,IAAI;IAClBC,SAAS,GAAG,IAAI;IAChBC,WAAW,GAAG;EAChB,CAAC,GAAGJ,MAAM;;EAEV;AACF;AACA;EACE,MAAMK,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMC,WAAW,GAAG,EAAE;IAEtB,KAAK,MAAMC,IAAI,IAAIF,KAAK,CAACG,KAAK,CAACnB,YAAY,CAAC,EAAE;MAC5C,MAAMoB,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACrB,gBAAgB,CAAC;MAC1C,MAAMsB,QAAQ,GAAGH,IAAI,CAACE,KAAK,CAAC,KAAK,CAAC;;MAElC;MACA,IAAIA,KAAK,EAAE;QACT;QACA,IAAIE,GAAG,GAAGC,MAAM,CAACA,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,CAACI,OAAO,CAACb,cAAc,CAAC,CAAC;QAC1D;AACR;AACA;QACQ,IAAIc,WAAW,GAAGL,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;QAChC;AACR;AACA;QACQ,IAAIM,KAAK,GAAGD,WAAW;;QAEvB;QACA,IAAIX,WAAW,IAAIY,KAAK,IAAIA,KAAK,IAAIzB,eAAe,EAAE;UACpD,MAAM0B,KAAK,GAAGJ,MAAM,CAClB,CAACtB,eAAe,CAACyB,KAAK,CAAC,GAAGH,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEI,OAAO,CAACb,cAAc,CACpE,CAAC;UAED,IAAIgB,KAAK,CAACC,QAAQ,CAAC,CAAC,CAACC,MAAM,GAAGT,KAAK,CAAC,CAAC,CAAC,CAACS,MAAM,EAAE;YAC7CP,GAAG,GAAGK,KAAK;YACXD,KAAK,GAAG,IAAI;UACd;QACF;;QAEA;QACA,IAAII,GAAG;QACP,IAAIlB,WAAW,EAAE;UACfkB,GAAG,GAAGpC,iBAAiB,CAAC4B,GAAG,CAAC;QAC9B,CAAC,MAAM;UACLQ,GAAG,GAAGR,GAAG,CAACM,QAAQ,CAAC,CAAC;QACtB;;QAEA;QACA,IAAIf,SAAS,IAAIa,KAAK,KAAK,IAAI,EAAE;UAC/BA,KAAK,GAAG,EAAE;QACZ;QAEAT,WAAW,CAACc,IAAI,CAACD,GAAG,GAAGJ,KAAK,CAAC;MAC/B;MACA;MAAA,KACK,IAAIL,QAAQ,EAAE;QACjBJ,WAAW,CAACc,IAAI,CAAC,KAAK,CAAC;MACzB,CAAC,MAAM,IAAIb,IAAI,EAAE;QACfD,WAAW,CAACc,IAAI,CAACb,IAAI,CAAC;MACxB;IACF;IAEA,OAAOD,WAAW,CAACe,IAAI,CAAC,GAAG,CAAC;EAC9B,CAAC;EAED,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAGC,IAAI,IAAK;QACf,IAAIA,IAAI,CAACC,UAAU,CAACC,MAAM,IAAI,IAAI,EAAE;UAClCF,IAAI,CAACC,UAAU,CAACC,MAAM,GAAGtB,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACC,MAAM,CAAC;QAC9D;QAEA,IAAIF,IAAI,CAACC,UAAU,CAAC,mBAAmB,CAAC,IAAI,IAAI,EAAE;UAChDD,IAAI,CAACC,UAAU,CAAC,mBAAmB,CAAC,GAAGrB,WAAW,CAChDoB,IAAI,CAACC,UAAU,CAAC,mBAAmB,CACrC,CAAC;QACH;QAEA,IAAID,IAAI,CAACC,UAAU,CAACE,OAAO,IAAI,IAAI,EAAE;UACnCH,IAAI,CAACC,UAAU,CAACE,OAAO,GAAGvB,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACE,OAAO,CAAC;QAChE;QAEA,IAAIH,IAAI,CAACC,UAAU,CAAC,kBAAkB,CAAC,IAAI,IAAI,EAAE;UAC/CD,IAAI,CAACC,UAAU,CAAC,kBAAkB,CAAC,GAAGrB,WAAW,CAC/CoB,IAAI,CAACC,UAAU,CAAC,kBAAkB,CACpC,CAAC;QACH;QAEA,IAAID,IAAI,CAACC,UAAU,CAACG,EAAE,IAAI,IAAI,EAAE;UAC9BJ,IAAI,CAACC,UAAU,CAACG,EAAE,GAAGxB,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACG,EAAE,CAAC;QACtD;QAEA,IAAIJ,IAAI,CAACC,UAAU,CAACI,EAAE,IAAI,IAAI,EAAE;UAC9BL,IAAI,CAACC,UAAU,CAACI,EAAE,GAAGzB,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACI,EAAE,CAAC;QACtD;QAEA,IAAIL,IAAI,CAACC,UAAU,CAACK,CAAC,IAAI,IAAI,EAAE;UAC7BN,IAAI,CAACC,UAAU,CAACK,CAAC,GAAG1B,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACK,CAAC,CAAC;QACpD;QAEA,IAAIN,IAAI,CAACC,UAAU,CAACM,CAAC,IAAI,IAAI,EAAE;UAC7BP,IAAI,CAACC,UAAU,CAACM,CAAC,GAAG3B,WAAW,CAACoB,IAAI,CAACC,UAAU,CAACM,CAAC,CAAC;QACpD;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}