{"ast":null,"code":"'use strict';\n\nconst {\n  detachNodeFromParent\n} = require('../lib/xast.js');\nconst {\n  editorNamespaces\n} = require('./_collections.js');\nexports.name = 'removeEditorsNSData';\nexports.description = 'removes editors namespaces, elements and attributes';\n\n/**\n * Remove editors namespaces, elements and attributes.\n *\n * @example\n * <svg xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\">\n * <sodipodi:namedview/>\n * <path sodipodi:nodetypes=\"cccc\"/>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeEditorsNSData'>}\n */\nexports.fn = (_root, params) => {\n  let namespaces = editorNamespaces;\n  if (Array.isArray(params.additionalNamespaces)) {\n    namespaces = [...editorNamespaces, ...params.additionalNamespaces];\n  }\n  /**\n   * @type {Array<string>}\n   */\n  const prefixes = [];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect namespace aliases from svg element\n        if (node.name === 'svg') {\n          for (const [name, value] of Object.entries(node.attributes)) {\n            if (name.startsWith('xmlns:') && namespaces.includes(value)) {\n              prefixes.push(name.slice('xmlns:'.length));\n              // <svg xmlns:sodipodi=\"\">\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor attributes, for example\n        // <* sodipodi:*=\"\">\n        for (const name of Object.keys(node.attributes)) {\n          if (name.includes(':')) {\n            const [prefix] = name.split(':');\n            if (prefixes.includes(prefix)) {\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor elements, for example\n        // <sodipodi:*>\n        if (node.name.includes(':')) {\n          const [prefix] = node.name.split(':');\n          if (prefixes.includes(prefix)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["detachNodeFromParent","require","editorNamespaces","exports","name","description","fn","_root","params","namespaces","Array","isArray","additionalNamespaces","prefixes","element","enter","node","parentNode","value","Object","entries","attributes","startsWith","includes","push","slice","length","keys","prefix","split"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/svgo/plugins/removeEditorsNSData.js"],"sourcesContent":["'use strict';\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\nconst { editorNamespaces } = require('./_collections.js');\n\nexports.name = 'removeEditorsNSData';\nexports.description = 'removes editors namespaces, elements and attributes';\n\n/**\n * Remove editors namespaces, elements and attributes.\n *\n * @example\n * <svg xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\">\n * <sodipodi:namedview/>\n * <path sodipodi:nodetypes=\"cccc\"/>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeEditorsNSData'>}\n */\nexports.fn = (_root, params) => {\n  let namespaces = editorNamespaces;\n  if (Array.isArray(params.additionalNamespaces)) {\n    namespaces = [...editorNamespaces, ...params.additionalNamespaces];\n  }\n  /**\n   * @type {Array<string>}\n   */\n  const prefixes = [];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect namespace aliases from svg element\n        if (node.name === 'svg') {\n          for (const [name, value] of Object.entries(node.attributes)) {\n            if (name.startsWith('xmlns:') && namespaces.includes(value)) {\n              prefixes.push(name.slice('xmlns:'.length));\n              // <svg xmlns:sodipodi=\"\">\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor attributes, for example\n        // <* sodipodi:*=\"\">\n        for (const name of Object.keys(node.attributes)) {\n          if (name.includes(':')) {\n            const [prefix] = name.split(':');\n            if (prefixes.includes(prefix)) {\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor elements, for example\n        // <sodipodi:*>\n        if (node.name.includes(':')) {\n          const [prefix] = node.name.split(':');\n          if (prefixes.includes(prefix)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAqB,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC1D,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEzDE,OAAO,CAACC,IAAI,GAAG,qBAAqB;AACpCD,OAAO,CAACE,WAAW,GAAG,qDAAqD;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,EAAE,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC9B,IAAIC,UAAU,GAAGP,gBAAgB;EACjC,IAAIQ,KAAK,CAACC,OAAO,CAACH,MAAM,CAACI,oBAAoB,CAAC,EAAE;IAC9CH,UAAU,GAAG,CAAC,GAAGP,gBAAgB,EAAE,GAAGM,MAAM,CAACI,oBAAoB,CAAC;EACpE;EACA;AACF;AACA;EACE,MAAMC,QAAQ,GAAG,EAAE;EACnB,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAEA,CAACC,IAAI,EAAEC,UAAU,KAAK;QAC3B;QACA,IAAID,IAAI,CAACZ,IAAI,KAAK,KAAK,EAAE;UACvB,KAAK,MAAM,CAACA,IAAI,EAAEc,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,IAAI,CAACK,UAAU,CAAC,EAAE;YAC3D,IAAIjB,IAAI,CAACkB,UAAU,CAAC,QAAQ,CAAC,IAAIb,UAAU,CAACc,QAAQ,CAACL,KAAK,CAAC,EAAE;cAC3DL,QAAQ,CAACW,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAAC,QAAQ,CAACC,MAAM,CAAC,CAAC;cAC1C;cACA,OAAOV,IAAI,CAACK,UAAU,CAACjB,IAAI,CAAC;YAC9B;UACF;QACF;QACA;QACA;QACA,KAAK,MAAMA,IAAI,IAAIe,MAAM,CAACQ,IAAI,CAACX,IAAI,CAACK,UAAU,CAAC,EAAE;UAC/C,IAAIjB,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtB,MAAM,CAACK,MAAM,CAAC,GAAGxB,IAAI,CAACyB,KAAK,CAAC,GAAG,CAAC;YAChC,IAAIhB,QAAQ,CAACU,QAAQ,CAACK,MAAM,CAAC,EAAE;cAC7B,OAAOZ,IAAI,CAACK,UAAU,CAACjB,IAAI,CAAC;YAC9B;UACF;QACF;QACA;QACA;QACA,IAAIY,IAAI,CAACZ,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,EAAE;UAC3B,MAAM,CAACK,MAAM,CAAC,GAAGZ,IAAI,CAACZ,IAAI,CAACyB,KAAK,CAAC,GAAG,CAAC;UACrC,IAAIhB,QAAQ,CAACU,QAAQ,CAACK,MAAM,CAAC,EAAE;YAC7B5B,oBAAoB,CAACgB,IAAI,EAAEC,UAAU,CAAC;UACxC;QACF;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}