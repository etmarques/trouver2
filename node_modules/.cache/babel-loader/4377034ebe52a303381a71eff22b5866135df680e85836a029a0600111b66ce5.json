{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.applyMissingDependenciesDefaults = applyMissingDependenciesDefaults;\nexports.validateIncludeExclude = validateIncludeExclude;\nvar _utils = require(\"./utils\");\nfunction patternToRegExp(pattern) {\n  if (pattern instanceof RegExp) return pattern;\n  try {\n    return new RegExp(`^${pattern}$`);\n  } catch (_unused) {\n    return null;\n  }\n}\nfunction buildUnusedError(label, unused) {\n  if (!unused.length) return \"\";\n  return `  - The following \"${label}\" patterns didn't match any polyfill:\\n` + unused.map(original => `    ${String(original)}\\n`).join(\"\");\n}\nfunction buldDuplicatesError(duplicates) {\n  if (!duplicates.size) return \"\";\n  return `  - The following polyfills were matched both by \"include\" and \"exclude\" patterns:\\n` + Array.from(duplicates, name => `    ${name}\\n`).join(\"\");\n}\nfunction validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {\n  let current;\n  const filter = pattern => {\n    const regexp = patternToRegExp(pattern);\n    if (!regexp) return false;\n    let matched = false;\n    for (const polyfill of polyfills) {\n      if (regexp.test(polyfill)) {\n        matched = true;\n        current.add(polyfill);\n      }\n    }\n    return !matched;\n  }; // prettier-ignore\n\n  const include = current = new Set();\n  const unusedInclude = Array.from(includePatterns).filter(filter); // prettier-ignore\n\n  const exclude = current = new Set();\n  const unusedExclude = Array.from(excludePatterns).filter(filter);\n  const duplicates = (0, _utils.intersection)(include, exclude);\n  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {\n    throw new Error(`Error while validating the \"${provider}\" provider options:\\n` + buildUnusedError(\"include\", unusedInclude) + buildUnusedError(\"exclude\", unusedExclude) + buldDuplicatesError(duplicates));\n  }\n  return {\n    include,\n    exclude\n  };\n}\nfunction applyMissingDependenciesDefaults(options, babelApi) {\n  const {\n    missingDependencies = {}\n  } = options;\n  if (missingDependencies === false) return false;\n  const caller = babelApi.caller(caller => caller == null ? void 0 : caller.name);\n  const {\n    log = \"deferred\",\n    inject = caller === \"rollup-plugin-babel\" ? \"throw\" : \"import\",\n    all = false\n  } = missingDependencies;\n  return {\n    log,\n    inject,\n    all\n  };\n}","map":{"version":3,"names":["exports","__esModule","applyMissingDependenciesDefaults","validateIncludeExclude","_utils","require","patternToRegExp","pattern","RegExp","_unused","buildUnusedError","label","unused","length","map","original","String","join","buldDuplicatesError","duplicates","size","Array","from","name","provider","polyfills","includePatterns","excludePatterns","current","filter","regexp","matched","polyfill","test","add","include","Set","unusedInclude","exclude","unusedExclude","intersection","Error","options","babelApi","missingDependencies","caller","log","inject","all"],"sources":["C:/Users/AGU/Documents/trouver2/node_modules/@babel/helper-define-polyfill-provider/lib/normalize-options.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.applyMissingDependenciesDefaults = applyMissingDependenciesDefaults;\nexports.validateIncludeExclude = validateIncludeExclude;\n\nvar _utils = require(\"./utils\");\n\nfunction patternToRegExp(pattern) {\n  if (pattern instanceof RegExp) return pattern;\n\n  try {\n    return new RegExp(`^${pattern}$`);\n  } catch (_unused) {\n    return null;\n  }\n}\n\nfunction buildUnusedError(label, unused) {\n  if (!unused.length) return \"\";\n  return `  - The following \"${label}\" patterns didn't match any polyfill:\\n` + unused.map(original => `    ${String(original)}\\n`).join(\"\");\n}\n\nfunction buldDuplicatesError(duplicates) {\n  if (!duplicates.size) return \"\";\n  return `  - The following polyfills were matched both by \"include\" and \"exclude\" patterns:\\n` + Array.from(duplicates, name => `    ${name}\\n`).join(\"\");\n}\n\nfunction validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {\n  let current;\n\n  const filter = pattern => {\n    const regexp = patternToRegExp(pattern);\n    if (!regexp) return false;\n    let matched = false;\n\n    for (const polyfill of polyfills) {\n      if (regexp.test(polyfill)) {\n        matched = true;\n        current.add(polyfill);\n      }\n    }\n\n    return !matched;\n  }; // prettier-ignore\n\n\n  const include = current = new Set();\n  const unusedInclude = Array.from(includePatterns).filter(filter); // prettier-ignore\n\n  const exclude = current = new Set();\n  const unusedExclude = Array.from(excludePatterns).filter(filter);\n  const duplicates = (0, _utils.intersection)(include, exclude);\n\n  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {\n    throw new Error(`Error while validating the \"${provider}\" provider options:\\n` + buildUnusedError(\"include\", unusedInclude) + buildUnusedError(\"exclude\", unusedExclude) + buldDuplicatesError(duplicates));\n  }\n\n  return {\n    include,\n    exclude\n  };\n}\n\nfunction applyMissingDependenciesDefaults(options, babelApi) {\n  const {\n    missingDependencies = {}\n  } = options;\n  if (missingDependencies === false) return false;\n  const caller = babelApi.caller(caller => caller == null ? void 0 : caller.name);\n  const {\n    log = \"deferred\",\n    inject = caller === \"rollup-plugin-babel\" ? \"throw\" : \"import\",\n    all = false\n  } = missingDependencies;\n  return {\n    log,\n    inject,\n    all\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}